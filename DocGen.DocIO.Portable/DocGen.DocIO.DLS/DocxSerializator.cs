using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using DocGen.CompoundFile.DocIO;
using DocGen.Compression;
using DocGen.Compression.Zip;
using DocGen.DocIO.DLS.Convertors;
using DocGen.DocIO.DLS.Entities;
using DocGen.DocIO.ReaderWriter.Biff_Records;
using DocGen.DocIO.ReaderWriter.DataStreamParser.Escher;
using DocGen.DocIO.ReaderWriter.DataStreamParser.OLEObject;
using DocGen.DocIO.ReaderWriter.Security;
using DocGen.Drawing;
using DocGen.Office;
using DocGen.OfficeChart;
using DocGen.OfficeChart.Implementation;
using DocGen.OfficeChart.Implementation.Charts;
using DocGen.OfficeChart.Implementation.XmlReaders;
using DocGen.OfficeChart.Implementation.XmlSerialization;
using DocGen.OfficeChart.Implementation.XmlSerialization.Charts;

namespace DocGen.DocIO.DLS;

internal class DocxSerializator : DocumentSerializer
{
	internal readonly string SlashSymbol = '\\'.ToString();

	internal readonly string InvertedCommas = '"'.ToString();

	internal readonly string NullSymbol = '\0'.ToString();

	internal const char CarriageReturn = '\r';

	internal const char NewLine = '\n';

	private ZipArchive m_archive;

	private WordDocument m_document;

	private XmlWriter m_writer;

	private int m_relationShipID;

	private byte m_bFlags;

	private int m_chartElementsRelationId;

	private int m_chartColorStyleID;

	private int m_chartStyleID;

	private int m_chartDrawingID;

	private int m_id = 2;

	private int m_bookmarkId = 1;

	private int m_docPrId;

	private int m_shapeID = 1024;

	private int m_lstOverId;

	private bool m_hasImages;

	private bool m_hasNumbering;

	private bool m_isFallBack;

	private bool m_hasFontTable;

	private Dictionary<int, Dictionary<int, string>> m_lstStyleReferences;

	private Dictionary<string, ImageRecord> m_pictureBullets;

	private bool m_hasFootnote;

	private bool m_hasEndnote;

	private bool m_hasMetafiles;

	private bool m_hasOleObject;

	private bool m_hasComment;

	private Dictionary<string, ImageRecord> m_documentImages;

	private Dictionary<string, ImageRecord> m_footnoteImages;

	private Dictionary<string, ImageRecord> m_endnoteImages;

	private Dictionary<string, ImageRecord> m_commentImages;

	private Dictionary<string, Dictionary<string, ImageRecord>> m_headerFooterImages;

	private Dictionary<string, Dictionary<string, Stream>> m_headerFooterSvgImages;

	private int m_hfSvgImageIndex = -1;

	private Dictionary<string, string> m_externalLinkImages;

	private Dictionary<string, int> m_bookmarks = new Dictionary<string, int>();

	private Dictionary<string, int> m_FallBackbookmarks = new Dictionary<string, int>();

	private List<string> m_editableRanges = new List<string>();

	private Dictionary<HeaderFooterType, Dictionary<string, HeaderFooter>> m_headerFooterColl;

	private List<string> m_symbolFontNames;

	private List<Entity> m_bookMarkCollection;

	private List<Entity> m_editableRangeCollection;

	private Dictionary<string, string> m_oleIds;

	internal Dictionary<string, Stream> m_oleContainers;

	private Dictionary<string, Stream> m_svgDataCollections;

	private Dictionary<string, string> m_svgDataHash;

	internal Dictionary<string, Dictionary<string, Stream>> m_hfOleContainers;

	private List<string> m_oleTypes;

	private Dictionary<string, DictionaryEntry> m_xmlItemsRef;

	private Dictionary<string, string> m_commentsId;

	private Dictionary<string, WComment> m_commentsCollection;

	private Dictionary<int, WFootnote> m_footnoteColl;

	private Dictionary<int, WFootnote> m_endnoteColl;

	private bool IsParagraphContainsCnfStyle;

	private int m_footnoteId = 1;

	private int m_endnoteId = 1;

	private bool HasHyperlink;

	private Dictionary<string, string> m_hyperlinkTargets;

	private Dictionary<string, string> m_altChunkTargets;

	private Dictionary<string, string> m_altChunkContentTypes;

	private Dictionary<string, string> m_footnoteHyperlinks;

	private Dictionary<string, string> m_footnoteAlternateChunks;

	private Dictionary<string, string> m_endnoteHyperlinks;

	private Dictionary<string, string> m_endnoteAlternateChunks;

	private Dictionary<string, Dictionary<string, string>> m_headerFooterHyperlinks;

	private Dictionary<string, Dictionary<string, string>> m_headerFooterAlternateChunks;

	private Dictionary<string, string> m_commentHyperlinks;

	private Dictionary<string, string> m_commentAlternateChunks;

	private Dictionary<string, string> m_hfIncludePicFieldUrl;

	private Dictionary<string, string> m_inclPicFieldUrl;

	private Dictionary<string, WChart> m_hfChartCollection;

	private Dictionary<string, WChart> m_footnoteChartCollection;

	private Dictionary<string, WChart> m_endnoteChartCollection;

	private Dictionary<string, WChart> m_commentsChartCollection;

	private Dictionary<string, WChart> m_documentChartCollection;

	private bool m_hasChart;

	private Dictionary<string, WChart> m_chartRelationId;

	private Dictionary<string, DictionaryEntry> m_relations;

	private Dictionary<ChartStyleElements, ShapeStyle> m_defaultChartStyleElements;

	private double[][] m_defaultColorVariations;

	private Dictionary<string, Dictionary<string, string>> m_headerFooterInclPicUrls;

	private bool m_hasDiagrams;

	private Dictionary<string, Dictionary<string, DictionaryEntry>> m_hfRelations;

	private List<string> m_chartsPathNames;

	private List<string> m_cntlPathNames;

	private int m_trackChangeId;

	private string m_watermarkId = string.Empty;

	private string[] m_splittedTextNode;

	private WTextRange m_splittedItem;

	private bool m_isAlternativeTableFormat;

	private bool m_isAlternativeRowFormat;

	private bool m_isAlternativeCellFormat;

	private bool m_isAlternativeCharFormat;

	private bool m_isAlternativeParaFormat;

	private bool m_isAlternativeSection;

	private HeaderFooterType m_HeaderFooterType;

	private bool m_IsAutoshapeTextboxInHeader;

	private Stack<WFieldMark> m_fieldMarkStack;

	private Stack<WField> m_fieldStack;

	private Dictionary<string, DictionaryEntry> m_settingsRelations;

	private bool m_hasEmbedFonts;

	private AutoShapeHelper m_autoShapeHelper;

	private bool m_isSkipBinExtension;

	private List<string> m_imagesPath;

	private List<Entity> altChunkAfterBookmarks = new List<Entity>();

	private Dictionary<int, Dictionary<ParagraphItem, RevisionType>> m_movingRevisionDetails;

	private List<Revision> m_movingRevisionCollection;

	private List<Entity> m_commentMarkCollection;

	private bool IsMacroEnabled
	{
		get
		{
			if (!m_document.SaveFormatType.ToString().EndsWith("Docm"))
			{
				return m_document.SaveFormatType.ToString().EndsWith("Dotm");
			}
			return true;
		}
	}

	private bool IsSkipFieldItem
	{
		get
		{
			return (m_bFlags & 1) != 0;
		}
		set
		{
			m_bFlags = (byte)((m_bFlags & 0xFEu) | (value ? 1u : 0u));
		}
	}

	private bool IsWord2003ML
	{
		get
		{
			return (m_bFlags & 0x10) >> 4 != 0;
		}
		set
		{
			m_bFlags = (byte)((m_bFlags & 0xEFu) | ((value ? 1u : 0u) << 4));
		}
	}

	private bool IsSerializingChoiceContent
	{
		get
		{
			return (m_bFlags & 2) >> 1 != 0;
		}
		set
		{
			m_bFlags = (byte)((m_bFlags & 0xFDu) | ((value ? 1u : 0u) << 1));
		}
	}

	private bool IsWord2007 => m_document.SaveFormatType.ToString().Contains("2007");

	private bool IsWord2010 => m_document.SaveFormatType.ToString().Contains("2010");

	private bool IsWord2013 => m_document.SaveFormatType.ToString().Contains("2013");

	private bool IsWordLatest
	{
		get
		{
			if (m_document.SaveFormatType != FormatType.Docm && m_document.SaveFormatType != FormatType.Dotm && m_document.SaveFormatType != FormatType.Dotx)
			{
				return m_document.SaveFormatType == FormatType.Docx;
			}
			return true;
		}
	}

	private bool IsStrict => m_document.SaveFormatType == FormatType.StrictDocx;

	private Dictionary<string, DictionaryEntry> SettingsRelations
	{
		get
		{
			if (m_settingsRelations == null)
			{
				m_settingsRelations = new Dictionary<string, DictionaryEntry>();
			}
			return m_settingsRelations;
		}
	}

	private List<Entity> BookMarkCollection
	{
		get
		{
			if (m_bookMarkCollection == null)
			{
				m_bookMarkCollection = new List<Entity>();
			}
			return m_bookMarkCollection;
		}
	}

	private List<Entity> EditableRangeCollection
	{
		get
		{
			if (m_editableRangeCollection == null)
			{
				m_editableRangeCollection = new List<Entity>();
			}
			return m_editableRangeCollection;
		}
	}

	internal Dictionary<HeaderFooterType, Dictionary<string, HeaderFooter>> HeadersFooters
	{
		get
		{
			if (m_headerFooterColl == null)
			{
				m_headerFooterColl = new Dictionary<HeaderFooterType, Dictionary<string, HeaderFooter>>();
			}
			return m_headerFooterColl;
		}
	}

	internal List<string> ControlsPathNames
	{
		get
		{
			if (m_cntlPathNames == null)
			{
				m_cntlPathNames = new List<string>();
			}
			return m_cntlPathNames;
		}
	}

	internal List<string> ChartsPathNames
	{
		get
		{
			if (m_chartsPathNames == null)
			{
				m_chartsPathNames = new List<string>();
			}
			return m_chartsPathNames;
		}
	}

	internal Dictionary<string, Dictionary<string, DictionaryEntry>> HFRelations
	{
		get
		{
			if (m_hfRelations == null)
			{
				m_hfRelations = new Dictionary<string, Dictionary<string, DictionaryEntry>>();
			}
			return m_hfRelations;
		}
	}

	internal Dictionary<string, Dictionary<string, string>> HeaderFooterInclPicUrls
	{
		get
		{
			if (m_headerFooterInclPicUrls == null)
			{
				m_headerFooterInclPicUrls = new Dictionary<string, Dictionary<string, string>>();
			}
			return m_headerFooterInclPicUrls;
		}
	}

	internal Dictionary<string, string> InclPicFieldUrl
	{
		get
		{
			if (m_inclPicFieldUrl == null)
			{
				m_inclPicFieldUrl = new Dictionary<string, string>();
			}
			return m_inclPicFieldUrl;
		}
	}

	internal Dictionary<string, string> HeaderFooterInclPicFieldUrl
	{
		get
		{
			if (m_hfIncludePicFieldUrl == null)
			{
				m_hfIncludePicFieldUrl = new Dictionary<string, string>();
			}
			return m_hfIncludePicFieldUrl;
		}
	}

	internal Dictionary<string, string> ExternalLinkImages
	{
		get
		{
			if (m_externalLinkImages == null)
			{
				m_externalLinkImages = new Dictionary<string, string>();
			}
			return m_externalLinkImages;
		}
	}

	internal Dictionary<string, WChart> ChartRelationId
	{
		get
		{
			if (m_chartRelationId == null)
			{
				m_chartRelationId = new Dictionary<string, WChart>();
			}
			return m_chartRelationId;
		}
	}

	internal Dictionary<string, WChart> HFChartCollection
	{
		get
		{
			if (m_hfChartCollection == null)
			{
				m_hfChartCollection = new Dictionary<string, WChart>();
			}
			return m_hfChartCollection;
		}
	}

	internal Dictionary<string, WChart> FootnoteChartCollection
	{
		get
		{
			if (m_footnoteChartCollection == null)
			{
				m_footnoteChartCollection = new Dictionary<string, WChart>();
			}
			return m_footnoteChartCollection;
		}
	}

	internal Dictionary<string, WChart> EndnoteChartCollection
	{
		get
		{
			if (m_endnoteChartCollection == null)
			{
				m_endnoteChartCollection = new Dictionary<string, WChart>();
			}
			return m_endnoteChartCollection;
		}
	}

	internal Dictionary<string, WChart> CommentsChartCollection
	{
		get
		{
			if (m_commentsChartCollection == null)
			{
				m_commentsChartCollection = new Dictionary<string, WChart>();
			}
			return m_commentsChartCollection;
		}
	}

	internal Dictionary<string, WChart> DocumentChartCollection
	{
		get
		{
			if (m_documentChartCollection == null)
			{
				m_documentChartCollection = new Dictionary<string, WChart>();
			}
			return m_documentChartCollection;
		}
	}

	private Dictionary<string, DictionaryEntry> ChartRelations
	{
		get
		{
			if (m_relations == null)
			{
				m_relations = new Dictionary<string, DictionaryEntry>();
			}
			return m_relations;
		}
	}

	internal List<string> ImagesPath
	{
		get
		{
			if (m_imagesPath == null)
			{
				m_imagesPath = new List<string>();
			}
			return m_imagesPath;
		}
	}

	internal Dictionary<string, string> CommentHyperlinks
	{
		get
		{
			if (m_commentHyperlinks == null)
			{
				m_commentHyperlinks = new Dictionary<string, string>();
			}
			return m_commentHyperlinks;
		}
	}

	private Dictionary<string, string> CommentAlternateChunks
	{
		get
		{
			if (m_commentAlternateChunks == null)
			{
				m_commentAlternateChunks = new Dictionary<string, string>();
			}
			return m_commentAlternateChunks;
		}
	}

	internal Dictionary<string, string> HyperlinkTargets
	{
		get
		{
			if (m_hyperlinkTargets == null)
			{
				m_hyperlinkTargets = new Dictionary<string, string>();
			}
			return m_hyperlinkTargets;
		}
	}

	internal Dictionary<string, string> AltChunkTargets
	{
		get
		{
			if (m_altChunkTargets == null)
			{
				m_altChunkTargets = new Dictionary<string, string>();
			}
			return m_altChunkTargets;
		}
	}

	internal Dictionary<string, string> AltChunkContentTypes
	{
		get
		{
			if (m_altChunkContentTypes == null)
			{
				m_altChunkContentTypes = new Dictionary<string, string>();
			}
			return m_altChunkContentTypes;
		}
	}

	internal Dictionary<string, string> FootnoteHyperlinks
	{
		get
		{
			if (m_footnoteHyperlinks == null)
			{
				m_footnoteHyperlinks = new Dictionary<string, string>();
			}
			return m_footnoteHyperlinks;
		}
	}

	private Dictionary<string, string> FootnoteAlternateChunks
	{
		get
		{
			if (m_footnoteAlternateChunks == null)
			{
				m_footnoteAlternateChunks = new Dictionary<string, string>();
			}
			return m_footnoteAlternateChunks;
		}
	}

	internal Dictionary<string, string> EndnoteHyperlinks
	{
		get
		{
			if (m_endnoteHyperlinks == null)
			{
				m_endnoteHyperlinks = new Dictionary<string, string>();
			}
			return m_endnoteHyperlinks;
		}
	}

	private Dictionary<string, string> EndnoteAlternateChunks
	{
		get
		{
			if (m_endnoteAlternateChunks == null)
			{
				m_endnoteAlternateChunks = new Dictionary<string, string>();
			}
			return m_endnoteAlternateChunks;
		}
	}

	internal Dictionary<string, Dictionary<string, string>> HeaderFooterHyperlinks
	{
		get
		{
			if (m_headerFooterHyperlinks == null)
			{
				m_headerFooterHyperlinks = new Dictionary<string, Dictionary<string, string>>();
			}
			return m_headerFooterHyperlinks;
		}
	}

	private Dictionary<string, Dictionary<string, string>> HeaderFooterAlternateChunks
	{
		get
		{
			if (m_headerFooterAlternateChunks == null)
			{
				m_headerFooterAlternateChunks = new Dictionary<string, Dictionary<string, string>>();
			}
			return m_headerFooterAlternateChunks;
		}
	}

	internal Dictionary<string, WComment> CommentCollection
	{
		get
		{
			if (m_commentsCollection == null)
			{
				m_commentsCollection = new Dictionary<string, WComment>();
			}
			return m_commentsCollection;
		}
	}

	private Dictionary<string, string> CommentsId
	{
		get
		{
			if (m_commentsId == null)
			{
				m_commentsId = new Dictionary<string, string>();
			}
			return m_commentsId;
		}
	}

	internal Dictionary<string, Stream> OleContainers
	{
		get
		{
			if (m_oleContainers == null)
			{
				m_oleContainers = new Dictionary<string, Stream>();
			}
			return m_oleContainers;
		}
	}

	internal Dictionary<string, Stream> SvgDataCollection
	{
		get
		{
			if (m_svgDataCollections == null)
			{
				m_svgDataCollections = new Dictionary<string, Stream>();
			}
			return m_svgDataCollections;
		}
	}

	private Dictionary<string, string> SvgDataHash
	{
		get
		{
			if (m_svgDataHash == null)
			{
				m_svgDataHash = new Dictionary<string, string>();
			}
			return m_svgDataHash;
		}
	}

	internal Dictionary<string, Dictionary<string, Stream>> HFOleContainers
	{
		get
		{
			if (m_hfOleContainers == null)
			{
				m_hfOleContainers = new Dictionary<string, Dictionary<string, Stream>>();
			}
			return m_hfOleContainers;
		}
	}

	private Dictionary<string, string> OleIds
	{
		get
		{
			if (m_oleIds == null)
			{
				m_oleIds = new Dictionary<string, string>();
			}
			return m_oleIds;
		}
	}

	internal List<string> OleContentTypes
	{
		get
		{
			if (m_oleTypes == null)
			{
				m_oleTypes = new List<string>();
			}
			return m_oleTypes;
		}
	}

	internal Dictionary<string, DictionaryEntry> XmlItemsRelations
	{
		get
		{
			if (m_xmlItemsRef == null)
			{
				m_xmlItemsRef = new Dictionary<string, DictionaryEntry>();
			}
			return m_xmlItemsRef;
		}
	}

	private Dictionary<int, Dictionary<int, string>> ListStyleReferences
	{
		get
		{
			if (m_lstStyleReferences == null)
			{
				m_lstStyleReferences = new Dictionary<int, Dictionary<int, string>>();
			}
			return m_lstStyleReferences;
		}
	}

	private Dictionary<string, ImageRecord> PictureBullets
	{
		get
		{
			if (m_pictureBullets == null)
			{
				m_pictureBullets = new Dictionary<string, ImageRecord>();
			}
			return m_pictureBullets;
		}
	}

	public bool HasFontTable
	{
		get
		{
			return m_hasFontTable;
		}
		set
		{
			m_hasFontTable = value;
		}
	}

	public bool HasFootnote
	{
		get
		{
			return m_hasFootnote;
		}
		set
		{
			m_hasFootnote = value;
		}
	}

	public bool HasEndnote
	{
		get
		{
			return m_hasEndnote;
		}
		set
		{
			m_hasEndnote = value;
		}
	}

	public bool HasNumbering
	{
		get
		{
			return m_hasNumbering;
		}
		set
		{
			m_hasNumbering = value;
		}
	}

	private Dictionary<string, ImageRecord> DocumentImages
	{
		get
		{
			if (m_documentImages == null)
			{
				m_documentImages = new Dictionary<string, ImageRecord>();
			}
			return m_documentImages;
		}
	}

	private Dictionary<string, ImageRecord> FootnoteImages
	{
		get
		{
			if (m_footnoteImages == null)
			{
				m_footnoteImages = new Dictionary<string, ImageRecord>();
			}
			return m_footnoteImages;
		}
	}

	private Dictionary<string, ImageRecord> EndnoteImages
	{
		get
		{
			if (m_endnoteImages == null)
			{
				m_endnoteImages = new Dictionary<string, ImageRecord>();
			}
			return m_endnoteImages;
		}
	}

	private Dictionary<string, ImageRecord> CommentImages
	{
		get
		{
			if (m_commentImages == null)
			{
				m_commentImages = new Dictionary<string, ImageRecord>();
			}
			return m_commentImages;
		}
	}

	private Dictionary<int, WFootnote> FootnoteCollection
	{
		get
		{
			if (m_footnoteColl == null)
			{
				m_footnoteColl = new Dictionary<int, WFootnote>();
			}
			return m_footnoteColl;
		}
	}

	private Dictionary<int, WFootnote> EndnoteCollection
	{
		get
		{
			if (m_endnoteColl == null)
			{
				m_endnoteColl = new Dictionary<int, WFootnote>();
			}
			return m_endnoteColl;
		}
	}

	internal Dictionary<string, Dictionary<string, ImageRecord>> HeaderFooterImages
	{
		get
		{
			if (m_headerFooterImages == null)
			{
				m_headerFooterImages = new Dictionary<string, Dictionary<string, ImageRecord>>();
			}
			return m_headerFooterImages;
		}
	}

	internal Dictionary<string, Dictionary<string, Stream>> HeaderFooterSvgImages
	{
		get
		{
			if (m_headerFooterSvgImages == null)
			{
				m_headerFooterSvgImages = new Dictionary<string, Dictionary<string, Stream>>();
			}
			return m_headerFooterSvgImages;
		}
	}

	private Stack<WField> FieldStack
	{
		get
		{
			if (m_fieldStack == null)
			{
				m_fieldStack = new Stack<WField>();
			}
			return m_fieldStack;
		}
	}

	private Stack<WFieldMark> FieldMarkStack
	{
		get
		{
			if (m_fieldMarkStack == null)
			{
				m_fieldMarkStack = new Stack<WFieldMark>();
			}
			return m_fieldMarkStack;
		}
	}

	private WField CurrentField
	{
		get
		{
			if (m_fieldStack == null || m_fieldStack.Count <= 0)
			{
				return null;
			}
			return m_fieldStack.Peek();
		}
	}

	private AutoShapeHelper AutoShapeHelper
	{
		get
		{
			if (m_autoShapeHelper == null)
			{
				m_autoShapeHelper = new AutoShapeHelper();
			}
			return m_autoShapeHelper;
		}
	}

	private Dictionary<int, Dictionary<ParagraphItem, RevisionType>> MovingRevisionDetails
	{
		get
		{
			return m_movingRevisionDetails;
		}
		set
		{
			m_movingRevisionDetails = value;
		}
	}

	private List<Revision> MovingRevisionCollection
	{
		get
		{
			if (m_movingRevisionCollection == null)
			{
				m_movingRevisionCollection = new List<Revision>();
			}
			return m_movingRevisionCollection;
		}
	}

	private List<Entity> CommentMarkCollection
	{
		get
		{
			if (m_commentMarkCollection == null)
			{
				m_commentMarkCollection = new List<Entity>();
			}
			return m_commentMarkCollection;
		}
	}

	public DocxSerializator()
	{
		m_archive = new ZipArchive();
		m_archive.DefaultCompressionLevel = CompressionLevel.Normal;
	}

	internal void SerializeWordML(Stream stream, WordDocument document)
	{
		m_document = document;
		m_writer = CreateWriter(stream);
		SerializeWordML(document);
		m_writer.Flush();
	}

	internal void SerializeWordML(WordDocument document)
	{
		IsWord2003ML = true;
		m_document = document;
		if (document.HasMacros && !IsMacroEnabled && m_document.ActualFormatType != 0 && m_document.ActualFormatType != FormatType.Dot)
		{
			throw new Exception("This document contains macros (VBA project) and it cannot be saved as Macro-Free format. Please save the document as Macro-Enabled format (.Docm or .Dotm) or remove macros before saving the document using WordDocument.RemoveMacros method.");
		}
		if (document.Footnotes.ContinuationNotice.Count > 0)
		{
			m_footnoteId++;
		}
		if (document.Endnotes.ContinuationNotice.Count > 0)
		{
			m_endnoteId++;
		}
		SerializeWordMLDocument();
		IsWord2003ML = false;
	}

	internal void SerializeWordMLDocument()
	{
		m_writer.WriteRaw("<?mso-application progid=\"Word.Document\"?>\r\n");
		m_writer.WriteStartElement("pkg", "package", "http://schemas.microsoft.com/office/2006/xmlPackage");
		SerializeWordMLGeneralRelation();
		m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
		m_writer.WriteAttributeString("pkg", "name", null, "/word/document.xml");
		m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml");
		m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		m_writer.WriteStartElement("w", "document", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "wpc", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas");
		m_writer.WriteAttributeString("xmlns", "mc", null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
		m_writer.WriteAttributeString("xmlns", "o", null, "urn:schemas-microsoft-com:office:office");
		m_writer.WriteAttributeString("xmlns", "r", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
		m_writer.WriteAttributeString("xmlns", "m", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
		m_writer.WriteAttributeString("xmlns", "v", null, "urn:schemas-microsoft-com:vml");
		m_writer.WriteAttributeString("xmlns", "wp14", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
		m_writer.WriteAttributeString("xmlns", "wp", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		m_writer.WriteAttributeString("xmlns", "w", null, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "w10", null, "urn:schemas-microsoft-com:office:word");
		m_writer.WriteAttributeString("xmlns", "w14", null, "http://schemas.microsoft.com/office/word/2010/wordml");
		m_writer.WriteAttributeString("xmlns", "w15", null, "http://schemas.microsoft.com/office/word/2012/wordml");
		m_writer.WriteAttributeString("xmlns", "wpg", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
		m_writer.WriteAttributeString("xmlns", "wpi", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingInk");
		m_writer.WriteAttributeString("xmlns", "wne", null, "http://schemas.microsoft.com/office/word/2006/wordml");
		m_writer.WriteAttributeString("xmlns", "wps", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		m_writer.WriteAttributeString("mc", "Ignorable", null, "w14 w15 wp14");
		SerializeBackground(m_document.Background);
		SerializeDocumentBody();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		if (DocumentChartCollection.Count > 0)
		{
			SerializeWordMLChart(DocumentChartCollection);
		}
		DocumentChartCollection.Clear();
		SerializeWordMLThemes();
		SerializeWordMLSettings();
		SerializeWordMLFontTable();
		SerializeWordMLAppProperties();
		SerializeWordMLCoreProperties();
		SerializeWordMLStyles();
		SerializeWordMLNumberings();
		SerializeHeaderFooters();
		if (HasEndnote)
		{
			SerializeFootEndnotes(IsEndnotes: true);
			if (EndnoteImages.Count > 0 || EndnoteHyperlinks.Count > 0 || EndnoteAlternateChunks.Count > 0 || EndnoteChartCollection.Count > 0)
			{
				SerializeEndnoteRelations();
				SerializeWordMLChart(EndnoteChartCollection);
				EndnoteChartCollection.Clear();
			}
		}
		if (HasFootnote)
		{
			SerializeFootEndnotes(IsEndnotes: false);
			if (FootnoteImages.Count > 0 || FootnoteHyperlinks.Count > 0 || FootnoteAlternateChunks.Count > 0 || FootnoteChartCollection.Count > 0)
			{
				SerializeFootnoteRelations();
				SerializeWordMLChart(FootnoteChartCollection);
				FootnoteChartCollection.Clear();
			}
		}
		if (m_hasComment)
		{
			SerializeComments();
			if (CommentImages.Count > 0 || CommentHyperlinks.Count > 0 || CommentAlternateChunks.Count > 0 || CommentsChartCollection.Count > 0)
			{
				SerializeCommentRelations();
				SerializeWordMLChart(CommentsChartCollection);
				CommentsChartCollection.Clear();
			}
		}
		if (m_document.CustomDocumentProperties != null && m_document.CustomDocumentProperties.Count > 0)
		{
			SerializeWordMLCustomProperties();
		}
		if (m_hasDiagrams)
		{
			SerializeWordMLDiagrams(m_document.DocxPackage);
		}
		SerializeWordMLDocumentRelation();
		if (ControlsPathNames.Count > 0)
		{
			SerializeWordMLActiveXControl(m_document.DocxPackage);
		}
		if (m_document.CustomUIPartContainer != null)
		{
			AddPartContainerToArchive(m_document.CustomUIPartContainer);
		}
		if (m_document.UserCustomizationPartContainer != null)
		{
			AddPartContainerToArchive(m_document.UserCustomizationPartContainer);
		}
		if (m_document.CustomXMLContainer != null)
		{
			SerializeWordMLCustomXMLContainer(m_document.CustomXMLContainer);
		}
		if (SettingsRelations.Count > 0)
		{
			SerializeWordMLSettingsRelation();
		}
		if (PictureBullets.Count > 0)
		{
			SerializeWordMLNumberingsRelation();
			SerializeWordMLImages(PictureBullets);
		}
		SerializeWordMLImages(DocumentImages);
		if (HeaderFooterImages.Count > 0)
		{
			foreach (KeyValuePair<string, Dictionary<string, ImageRecord>> headerFooterImage in HeaderFooterImages)
			{
				SerializeWordMLImages(headerFooterImage.Value);
			}
		}
		if (FootnoteImages.Count > 0)
		{
			SerializeWordMLImages(FootnoteImages);
		}
		if (EndnoteImages.Count > 0)
		{
			SerializeWordMLImages(EndnoteImages);
		}
		if (OleContainers.Count > 0)
		{
			SerializeWordMLOleContainer(OleContainers);
		}
		if (HFOleContainers.Count > 0)
		{
			foreach (KeyValuePair<string, Dictionary<string, Stream>> hFOleContainer in HFOleContainers)
			{
				SerializeWordMLOleContainer(hFOleContainer.Value);
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializeWordMLDiagrams(Package wordPackage)
	{
		foreach (KeyValuePair<string, Part> xmlPart in wordPackage.FindPartContainer("word/diagrams/").XmlParts)
		{
			string key = xmlPart.Key;
			m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
			m_writer.WriteAttributeString("pkg", "name", null, "/word/diagrams/" + key);
			if (key.Contains("drawing"))
			{
				m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.ms-office.drawingml.diagramDrawing+xml");
			}
			else if (key.Contains("data"))
			{
				m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml");
			}
			else if (key.Contains("colors"))
			{
				m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml");
			}
			else if (key.Contains("quickStyle"))
			{
				m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml");
			}
			else if (key.Contains("layout"))
			{
				m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml");
			}
			m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
			Stream dataStream = xmlPart.Value.DataStream;
			if (dataStream != null && dataStream.Length > 0)
			{
				dataStream.Position = 0L;
				XmlReader xmlReader = XmlReader.Create(dataStream);
				xmlReader.Read();
				while (xmlReader.NodeType == XmlNodeType.XmlDeclaration || xmlReader.Name == "mso-contentType")
				{
					if (xmlReader.Name == "mso-contentType")
					{
						m_writer.WriteRaw("<?" + xmlReader.Name + " ?>");
					}
					xmlReader.Read();
				}
				SkipWhitespaces(xmlReader);
				m_writer.WriteNode(xmlReader, defattr: false);
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
	}

	private void SerializeWordMLActiveXControl(Package wordPackage)
	{
		PartContainer partContainer = wordPackage.FindPartContainer("word/activeX/");
		foreach (KeyValuePair<string, Relations> relation in partContainer.Relations)
		{
			int num = 1;
			string targetPath = relation.Key.Replace("word/activeX/_rels/", "").Replace(".xml.rels", "") + ".bin";
			m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
			m_writer.WriteAttributeString("pkg", "name", null, "/" + relation.Key);
			m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-package.relationships+xml");
			m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
			m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
			SerializeRelationShip(relation.Value.DataStream, "rId" + num, "http://schemas.microsoft.com/office/2006/relationships/activeXControlBinary", targetPath);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		foreach (KeyValuePair<string, Part> xmlPart in partContainer.XmlParts)
		{
			m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
			m_writer.WriteAttributeString("pkg", "name", null, "/word/activeX/" + xmlPart.Key);
			if (xmlPart.Key.Contains("xml"))
			{
				m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.ms-office.activeX+xml");
				m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
				Stream dataStream = xmlPart.Value.DataStream;
				m_writer.WriteAttributeString("pkg", "originalXmlEncoding", null, "no");
				if (dataStream != null && dataStream.Length > 0)
				{
					dataStream.Position = 0L;
					XmlReader xmlReader = XmlReader.Create(dataStream);
					xmlReader.Read();
					while (xmlReader.NodeType == XmlNodeType.XmlDeclaration || xmlReader.Name == "mso-contentType")
					{
						if (xmlReader.Name == "mso-contentType")
						{
							m_writer.WriteRaw("<?" + xmlReader.Name + " ?>");
						}
						xmlReader.Read();
					}
					SkipWhitespaces(xmlReader);
					m_writer.WriteNode(xmlReader, defattr: false);
				}
				m_writer.WriteEndElement();
			}
			else
			{
				m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.ms-office.activeX");
				MemoryStream obj = (MemoryStream)xmlPart.Value.DataStream;
				m_writer.WriteStartElement("pkg", "binaryData", "http://schemas.microsoft.com/office/2006/xmlPackage");
				string data = Convert.ToBase64String(obj.ToArray());
				m_writer.WriteRaw(data);
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeWordMLCustomXMLContainer(PartContainer customXMLContainer)
	{
		foreach (KeyValuePair<string, Relations> relation in customXMLContainer.Relations)
		{
			int num = 1;
			string key = relation.Key;
			key = key.Replace("customXml/_rels/", "").Replace(".rels", "").Insert(4, "Props");
			m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
			m_writer.WriteAttributeString("pkg", "name", null, "/" + relation.Key);
			m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-package.relationships+xml");
			m_writer.WriteAttributeString("pkg", "padding", null, "256");
			m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
			m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
			SerializeRelationShip(relation.Value.DataStream, "rId" + num, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps", key);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		foreach (KeyValuePair<string, Part> xmlPart in customXMLContainer.XmlParts)
		{
			m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
			m_writer.WriteAttributeString("pkg", "name", null, "/customXml/" + xmlPart.Key);
			m_writer.WriteAttributeString("pkg", "contentType", null, xmlPart.Key.Contains("itemProps") ? "application/vnd.openxmlformats-officedocument.customXmlProperties+xml" : "application/xml");
			m_writer.WriteAttributeString("pkg", "padding", null, "32");
			m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
			Stream dataStream = xmlPart.Value.DataStream;
			m_writer.WriteAttributeString("pkg", "originalXmlEncoding", null, "no");
			if (dataStream != null && dataStream.Length > 0)
			{
				dataStream.Position = 0L;
				XmlReader xmlReader = XmlReader.Create(dataStream);
				xmlReader.Read();
				while (xmlReader.NodeType == XmlNodeType.XmlDeclaration || xmlReader.Name == "mso-contentType")
				{
					if (xmlReader.Name == "mso-contentType")
					{
						m_writer.WriteRaw("<?" + xmlReader.Name + " ?>");
					}
					xmlReader.Read();
				}
				SkipWhitespaces(xmlReader);
				m_writer.WriteNode(xmlReader, defattr: false);
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
	}

	private void SerializeWordMLChart(Dictionary<string, WChart> Charts)
	{
		foreach (KeyValuePair<string, WChart> Chart in Charts)
		{
			SerializeWordMLChartElements(Chart.Value, Chart.Key);
		}
	}

	private void SerializeWordMLChartElements(WChart chart, string id)
	{
		ChartSerializator chartSerializator = new ChartSerializator();
		MemoryStream output = new MemoryStream();
		string relationId = string.Empty;
		string empty = string.Empty;
		string text = "/word/charts/chart" + id.Replace("rId", "") + ".xml";
		ChartImpl chartImpl = chart.OfficeChart as ChartImpl;
		DictionaryEntry value = default(DictionaryEntry);
		Relation relation = null;
		foreach (string key in chart.DocxProps.Keys)
		{
			if (key.Contains("/chartUserShapes"))
			{
				(chart.OfficeChart as ChartImpl).RelationPreservedStreamCollection.Add("http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartUserShapes", null);
				break;
			}
		}
		using (XmlWriter.Create(output))
		{
			m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
			m_writer.WriteAttributeString("pkg", "name", null, text);
			m_writer.WriteAttributeString("pkg", "contentType", null, text.Contains("drawings") ? "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml" : "application/vnd.openxmlformats-officedocument.drawingml.chart+xml");
			m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
			chartSerializator.SerializeChart(m_writer, chart.OfficeChart as ChartImpl, string.Empty, GetAppVersion());
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		foreach (string key2 in chart.DocxProps.Keys)
		{
			if (key2.Contains("chartUserContentType") && key2.Contains("/chartStyle"))
			{
				m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
				int num = ++m_chartStyleID;
				string text2 = "style" + num;
				string value2 = "/word/charts/" + text2 + ".xml";
				m_writer.WriteAttributeString("pkg", "name", null, value2);
				m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.ms-office.chartstyle+xml");
				m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
				Stream stream = chart.DocxProps[key2];
				if (stream != null && stream.Length > 0)
				{
					XmlReader reader = CreateReader(stream);
					m_writer.WriteNode(reader, defattr: false);
				}
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
				value.Key = "http://schemas.microsoft.com/office/2011/relationships/chartStyle";
				value.Value = text2 + ".xml";
				if (chartImpl.Relations.Count > 0)
				{
					relationId = chartImpl.Relations.GenerateRelationId();
					chartImpl.Relations[relationId] = new Relation("", "http://schemas.microsoft.com/office/2011/relationships/chartStyle");
				}
				else
				{
					relationId = NextChartElementsRelationId();
				}
				ChartRelations.Add(relationId, value);
			}
			if (key2.Contains("/chartColorStyle"))
			{
				m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
				int num = ++m_chartColorStyleID;
				string text3 = "colors" + num;
				string value3 = "/word/charts/" + text3 + ".xml";
				m_writer.WriteAttributeString("pkg", "name", null, value3);
				m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.ms-office.chartcolorstyle+xml");
				m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
				Stream stream2 = chart.DocxProps[key2];
				if (stream2 != null && stream2.Length > 0)
				{
					XmlReader reader2 = CreateReader(stream2);
					m_writer.WriteNode(reader2, defattr: false);
				}
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
				value.Key = "http://schemas.microsoft.com/office/2011/relationships/chartColorStyle";
				value.Value = text3 + ".xml";
				if (chartImpl.Relations.Count > 0)
				{
					relationId = chartImpl.Relations.GenerateRelationId();
					chartImpl.Relations[relationId] = new Relation("", "http://schemas.microsoft.com/office/2011/relationships/chartColorStyle");
				}
				else
				{
					relationId = NextChartElementsRelationId();
				}
				ChartRelations.Add(relationId, value);
			}
			if (key2.Contains("/chartUserShapes"))
			{
				key2.LastIndexOf('/');
				m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
				int num = ++m_chartDrawingID;
				string text4 = "drawing" + num;
				string value4 = "/word/drawings/" + text4 + ".xml";
				m_writer.WriteAttributeString("pkg", "name", null, value4);
				m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml");
				m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
				Stream stream3 = chart.DocxProps[key2];
				if (stream3 != null && stream3.Length > 0)
				{
					XmlReader reader3 = CreateReader(stream3);
					m_writer.WriteNode(reader3, defattr: false);
				}
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
				value.Key = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartUserShapes";
				value.Value = "../drawings/" + text4 + ".xml";
				if (chartImpl.Relations.Count > 0)
				{
					relation = chartImpl.Relations.FindRelationByContentType("http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartUserShapes", out relationId);
				}
				if (relation == null)
				{
					relationId = NextChartElementsRelationId();
				}
				ChartRelations.Add(relationId, value);
			}
		}
		foreach (string key3 in chartImpl.RelationPreservedStreamCollection.Keys)
		{
			if (key3.Contains("rId"))
			{
				byte[] array = new byte[chartImpl.RelationPreservedStreamCollection[key3].Length];
				chartImpl.RelationPreservedStreamCollection[key3].Position = 0L;
				chartImpl.RelationPreservedStreamCollection[key3].Read(array, 0, array.Length);
				ImageRecord imageRecord = new ImageRecord(chart.Document, array);
				imageRecord.Attach();
				empty = GetFileExtension(imageRecord);
				string text5 = "/word/media/image" + imageRecord.ImageId + empty;
				if (!ImagesPath.Contains(text5))
				{
					ImagesPath.Add(text5);
					m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
					m_writer.WriteAttributeString("pkg", "name", null, text5);
					m_writer.WriteAttributeString("pkg", "contentType", null, "image/" + GetFileExtension(imageRecord));
					m_writer.WriteAttributeString("pkg", "compression", null, "store");
					m_writer.WriteStartElement("pkg", "binaryData", "http://schemas.microsoft.com/office/2006/xmlPackage");
					string data = Convert.ToBase64String(imageRecord.ImageBytes);
					m_writer.WriteRaw(data);
					m_writer.WriteEndElement();
					m_writer.WriteEndElement();
				}
				value.Key = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image";
				value.Value = "../media/image" + imageRecord.ImageId + empty;
				m_hasImages = true;
				ChartRelations.Add(key3, value);
			}
		}
		string empty2 = string.Empty;
		Stream stream4 = ((string.IsNullOrEmpty(chart.InternalDataPath) || !chart.DocxProps.ContainsKey(chart.InternalDataPath)) ? GetManifestResourceStream("ExcelTemplate.xlsx") : ((MemoryStream)chart.DocxProps[chart.InternalDataPath]));
		empty2 = "Microsoft_Excel_Worksheet" + id.Replace("rId", "");
		m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
		empty = ((chart.Workbook.Version.ToString() == "Excel97to2003") ? ".xls" : ".xlsx");
		string value5 = "/word/embeddings/" + empty2 + empty;
		m_writer.WriteAttributeString("pkg", "name", null, value5);
		m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
		m_writer.WriteAttributeString("pkg", "compression", null, "store");
		m_writer.WriteStartElement("pkg", "binaryData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		byte[] array2 = new byte[stream4.Length];
		stream4.Position = 0L;
		stream4.Read(array2, 0, array2.Length);
		string data2 = Convert.ToBase64String(array2);
		m_writer.WriteRaw(data2);
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		value.Key = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/package";
		value.Value = "../embeddings/" + empty2 + ".xlsx";
		if (chartImpl.Relations.Count > 0)
		{
			relation = chartImpl.Relations.FindRelationByContentType("http://schemas.openxmlformats.org/officeDocument/2006/relationships/package", out relationId);
		}
		if (relation == null)
		{
			relationId = NextChartElementsRelationId();
		}
		ChartRelations.Add(relationId, value);
		SerializeWordMLChartElementRelations(ChartRelations, id);
		ChartRelations.Clear();
		m_chartElementsRelationId = 0;
		chartImpl.RelationPreservedStreamCollection.Clear();
	}

	private void SerializeWordMLChartElementRelations(Dictionary<string, DictionaryEntry> relations, string OccurrenceOfChart)
	{
		new MemoryStream();
		m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
		string value = "/word/charts/_rels/chart" + OccurrenceOfChart.Replace("rId", "") + ".xml.rels";
		m_writer.WriteAttributeString("pkg", "name", null, value);
		m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-package.relationships+xml");
		m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
		foreach (string key in relations.Keys)
		{
			DictionaryEntry dictionaryEntry = relations[key];
			SerializeChartElementRelation(m_writer, key, dictionaryEntry.Key.ToString(), dictionaryEntry.Value.ToString());
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeWordMLOleContainer(Dictionary<string, Stream> oleContainers)
	{
		foreach (KeyValuePair<string, Stream> oleContainer in oleContainers)
		{
			MemoryStream obj = (MemoryStream)oleContainer.Value;
			m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
			_ = "/word/embeddings/" + oleContainer.Key;
			m_writer.WriteAttributeString("pkg", "name", null, "/word/embeddings/" + oleContainer.Key);
			m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.oleObject");
			m_writer.WriteStartElement("pkg", "binaryData", "http://schemas.microsoft.com/office/2006/xmlPackage");
			string data = Convert.ToBase64String(obj.ToArray());
			m_writer.WriteRaw(data);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
	}

	private void SerializeWordMLImages(Dictionary<string, ImageRecord> imageCollection)
	{
		foreach (KeyValuePair<string, ImageRecord> item in imageCollection)
		{
			ImageRecord imageRecord = imageCollection[item.Key];
			string text = "";
			string text2 = "";
			if (imageRecord == null)
			{
				text = "/word/media/image0.jpeg";
				text2 = "jpeg";
				continue;
			}
			text2 = GetFileExtension(item.Value);
			text = "/word/media/image" + imageRecord.ImageId + text2;
			if (!ImagesPath.Contains(text))
			{
				ImagesPath.Add(text);
				m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
				m_writer.WriteAttributeString("pkg", "name", null, text);
				m_writer.WriteAttributeString("pkg", "contentType", null, "image/" + text2);
				m_writer.WriteAttributeString("pkg", "compression", null, "store");
				m_writer.WriteStartElement("pkg", "binaryData", "http://schemas.microsoft.com/office/2006/xmlPackage");
				string data = Convert.ToBase64String(imageRecord.ImageBytes);
				m_writer.WriteRaw(data);
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
		}
	}

	private void SerializeWordMLGeneralRelation()
	{
		m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
		m_writer.WriteAttributeString("pkg", "name", null, "/_rels/.rels");
		m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-package.relationships+xml");
		m_writer.WriteAttributeString("pkg", "padding", null, "512");
		m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		SerializeGeneralRelations();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeWordMLDocumentRelation()
	{
		m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
		m_writer.WriteAttributeString("pkg", "name", null, "/word/_rels/document.xml.rels");
		m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-package.relationships+xml");
		m_writer.WriteAttributeString("pkg", "padding", null, "256");
		m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		SerializeDocumentRelations();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeWordMLThemes()
	{
		m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
		m_writer.WriteAttributeString("pkg", "name", null, "/word/theme/theme1.xml");
		m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.theme+xml");
		m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		if (m_document.DocHasThemes && m_document.Themes != null)
		{
			SerializeThemes();
		}
		else
		{
			SerializeDefaultThemes();
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeWordMLSettings()
	{
		m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
		m_writer.WriteAttributeString("pkg", "name", null, "/word/settings.xml");
		m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml");
		m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		SerializeSettings();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeWordMLNumberingsRelation()
	{
		m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
		m_writer.WriteAttributeString("pkg", "name", null, "/word/_rels/numbering.xml.rels");
		m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-package.relationships+xml");
		m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		SerializeNumberingsRelation();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeWordMLFontRelation(Stream fontRelStream, Dictionary<string, string> fontRelations)
	{
		m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
		m_writer.WriteAttributeString("pkg", "name", null, "/word/_rels/fontTable.xml.rels");
		m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-package.relationships+xml");
		m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
		foreach (KeyValuePair<string, string> fontRelation in fontRelations)
		{
			string value = fontRelation.Value;
			SerializeRelationShip(fontRelStream, "rId" + value, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/font", fontRelation.Key.ToString());
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		if (m_document.FFNStringTable == null)
		{
			return;
		}
		FontFamilyNameRecord[] fontFamilyNameRecords = m_document.FFNStringTable.FontFamilyNameRecords;
		for (int i = 0; i < fontFamilyNameRecords.Length; i++)
		{
			foreach (KeyValuePair<string, Dictionary<string, DictionaryEntry>> embedFont in fontFamilyNameRecords[i].EmbedFonts)
			{
				foreach (KeyValuePair<string, DictionaryEntry> item in embedFont.Value)
				{
					DictionaryEntry value2 = item.Value;
					string value3 = "/word/" + item.Key.ToString();
					m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
					m_writer.WriteAttributeString("pkg", "name", null, value3);
					m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.obfuscatedFont");
					m_writer.WriteStartElement("pkg", "binaryData", "http://schemas.microsoft.com/office/2006/xmlPackage");
					string data = Convert.ToBase64String(((MemoryStream)value2.Value).ToArray());
					m_writer.WriteRaw(data);
					m_writer.WriteEndElement();
					m_writer.WriteEndElement();
				}
			}
		}
	}

	private void SerializeWordMLSettingsRelation()
	{
		m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
		m_writer.WriteAttributeString("pkg", "name", null, "/word/_rels/settings.xml.rels");
		m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-package.relationships+xml");
		m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		SerializeSettingsRelation();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeWordMLStyles()
	{
		m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
		m_writer.WriteAttributeString("pkg", "name", null, "/word/styles.xml");
		m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml");
		m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		SerializeStyles();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeWordMLCustomProperties()
	{
		m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
		m_writer.WriteAttributeString("pkg", "name", null, "/docProps/custom.xml");
		m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.custom-properties+xml");
		m_writer.WriteAttributeString("pkg", "padding", null, "256");
		m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		SerializeCustomProperties();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeWordMLNumberings()
	{
		if (m_document.ListStyles.Count != 0 || m_document.ListOverrides.Count != 0)
		{
			m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
			m_writer.WriteAttributeString("pkg", "name", null, "/word/numbering.xml");
			m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml");
			m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
			SerializeNumberings();
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
	}

	private void SerializeWordMLFontTable()
	{
		if (m_symbolFontNames != null || m_document.FontSubstitutionTable.Count != 0 || (m_document.FFNStringTable != null && m_document.FFNStringTable.RecordsCount != 0))
		{
			m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
			m_writer.WriteAttributeString("pkg", "name", null, "/word/fontTable.xml");
			m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml");
			m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
			SerializeFontTable(out var _);
		}
	}

	private void SerializeWordMLAppProperties()
	{
		m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
		m_writer.WriteAttributeString("pkg", "name", null, "/docProps/app.xml");
		m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.extended-properties+xml");
		m_writer.WriteAttributeString("pkg", "padding", null, "256");
		m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		SerializeAppProperties();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeWordMLCoreProperties()
	{
		m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
		m_writer.WriteAttributeString("pkg", "name", null, "/docProps/core.xml");
		m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-package.core-properties+xml");
		m_writer.WriteAttributeString("pkg", "padding", null, "256");
		m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		SerializeCoreProperties();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	internal void Serialize(Stream stream, WordDocument document)
	{
		m_document = document;
		if (document.HasMacros && !IsMacroEnabled && m_document.ActualFormatType != 0 && m_document.ActualFormatType != FormatType.Dot)
		{
			throw new Exception("This document contains macros (VBA project) and it cannot be saved as Macro-Free format. Please save the document as Macro-Enabled format (.Docm or .Dotm) or remove macros before saving the document using WordDocument.RemoveMacros method.");
		}
		if (document.Footnotes.ContinuationNotice.Count > 0)
		{
			m_footnoteId++;
		}
		if (document.Endnotes.ContinuationNotice.Count > 0)
		{
			m_endnoteId++;
		}
		SerializeDocument();
		SerializeGlossaryDocument();
		SerializeStyles();
		SerializeNumberings();
		if (m_document.DocHasThemes && m_document.Themes != null)
		{
			SerializeThemes();
		}
		else
		{
			SerializeDefaultThemes();
		}
		SerializeSettings();
		SerializeCoreProperties();
		SerializeAppProperties();
		SerializeFontTable(out var contentType);
		if (m_document.CustomDocumentProperties != null && m_document.CustomDocumentProperties.Count > 0)
		{
			SerializeCustomProperties();
		}
		if (m_document.HasMacros && IsMacroEnabled)
		{
			SerializeVbaProject();
			SerializeVbaData();
			SerializeVbaProjectSignatures();
		}
		SerializeSettingsRelation();
		if (PictureBullets.Count > 0)
		{
			SerializeNumberingsRelation();
		}
		SerializeHeaderFooters();
		if (m_hasComment)
		{
			SerializeComments();
			if (CommentImages.Count > 0 || CommentHyperlinks.Count > 0 || CommentAlternateChunks.Count > 0 || CommentsChartCollection.Count > 0)
			{
				SerializeCommentRelations();
				CommentsChartCollection.Clear();
			}
		}
		if (m_hasComment && m_document.CommentsEx.Count > 0)
		{
			SerializeCommentsExtended();
		}
		if (HasEndnote)
		{
			SerializeFootEndnotes(IsEndnotes: true);
			if (EndnoteImages.Count > 0 || EndnoteHyperlinks.Count > 0 || EndnoteAlternateChunks.Count > 0 || EndnoteChartCollection.Count > 0)
			{
				SerializeEndnoteRelations();
				EndnoteChartCollection.Clear();
			}
		}
		if (HasFootnote)
		{
			SerializeFootEndnotes(IsEndnotes: false);
			if (FootnoteImages.Count > 0 || FootnoteHyperlinks.Count > 0 || FootnoteAlternateChunks.Count > 0 || FootnoteChartCollection.Count > 0)
			{
				SerializeFootnoteRelations();
				FootnoteChartCollection.Clear();
			}
		}
		if (m_hasDiagrams)
		{
			AddDiagramToZip(m_document.DocxPackage);
		}
		if (m_document.CustomXmlParts.Count > 0)
		{
			AddCustomXMLPartsToArchive();
		}
		SerializeDocumentRelations();
		if (ChartsPathNames.Count > 0)
		{
			AddChartsToZip(m_document.DocxPackage);
		}
		if (ControlsPathNames.Count > 0)
		{
			AddControlsToZip(m_document.DocxPackage);
		}
		if (m_document.CustomUIPartContainer != null)
		{
			AddPartContainerToArchive(m_document.CustomUIPartContainer);
		}
		if (m_document.UserCustomizationPartContainer != null)
		{
			AddPartContainerToArchive(m_document.UserCustomizationPartContainer);
		}
		if (m_document.CustomXMLContainer != null)
		{
			AddPartContainerToArchive(m_document.CustomXMLContainer);
		}
		SerializeGeneralRelations();
		if (m_document.HasMacros && IsMacroEnabled)
		{
			SerializeVbaProjectRelations();
		}
		SerializeContentTypes(contentType);
		if (string.IsNullOrEmpty(document.Password))
		{
			m_archive.Save(stream, closeStream: false);
		}
		else
		{
			MemoryStream memoryStream = new MemoryStream();
			m_archive.Save(memoryStream, closeStream: false);
			using ICompoundFile compoundFile = document.CreateCompoundFile();
			string password = document.Password;
			AgileEncryptor agileEncryptor = new AgileEncryptor("SHA512", 256, 64);
			memoryStream.Position = 0L;
			agileEncryptor.Encrypt(memoryStream, password, compoundFile.RootStorage);
			compoundFile.Save(stream);
		}
		Close();
	}

	private void SerializeGlossaryDocument()
	{
		if (m_document.DocxPackage == null)
		{
			return;
		}
		PartContainer partContainer = m_document.DocxPackage.FindPartContainer("word/");
		if (!partContainer.XmlPartContainers.ContainsKey("glossary/"))
		{
			return;
		}
		partContainer = partContainer.XmlPartContainers["glossary/"];
		foreach (KeyValuePair<string, Part> xmlPart in partContainer.XmlParts)
		{
			m_archive.AddItem("word/glossary/" + xmlPart.Key, partContainer.XmlParts[xmlPart.Key].DataStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
		foreach (KeyValuePair<string, Relations> relation in partContainer.Relations)
		{
			m_archive.AddItem(relation.Key, partContainer.Relations[relation.Key].DataStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
	}

	private void AddCustomXMLPartsToArchive()
	{
		int num = -1;
		num = ((m_document.CustomXMLContainer == null) ? 1 : (m_document.CustomXMLContainer.XmlParts.Count + 1));
		foreach (string key in m_document.CustomXmlParts.Keys)
		{
			CustomXMLPart customXMLPart = m_document.CustomXmlParts[key];
			System.Xml.Linq.XDocument xDocument = System.Xml.Linq.XDocument.Parse(customXMLPart.XML);
			MemoryStream memoryStream = new MemoryStream();
			xDocument.Save(memoryStream);
			if (string.IsNullOrEmpty(m_document.CustomXmlPartContainer.Name))
			{
				m_document.CustomXmlPartContainer.Name = "customXml/";
			}
			Part part = new Part(memoryStream);
			part.Name = "item" + num + ".xml";
			if (m_document.CustomXMLContainer != null && m_document.CustomXMLContainer.XmlParts.ContainsKey(part.Name))
			{
				string text = part.Name;
				while (m_document.CustomXMLContainer.XmlParts.ContainsKey(text))
				{
					num++;
					text = "item" + num + ".xml";
				}
				part.Name = text;
			}
			m_document.CustomXmlPartContainer.AddPart(part);
			MemoryStream memoryStream2 = new MemoryStream();
			XmlWriter xmlWriter = CreateWriter(memoryStream2);
			xmlWriter.WriteStartElement("ds", "datastoreItem", "http://schemas.openxmlformats.org/officeDocument/2006/customXml");
			xmlWriter.WriteAttributeString("ds", "itemID", null, customXMLPart.Id);
			xmlWriter.WriteAttributeString("xmlns", "ds", null, "http://schemas.openxmlformats.org/officeDocument/2006/customXml");
			xmlWriter.WriteEndElement();
			xmlWriter.Flush();
			Part part2 = new Part(memoryStream2);
			part2.Name = "itemProps" + num + ".xml";
			m_document.CustomXmlPartContainer.AddPart(part2);
			MemoryStream memoryStream3 = new MemoryStream();
			XmlWriter xmlWriter2 = CreateWriter(memoryStream3);
			xmlWriter2.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
			xmlWriter2.WriteStartElement("Relationship");
			xmlWriter2.WriteAttributeString("Id", "rId" + num);
			xmlWriter2.WriteAttributeString("Type", "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps");
			xmlWriter2.WriteAttributeString("Target", part2.Name);
			xmlWriter2.WriteEndElement();
			xmlWriter2.WriteEndElement();
			xmlWriter2.Flush();
			Relations value = new Relations(memoryStream3, "customXml/_rels/item" + num + ".xml.rels");
			m_document.CustomXmlPartContainer.Relations.Add("customXml/_rels/item" + num + ".xml.rels", value);
			num++;
		}
		AddPartContainerToArchive(m_document.CustomXmlPartContainer);
	}

	private void AddPartContainerToArchive(PartContainer partContainer)
	{
		string name = partContainer.Name;
		string[] array = new string[partContainer.Relations.Count];
		partContainer.Relations.Keys.CopyTo(array, 0);
		if (IsWord2003ML && array.Length != 0)
		{
			m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
			m_writer.WriteAttributeString("pkg", "name", null, "/customXml/_rels/item1.xml.rels");
			m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-package.relationships+xml");
			m_writer.WriteAttributeString("pkg", "padding", null, "256");
			m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
			m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
		}
		for (int i = 0; i < array.Length; i++)
		{
			name = array[i];
			if (IsWord2003ML)
			{
				int num = i + 1;
				SerializeRelationShip(partContainer.Relations[array[i]].DataStream, "rId" + num, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps", "itemProps" + num + ".xml");
			}
			else
			{
				m_archive.AddItem(name, partContainer.Relations[array[i]].DataStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
			}
		}
		if (IsWord2003ML && array.Length != 0)
		{
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		name = partContainer.Name;
		AddPartContainerXMLPartContainersToArchive(name, partContainer.XmlPartContainers);
		string[] array2 = new string[partContainer.XmlParts.Count];
		foreach (string key in partContainer.XmlParts.Keys)
		{
			if (key == m_document.m_metaXmlItem)
			{
				System.Xml.Linq.XDocument contentTypeSchemaProperties = m_document.ContentTypeProperties.m_contentTypeSchemaProperties;
				Stream stream = new MemoryStream();
				contentTypeSchemaProperties.Save(stream);
				partContainer.XmlParts.Remove(key);
				Part part = new Part(stream);
				part.Name = key;
				partContainer.XmlParts.Add(key, part);
				break;
			}
		}
		partContainer.XmlParts.Keys.CopyTo(array2, 0);
		for (int j = 0; j < array2.Length; j++)
		{
			string text = name + array2[j];
			if (IsWord2003ML)
			{
				m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
				if (!text.Contains("Props"))
				{
					m_writer.WriteAttributeString("pkg", "name", null, "/customXml/item1.xml");
					m_writer.WriteAttributeString("pkg", "contentType", null, "application/xml");
					m_writer.WriteAttributeString("pkg", "padding", null, "32");
					m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
					XmlReader reader = CreateReader(partContainer.XmlParts[array2[j]].DataStream);
					m_writer.WriteNode(reader, defattr: false);
				}
				else
				{
					m_writer.WriteAttributeString("pkg", "name", null, "/customXml/itemProps1.xml");
					m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.customXmlProperties+xml");
					m_writer.WriteAttributeString("pkg", "padding", null, "32");
					m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
					m_writer.WriteAttributeString("pkg", "originalXmlStandalone", null, "no");
					string data = Convert.ToBase64String(((MemoryStream)partContainer.XmlParts[array2[j]].DataStream).ToArray());
					m_writer.WriteRaw(data);
				}
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
			else
			{
				m_archive.AddItem(text, partContainer.XmlParts[array2[j]].DataStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
			}
		}
	}

	private void AddPartContainerXMLPartContainersToArchive(string itemName, Dictionary<string, PartContainer> xmlPartContainers)
	{
		string text = itemName;
		string[] array = new string[xmlPartContainers.Count];
		xmlPartContainers.Keys.CopyTo(array, 0);
		if (IsWord2003ML && array.Length != 0)
		{
			m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
			m_writer.WriteAttributeString("pkg", "name", null, "/customXml/_rels/item1.xml.rels");
			m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-package.relationships+xml");
			m_writer.WriteAttributeString("pkg", "padding", null, "256");
			m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
			m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
		}
		for (int i = 0; i < array.Length; i++)
		{
			text = itemName + array[i];
			string[] array2 = new string[xmlPartContainers[array[i]].Relations.Count];
			xmlPartContainers[array[i]].Relations.Keys.CopyTo(array2, 0);
			for (int j = 0; j < array2.Length; j++)
			{
				string itemName2 = text + array2[j];
				if (IsWord2003ML)
				{
					int num = i + 1;
					SerializeRelationShip(xmlPartContainers[array[i]].Relations[array2[j]].DataStream, num.ToString(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps", "itemProps" + num + ".xml");
				}
				else
				{
					m_archive.AddItem(itemName2, xmlPartContainers[array[i]].Relations[array2[j]].DataStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
				}
			}
		}
		if (IsWord2003ML && array.Length != 0)
		{
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		for (int k = 0; k < array.Length; k++)
		{
			text = itemName + array[k];
			string[] array3 = new string[xmlPartContainers[array[k]].XmlParts.Count];
			xmlPartContainers[array[k]].XmlParts.Keys.CopyTo(array3, 0);
			for (int l = 0; l < array3.Length; l++)
			{
				string itemName3 = text + array3[l];
				m_archive.AddItem(itemName3, xmlPartContainers[array[k]].XmlParts[array3[l]].DataStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
			}
		}
		for (int m = 0; m < array.Length; m++)
		{
			text = itemName + array[m];
			string[] array4 = new string[xmlPartContainers[array[m]].XmlPartContainers.Count];
			xmlPartContainers[array[m]].XmlPartContainers.Keys.CopyTo(array4, 0);
			for (int n = 0; n < array4.Length; n++)
			{
				string itemName4 = text + array4[n];
				AddPartContainerXMLPartContainersToArchive(itemName4, xmlPartContainers[array[m]].XmlPartContainers[array4[n]].XmlPartContainers);
			}
		}
	}

	private void SerializeFontTable(out string contentType)
	{
		contentType = string.Empty;
		if (m_symbolFontNames == null && m_document.FontSubstitutionTable.Count == 0 && (m_document.FFNStringTable == null || m_document.FFNStringTable.RecordsCount == 0))
		{
			return;
		}
		HasFontTable = true;
		bool flag = false;
		MemoryStream data = new MemoryStream();
		if (!IsWord2003ML)
		{
			m_writer = CreateWriter(data);
		}
		MemoryStream memoryStream = null;
		XmlWriter xmlWriter = null;
		Dictionary<string, string> dictionary = new Dictionary<string, string>();
		m_writer.WriteStartElement("w", "fonts", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "mc", null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
		m_writer.WriteAttributeString("xmlns", "r", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
		m_writer.WriteAttributeString("xmlns", "w", null, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "w14", null, "http://schemas.microsoft.com/office/word/2010/wordml");
		m_writer.WriteAttributeString("xmlns", "w15", null, "http://schemas.microsoft.com/office/word/2012/wordml");
		m_writer.WriteAttributeString("mc", "Ignorable", null, "w14 w15");
		List<string> list = new List<string>();
		if (m_symbolFontNames != null)
		{
			foreach (string symbolFontName in m_symbolFontNames)
			{
				m_writer.WriteStartElement("font", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("name", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", symbolFontName);
				if (m_document.FontSubstitutionTable.ContainsKey(symbolFontName) && m_document.FontSubstitutionTable[symbolFontName] != string.Empty)
				{
					list.Add(symbolFontName);
					m_writer.WriteStartElement("altName", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
					m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.FontSubstitutionTable[symbolFontName]);
					m_writer.WriteEndElement();
				}
				m_writer.WriteStartElement("charset", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "02");
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
		}
		if (m_document.FFNStringTable != null)
		{
			FontFamilyNameRecord[] fontFamilyNameRecords = m_document.FFNStringTable.FontFamilyNameRecords;
			foreach (FontFamilyNameRecord fontFamilyNameRecord in fontFamilyNameRecords)
			{
				m_writer.WriteStartElement("font", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				string[] array = fontFamilyNameRecord.FontName.Split('\0');
				m_writer.WriteAttributeString("name", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", array[0]);
				if (fontFamilyNameRecord.AlternativeFontName != string.Empty)
				{
					m_writer.WriteStartElement("altName", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
					m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", fontFamilyNameRecord.AlternativeFontName);
					m_writer.WriteEndElement();
				}
				m_writer.WriteStartElement("charset", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", fontFamilyNameRecord.CharacterSetId.ToString());
				m_writer.WriteEndElement();
				m_writer.WriteStartElement("family", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ((FontFamilyType)fontFamilyNameRecord.FontFamilyID).ToString().ToLower());
				m_writer.WriteEndElement();
				m_writer.WriteStartElement("pitch", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ((FontPitchType)fontFamilyNameRecord.PitchRequest).ToString().ToLower());
				m_writer.WriteEndElement();
				m_writer.WriteStartElement("sig", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("usb0", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetFontSignature(fontFamilyNameRecord.SigUsb0));
				m_writer.WriteAttributeString("usb1", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetFontSignature(fontFamilyNameRecord.SigUsb1));
				m_writer.WriteAttributeString("usb2", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetFontSignature(fontFamilyNameRecord.SigUsb2));
				m_writer.WriteAttributeString("usb3", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetFontSignature(fontFamilyNameRecord.SigUsb3));
				m_writer.WriteAttributeString("csb0", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetFontSignature(fontFamilyNameRecord.SigCsb0));
				m_writer.WriteAttributeString("csb1", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetFontSignature(fontFamilyNameRecord.SigCsb1));
				m_writer.WriteEndElement();
				if (fontFamilyNameRecord.EmbedFonts.Count > 0)
				{
					string text = "word\\fonts\\";
					if (!flag && !IsWord2003ML)
					{
						m_hasEmbedFonts = true;
						memoryStream = new MemoryStream();
						xmlWriter = CreateWriter(memoryStream);
						xmlWriter.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
						flag = true;
					}
					foreach (KeyValuePair<string, Dictionary<string, DictionaryEntry>> embedFont in fontFamilyNameRecord.EmbedFonts)
					{
						foreach (KeyValuePair<string, DictionaryEntry> item in embedFont.Value)
						{
							DictionaryEntry value = item.Value;
							if (dictionary.ContainsKey(item.Key.ToString()))
							{
								m_writer.WriteStartElement(embedFont.Key, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
								m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", "rId" + dictionary[item.Key.ToString()]);
								if (!string.IsNullOrEmpty(value.Key.ToString()))
								{
									if (!fontFamilyNameRecord.IsSubsetted)
									{
										m_writer.WriteAttributeString("fontKey", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value.Key.ToString());
									}
									else
									{
										m_writer.WriteAttributeString("subsetted", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value.Key.ToString());
									}
								}
								m_writer.WriteEndElement();
								continue;
							}
							int count = dictionary.Count;
							count++;
							dictionary.Add(item.Key.ToString(), count.ToString());
							if (!IsWord2003ML)
							{
								xmlWriter.WriteStartElement("Relationship");
								xmlWriter.WriteAttributeString("Id", "rId" + count);
								xmlWriter.WriteAttributeString("Type", "http://schemas.openxmlformats.org/officeDocument/2006/relationships/font");
								string fontFileName = GetFontFileName(item.Key.ToString());
								string value2 = "fonts/" + fontFileName;
								xmlWriter.WriteAttributeString("Target", value2);
								xmlWriter.WriteEndElement();
								string[] array2 = item.Key.ToString().Split('.');
								contentType = array2[1];
								text += fontFileName;
								if (m_archive.Find(text) == -1)
								{
									m_archive.AddItem(text, value.Value as Stream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
									text = "word\\fonts\\";
								}
							}
							m_writer.WriteStartElement(embedFont.Key, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
							m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", "rId" + count);
							if (!string.IsNullOrEmpty(value.Key.ToString()))
							{
								if (!fontFamilyNameRecord.IsSubsetted)
								{
									m_writer.WriteAttributeString("fontKey", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value.Key.ToString());
								}
								else
								{
									m_writer.WriteAttributeString("subsetted", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value.Key.ToString());
								}
							}
							m_writer.WriteEndElement();
						}
					}
				}
				m_writer.WriteEndElement();
			}
		}
		else
		{
			foreach (KeyValuePair<string, string> item2 in m_document.FontSubstitutionTable)
			{
				if (!list.Contains(item2.Key) && item2.Value != string.Empty)
				{
					m_writer.WriteStartElement("font", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
					m_writer.WriteAttributeString("name", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", item2.Key);
					m_writer.WriteStartElement("altName", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
					m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", item2.Value);
					m_writer.WriteEndElement();
					m_writer.WriteEndElement();
				}
			}
		}
		m_writer.WriteEndElement();
		if (!IsWord2003ML)
		{
			m_writer.Flush();
			m_archive.AddItem("word\\fontTable.xml", data, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
		if (memoryStream != null)
		{
			xmlWriter.WriteEndElement();
			if (dictionary.Count > 0 && !IsWord2003ML)
			{
				dictionary.Clear();
				xmlWriter.Flush();
				m_archive.AddItem("word\\_rels\\fontTable.xml.rels", memoryStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
			}
		}
		if (IsWord2003ML)
		{
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (dictionary.Count > 0 && IsWord2003ML)
		{
			SerializeWordMLFontRelation(memoryStream, dictionary);
		}
	}

	private string GetFontFileName(string filePath)
	{
		int num = filePath.LastIndexOfAny(new char[2] { '/', '\\' });
		if (num == -1)
		{
			return filePath;
		}
		return filePath.Substring(num + 1);
	}

	private string GetFontSignature(byte[] sig)
	{
		char[] array = BitConverter.ToString(sig).ToCharArray();
		Array.Reverse(array);
		return new string(array).Replace("-", string.Empty);
	}

	private void SerializeDocument()
	{
		MemoryStream data = new MemoryStream();
		m_writer = CreateWriter(data);
		m_writer.WriteStartElement("w", "document", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "wpc", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas");
		m_writer.WriteAttributeString("xmlns", "mc", null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
		m_writer.WriteAttributeString("xmlns", "o", null, "urn:schemas-microsoft-com:office:office");
		m_writer.WriteAttributeString("xmlns", "r", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
		m_writer.WriteAttributeString("xmlns", "m", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
		m_writer.WriteAttributeString("xmlns", "v", null, "urn:schemas-microsoft-com:vml");
		m_writer.WriteAttributeString("xmlns", "wp14", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
		m_writer.WriteAttributeString("xmlns", "wp", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		m_writer.WriteAttributeString("xmlns", "w", null, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "w10", null, "urn:schemas-microsoft-com:office:word");
		m_writer.WriteAttributeString("xmlns", "w14", null, "http://schemas.microsoft.com/office/word/2010/wordml");
		m_writer.WriteAttributeString("xmlns", "w15", null, "http://schemas.microsoft.com/office/word/2012/wordml");
		m_writer.WriteAttributeString("xmlns", "wpg", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
		m_writer.WriteAttributeString("xmlns", "wpi", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingInk");
		m_writer.WriteAttributeString("xmlns", "wne", null, "http://schemas.microsoft.com/office/word/2006/wordml");
		m_writer.WriteAttributeString("xmlns", "wps", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		m_writer.WriteAttributeString("xmlns", "cx", null, "http://schemas.microsoft.com/office/drawing/2014/chartex");
		m_writer.WriteAttributeString("xmlns", "aink", null, "http://schemas.microsoft.com/office/drawing/2016/ink");
		m_writer.WriteAttributeString("xmlns", "am3d", null, "http://schemas.microsoft.com/office/drawing/2017/model3d");
		m_writer.WriteAttributeString("xmlns", "w16cex", null, "http://schemas.microsoft.com/office/word/2018/wordml/cex");
		m_writer.WriteAttributeString("xmlns", "w16cid", null, "http://schemas.microsoft.com/office/word/2016/wordml/cid");
		m_writer.WriteAttributeString("xmlns", "w16sdtdh", null, "http://schemas.microsoft.com/office/word/2020/wordml/sdtdatahash");
		m_writer.WriteAttributeString("xmlns", "w16se", null, "http://schemas.microsoft.com/office/word/2015/wordml/symex");
		m_writer.WriteAttributeString("xmlns", "w16", null, "http://schemas.microsoft.com/office/word/2018/wordml");
		m_writer.WriteAttributeString("xmlns", "c", null, "http://schemas.openxmlformats.org/drawingml/2006/chart");
		m_writer.WriteAttributeString("mc", "Ignorable", null, "w14 w15 w16se w16cid w16 w16cex w16sdtdh wp14");
		if (IsStrict)
		{
			m_writer.WriteAttributeString("w", "conformance", null, "strict");
		}
		SerializeBackground(m_document.Background);
		SerializeDocumentBody();
		m_writer.WriteEndElement();
		m_writer.Flush();
		m_archive.AddItem("word\\document.xml", data, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
	}

	private void SerializeVbaProjectRelations()
	{
		MemoryStream memoryStream = new MemoryStream();
		m_writer = CreateWriter(memoryStream);
		m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
		SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.microsoft.com/office/2006/relationships/wordVbaData", "vbaData.xml");
		if (m_document.VbaProjectSignature != null)
		{
			SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.microsoft.com/office/2006/relationships/vbaProjectSignature", "vbaProjectSignature.bin");
		}
		if (m_document.VbaProjectSignatureAgile != null)
		{
			SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.microsoft.com/office/2006/relationships/vbaProjectSignatureAgile", "vbaProjectSignatureAgile.bin");
		}
		m_writer.WriteEndElement();
		m_writer.Flush();
		m_archive.AddItem("word\\_rels\\vbaProject.bin.rels", memoryStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
	}

	private void SerializeVbaProject()
	{
		m_archive.AddItem("word\\vbaProject.bin", m_document.VbaProject, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
	}

	private void SerializeVbaProjectSignatures()
	{
		if (m_document.VbaProjectSignature != null)
		{
			m_archive.AddItem("word\\vbaProjectSignature.bin", m_document.VbaProjectSignature, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
		if (m_document.VbaProjectSignatureAgile != null)
		{
			m_archive.AddItem("word\\vbaProjectSignatureAgile.bin", m_document.VbaProjectSignatureAgile, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
	}

	private void SerializeVbaData()
	{
		MemoryStream data = new MemoryStream();
		m_writer = CreateWriter(data);
		m_writer.WriteStartElement("wne", "vbaSuppData", "http://schemas.microsoft.com/office/word/2006/wordml");
		m_writer.WriteAttributeString("xmlns", "wpc", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas");
		m_writer.WriteAttributeString("xmlns", "mc", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
		m_writer.WriteAttributeString("xmlns", "o", null, "urn:schemas-microsoft-com:office:office");
		m_writer.WriteAttributeString("xmlns", "r", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
		m_writer.WriteAttributeString("xmlns", "m", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
		m_writer.WriteAttributeString("xmlns", "v", null, "urn:schemas-microsoft-com:vml");
		m_writer.WriteAttributeString("xmlns", "wp14", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
		m_writer.WriteAttributeString("xmlns", "wp", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		m_writer.WriteAttributeString("xmlns", "w10", null, "urn:schemas-microsoft-com:office:word");
		m_writer.WriteAttributeString("xmlns", "w", null, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "w14", null, "http://schemas.microsoft.com/office/word/2010/wordml");
		m_writer.WriteAttributeString("xmlns", "w15", null, "http://schemas.microsoft.com/office/word/2012/wordml");
		m_writer.WriteAttributeString("xmlns", "wpg", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
		m_writer.WriteAttributeString("xmlns", "wpi", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingInk");
		m_writer.WriteAttributeString("xmlns", "wne", null, "http://schemas.microsoft.com/office/word/2006/wordml");
		m_writer.WriteAttributeString("xmlns", "wps", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		m_writer.WriteAttributeString("mc", "Ignorable", null, "w14 w15 wp14");
		if (m_document.DocEvents.Count > 0)
		{
			m_writer.WriteStartElement("wne", "docEvents", "http://schemas.microsoft.com/office/word/2006/wordml");
			foreach (string docEvent in m_document.DocEvents)
			{
				m_writer.WriteStartElement("wne", docEvent, "http://schemas.microsoft.com/office/word/2006/wordml");
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		if (m_document.VbaData.Count > 0)
		{
			m_writer.WriteStartElement("wne", "mcds", "http://schemas.microsoft.com/office/word/2006/wordml");
			foreach (MacroData vbaDatum in m_document.VbaData)
			{
				m_writer.WriteStartElement("wne", "mcd", "http://schemas.microsoft.com/office/word/2006/wordml");
				m_writer.WriteAttributeString("wne", "macroName", "http://schemas.microsoft.com/office/word/2006/wordml", vbaDatum.Name.ToUpper());
				m_writer.WriteAttributeString("wne", "name", "http://schemas.microsoft.com/office/word/2006/wordml", vbaDatum.Name);
				m_writer.WriteAttributeString("wne", "bEncrypt", "http://schemas.microsoft.com/office/word/2006/wordml", vbaDatum.Encrypt);
				m_writer.WriteAttributeString("wne", "cmg", "http://schemas.microsoft.com/office/word/2006/wordml", vbaDatum.Cmg);
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		m_writer.Flush();
		m_archive.AddItem("word\\vbaData.xml", data, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
	}

	private void SerializeHeaderFooters()
	{
		SerializeHeaderFooter(HeaderFooterType.EvenFooter, m_document);
		SerializeHeaderFooter(HeaderFooterType.EvenHeader, m_document);
		SerializeHeaderFooter(HeaderFooterType.FirstPageFooter, m_document);
		SerializeHeaderFooter(HeaderFooterType.FirstPageHeader, m_document);
		SerializeHeaderFooter(HeaderFooterType.OddFooter, m_document);
		SerializeHeaderFooter(HeaderFooterType.OddHeader, m_document);
	}

	private void SerializeHeaderFooter(HeaderFooterType hfType, WordDocument doc)
	{
		if (HeadersFooters.Count == 0 || !HeadersFooters.ContainsKey(hfType))
		{
			return;
		}
		Dictionary<string, HeaderFooter> dictionary = HeadersFooters[hfType];
		HeaderFooter headerFooter = null;
		foreach (string key in dictionary.Keys)
		{
			headerFooter = dictionary[key];
			if (hfType == HeaderFooterType.EvenHeader || hfType == HeaderFooterType.FirstPageHeader || hfType == HeaderFooterType.OddHeader)
			{
				string headerFooterPath = "word\\header" + key.Replace("rId", "") + ".xml";
				string headerFooterRelsPath = "word\\_rels\\header" + key.Replace("rId", "") + ".xml.rels";
				SerializeHeader(headerFooter, key, headerFooterPath, headerFooterRelsPath);
			}
			else
			{
				string headerFooterPath = "word\\footer" + key.Replace("rId", "") + ".xml";
				string headerFooterRelsPath = "word\\_rels\\footer" + key.Replace("rId", "") + ".xml.rels";
				SerializeFooter(headerFooter, key, headerFooterPath, headerFooterRelsPath);
			}
		}
	}

	private void SerializeHeader(HeaderFooter header, string id, string headerFooterPath, string headerFooterRelsPath)
	{
		MemoryStream data = new MemoryStream();
		if (IsWord2003ML)
		{
			m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
			string text = id.Replace("rId", "");
			m_writer.WriteAttributeString("pkg", "name", null, "/word/header" + text + ".xml");
			m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml");
			m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		}
		else
		{
			m_writer = CreateWriter(data);
		}
		m_writer.WriteStartElement("w", "hdr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "v", null, "urn:schemas-microsoft-com:vml");
		m_writer.WriteAttributeString("xmlns", "w10", null, "urn:schemas-microsoft-com:office:word");
		m_writer.WriteAttributeString("xmlns", "o", null, "urn:schemas-microsoft-com:office:office");
		m_writer.WriteAttributeString("xmlns", "ve", null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
		m_writer.WriteAttributeString("xmlns", "r", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
		m_writer.WriteAttributeString("xmlns", "m", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
		m_writer.WriteAttributeString("xmlns", "wne", null, "http://schemas.microsoft.com/office/word/2006/wordml");
		m_writer.WriteAttributeString("xmlns", "a", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "pic", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
		m_writer.WriteAttributeString("xmlns", "wp", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		m_writer.WriteAttributeString("xmlns", "wpc", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas");
		m_writer.WriteAttributeString("xmlns", "wp14", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
		m_writer.WriteAttributeString("xmlns", "w14", null, "http://schemas.microsoft.com/office/word/2010/wordml");
		m_writer.WriteAttributeString("xmlns", "w15", null, "http://schemas.microsoft.com/office/word/2012/wordml");
		m_writer.WriteAttributeString("xmlns", "wpg", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
		m_writer.WriteAttributeString("xmlns", "wpi", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingInk");
		m_writer.WriteAttributeString("xmlns", "wps", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		m_writer.WriteAttributeString("ve", "Ignorable", null, "w14 w15 wp14");
		Watermark watermark = header.Watermark;
		if (watermark != null && watermark.Type != 0 && header.WriteWatermark && (!(watermark is PictureWatermark) || (watermark as PictureWatermark).Picture != null))
		{
			if (header.Paragraphs.Count == 0)
			{
				m_writer.WriteStartElement("p", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteStartElement("pPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteStartElement("pStyle", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "Header");
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
				SerializeWatermark(watermark);
				m_writer.WriteEndElement();
				SerializeBodyItems(header.Items, isLastSection: true);
			}
			else
			{
				for (int i = 0; i < header.Items.Count; i++)
				{
					TextBodyItem item = header.Items[i];
					if (!HasSinglePageField(item))
					{
						SerializeBodyItem(item, isLastSection: true);
					}
				}
			}
			if (header.Watermark != null && header.Watermark.Type == WatermarkType.PictureWatermark)
			{
				m_hasImages = true;
				string key = string.Empty;
				foreach (HeaderFooterType key2 in m_headerFooterColl.Keys)
				{
					Dictionary<string, HeaderFooter> dictionary = m_headerFooterColl[key2];
					foreach (string key3 in dictionary.Keys)
					{
						if (dictionary[key3] == header)
						{
							key = key3;
						}
					}
				}
				UpdateImages((header.Watermark as PictureWatermark).WordPicture);
				if (HeaderFooterImages.ContainsKey(key))
				{
					Dictionary<string, ImageRecord> dictionary2 = m_headerFooterImages[key];
					dictionary2.Add(m_watermarkId, (header.Watermark as PictureWatermark).WordPicture.ImageRecord);
				}
				else
				{
					Dictionary<string, ImageRecord> dictionary2 = new Dictionary<string, ImageRecord>();
					dictionary2.Add(m_watermarkId, (header.Watermark as PictureWatermark).WordPicture.ImageRecord);
					HeaderFooterImages.Add(key, dictionary2);
				}
			}
		}
		else
		{
			SerializeBodyItems(header.Items, isLastSection: true);
		}
		m_writer.WriteEndElement();
		if (IsWord2003ML)
		{
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		else
		{
			m_writer.Flush();
			m_archive.AddItem(headerFooterPath, data, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
		SerializeHFRelations(id, headerFooterRelsPath);
		if (HFChartCollection.Count > 0 && IsWord2003ML)
		{
			SerializeWordMLChart(HFChartCollection);
		}
		HFChartCollection.Clear();
	}

	private void SerializeFooter(HeaderFooter footer, string id, string headerFooterPath, string headerFooterRelsPath)
	{
		MemoryStream data = new MemoryStream();
		if (IsWord2003ML)
		{
			m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
			string text = id.Replace("rId", "");
			m_writer.WriteAttributeString("pkg", "name", null, "/word/footer" + text + ".xml");
			m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml");
			m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		}
		else
		{
			m_writer = CreateWriter(data);
		}
		m_writer.WriteStartElement("w", "ftr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "v", null, "urn:schemas-microsoft-com:vml");
		m_writer.WriteAttributeString("xmlns", "w10", null, "urn:schemas-microsoft-com:office:word");
		m_writer.WriteAttributeString("xmlns", "o", null, "urn:schemas-microsoft-com:office:office");
		m_writer.WriteAttributeString("xmlns", "ve", null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
		m_writer.WriteAttributeString("xmlns", "r", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
		m_writer.WriteAttributeString("xmlns", "m", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
		m_writer.WriteAttributeString("xmlns", "wne", null, "http://schemas.microsoft.com/office/word/2006/wordml");
		m_writer.WriteAttributeString("xmlns", "a", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "pic", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
		m_writer.WriteAttributeString("xmlns", "wp", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		m_writer.WriteAttributeString("xmlns", "wpc", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas");
		m_writer.WriteAttributeString("xmlns", "wp14", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
		m_writer.WriteAttributeString("xmlns", "w14", null, "http://schemas.microsoft.com/office/word/2010/wordml");
		m_writer.WriteAttributeString("xmlns", "w15", null, "http://schemas.microsoft.com/office/word/2012/wordml");
		m_writer.WriteAttributeString("xmlns", "wpg", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
		m_writer.WriteAttributeString("xmlns", "wpi", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingInk");
		m_writer.WriteAttributeString("xmlns", "wps", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		m_writer.WriteAttributeString("ve", "Ignorable", null, "w14 w15 wp14");
		Watermark watermark = footer.Watermark;
		if (watermark != null && watermark.Type != 0 && footer.WriteWatermark && (!(watermark is PictureWatermark) || (watermark as PictureWatermark).Picture != null))
		{
			if (footer.Paragraphs.Count == 0)
			{
				m_writer.WriteStartElement("p", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteStartElement("pPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteStartElement("pStyle", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "Header");
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
				SerializeWatermark(watermark);
				m_writer.WriteEndElement();
				SerializeBodyItems(footer.Items, isLastSection: true);
			}
			else
			{
				for (int i = 0; i < footer.Items.Count; i++)
				{
					TextBodyItem item = footer.Items[i];
					if (!HasSinglePageField(item))
					{
						SerializeBodyItem(item, isLastSection: true);
					}
				}
			}
			if (footer.Watermark != null && footer.Watermark.Type == WatermarkType.PictureWatermark)
			{
				m_hasImages = true;
				string key = string.Empty;
				foreach (HeaderFooterType key2 in m_headerFooterColl.Keys)
				{
					Dictionary<string, HeaderFooter> dictionary = m_headerFooterColl[key2];
					foreach (string key3 in dictionary.Keys)
					{
						if (dictionary[key3] == footer)
						{
							key = key3;
						}
					}
				}
				UpdateImages((footer.Watermark as PictureWatermark).WordPicture);
				if (HeaderFooterImages.ContainsKey(key))
				{
					Dictionary<string, ImageRecord> dictionary2 = m_headerFooterImages[key];
					dictionary2.Add(m_watermarkId, (footer.Watermark as PictureWatermark).WordPicture.ImageRecord);
				}
				else
				{
					Dictionary<string, ImageRecord> dictionary2 = new Dictionary<string, ImageRecord>();
					dictionary2.Add(m_watermarkId, (footer.Watermark as PictureWatermark).WordPicture.ImageRecord);
					HeaderFooterImages.Add(key, dictionary2);
				}
			}
		}
		else
		{
			SerializeBodyItems(footer.Items, isLastSection: true);
		}
		m_writer.WriteEndElement();
		if (IsWord2003ML)
		{
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		else
		{
			m_writer.Flush();
			m_archive.AddItem(headerFooterPath, data, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
		SerializeHFRelations(id, headerFooterRelsPath);
		if (HFChartCollection.Count > 0 && IsWord2003ML)
		{
			SerializeWordMLChart(HFChartCollection);
		}
		HFChartCollection.Clear();
	}

	private void SerializeHFRelations(string hfId, string headerFooterRelsPath)
	{
		bool flag = HeaderFooterImages.ContainsKey(hfId);
		bool flag2 = HeaderFooterHyperlinks.ContainsKey(hfId);
		bool flag3 = HeaderFooterInclPicUrls.ContainsKey(hfId);
		bool flag4 = HeaderFooterAlternateChunks.ContainsKey(hfId);
		bool flag5 = HeaderFooterSvgImages.ContainsKey(hfId);
		bool flag6 = HFChartCollection.Count > 0;
		if (!(flag || flag5 || flag2 || flag4 || flag6))
		{
			return;
		}
		MemoryStream memoryStream = new MemoryStream();
		if (IsWord2003ML)
		{
			m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
			string text = headerFooterRelsPath.Replace("\\", "/");
			m_writer.WriteAttributeString("pkg", "name", null, "/" + text);
			m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-package.relationships+xml");
			m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		}
		else
		{
			m_writer = CreateWriter(memoryStream);
		}
		m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
		if (flag)
		{
			SerializeImagesRelations(memoryStream, HeaderFooterImages[hfId]);
		}
		if (flag5)
		{
			SerializeHFSvgImageRelation(HeaderFooterSvgImages[hfId]);
		}
		if (flag2)
		{
			SerializeHyperlinkRelations(memoryStream, HeaderFooterHyperlinks[hfId]);
		}
		if (flag4)
		{
			SerializeAltChunkRelations(memoryStream, HeaderFooterAlternateChunks[hfId]);
		}
		if (flag6)
		{
			string empty = string.Empty;
			string empty2 = string.Empty;
			foreach (string key in HFChartCollection.Keys)
			{
				if (HFChartCollection[key].Is2016Chart)
				{
					empty = "charts/chartEx" + key.Replace("rId", "") + ".xml";
					empty2 = "http://schemas.microsoft.com/office/2014/relationships/chartEx";
				}
				else
				{
					empty = "charts/chart" + key.Replace("rId", "") + ".xml";
					empty2 = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart";
				}
				SerializeRelationShip(memoryStream, key, empty2, empty);
			}
		}
		if (flag3)
		{
			SerializeIncludePictureUrlRelations(memoryStream, HeaderFooterInclPicUrls[hfId]);
		}
		if (HFOleContainers.ContainsKey(hfId))
		{
			AddOLEToZip(HFOleContainers[hfId]);
		}
		if (HFRelations.ContainsKey(hfId))
		{
			SerializeHFCommonRelations(memoryStream, HFRelations[hfId]);
		}
		m_writer.WriteEndElement();
		if (IsWord2003ML)
		{
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		else
		{
			m_writer.Flush();
			m_archive.AddItem(headerFooterRelsPath, memoryStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
	}

	private void SerializeHFCommonRelations(MemoryStream stream, Dictionary<string, DictionaryEntry> xmlItemsRels)
	{
		foreach (KeyValuePair<string, DictionaryEntry> xmlItemsRel in xmlItemsRels)
		{
			string key = xmlItemsRel.Key;
			DictionaryEntry value = xmlItemsRel.Value;
			string relationshipType = (string)value.Key;
			string targetPath = (string)value.Value;
			SerializeRelationShip(stream, key, relationshipType, targetPath);
		}
	}

	private bool HasSinglePageField(TextBodyItem item)
	{
		bool result = false;
		if (item is WParagraph)
		{
			WParagraph wParagraph = item as WParagraph;
			if (wParagraph.Items.Count > 0 && wParagraph.Items.Count <= 4)
			{
				WField wField = wParagraph.Items[0] as WField;
				WFieldMark wFieldMark = wParagraph.Items[wParagraph.Items.Count - 1] as WFieldMark;
				if (wField != null && wFieldMark != null && wField.FieldType == FieldType.FieldPage && wFieldMark.Type == FieldMarkType.FieldEnd)
				{
					result = true;
				}
			}
		}
		return result;
	}

	private void AddChartsToZip(Package wordPackage)
	{
		AddToZip(wordPackage, "word/charts/");
	}

	private void AddDiagramToZip(Package wordPackage)
	{
		AddToZip(wordPackage, "word/diagrams/");
	}

	private void AddControlsToZip(Package wordPackage)
	{
		AddToZip(wordPackage, "word/activeX/");
	}

	private void AddToZip(Package wordPackage, string partPath)
	{
		if (wordPackage == null)
		{
			return;
		}
		PartContainer partContainer = wordPackage.FindPartContainer(partPath);
		if (partContainer != null)
		{
			AddContainerToZip(partContainer, "word/");
			if (partContainer.Relations.Count > 0)
			{
				SerializeRelItems(wordPackage, partContainer);
			}
		}
	}

	private void SerializeRelItems(Package wordPackage, PartContainer partContainer)
	{
		XmlReader xmlReader = null;
		Dictionary<string, DictionaryEntry> dictionary = null;
		foreach (string key in partContainer.Relations.Keys)
		{
			Relations relations = partContainer.Relations[key];
			if (relations.DataStream != null && relations.DataStream.Length > 0)
			{
				relations.DataStream.Position = 0L;
				xmlReader = XmlReader.Create(relations.DataStream);
				dictionary = new Dictionary<string, DictionaryEntry>();
				ParseRelations(xmlReader, dictionary);
				if (dictionary.Count > 0)
				{
					AddPartsToZip(wordPackage, dictionary);
				}
			}
		}
	}

	private void AddPartsToZip(Package wordPackage, Dictionary<string, DictionaryEntry> relations)
	{
		Part part = null;
		foreach (DictionaryEntry value in relations.Values)
		{
			_ = (string)value.Key;
			string text = (string)value.Value;
			if (text.IndexOf("file") == -1)
			{
				text = text.Replace("..", "word");
				part = wordPackage.FindPart(text);
				if (part != null && m_archive.Find(text) == -1 && part.DataStream != null)
				{
					m_archive.AddItem(text, part.DataStream as MemoryStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
				}
			}
		}
	}

	private void ParseRelations(XmlReader relReader, Dictionary<string, DictionaryEntry> relations)
	{
		relReader.MoveToContent();
		if (relReader.LocalName != "Relationships")
		{
			relReader.ReadInnerXml();
		}
		else
		{
			if (relReader.IsEmptyElement)
			{
				return;
			}
			string localName = relReader.LocalName;
			bool flag = false;
			relReader.Read();
			flag = true;
			if (localName == relReader.LocalName && relReader.NodeType == XmlNodeType.EndElement)
			{
				return;
			}
			string text = null;
			string text2 = null;
			string text3 = null;
			do
			{
				if (!flag)
				{
					relReader.Read();
				}
				text = relReader.GetAttribute("Id");
				text2 = relReader.GetAttribute("Target");
				text3 = relReader.GetAttribute("Type");
				if (text != null && text2 != null && text3 != null)
				{
					DictionaryEntry value = new DictionaryEntry(text3, text2);
					relations.Add(text, value);
				}
				flag = false;
			}
			while (relReader.LocalName != "Relationships");
		}
	}

	private void AddXmlItemsToZip(Package wordPackage)
	{
		if (wordPackage != null)
		{
			AddContainerToZip(wordPackage, null);
		}
	}

	private void AddContainerToZip(PartContainer cont, string dataPath)
	{
		dataPath += cont.Name;
		foreach (Part value in cont.XmlParts.Values)
		{
			string text = dataPath + value.Name;
			if (value.Name.StartsWith("activeX") && !ControlsPathNames.Contains(text))
			{
				ControlsPathNames.Add(text);
			}
			if (m_archive.Find(text) == -1 && value.DataStream != null)
			{
				m_archive.AddItem(text, value.DataStream as MemoryStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
			}
		}
		foreach (Relations value2 in cont.Relations.Values)
		{
			if (m_archive.Find(value2.Name) == -1 && value2.DataStream != null && WriteRel(value2.Name))
			{
				m_archive.AddItem(value2.Name, value2.DataStream as MemoryStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
			}
		}
		foreach (PartContainer value3 in cont.XmlPartContainers.Values)
		{
			if (ChartsPathNames.Count > 0 && (value3.Name == "word/" || value3.Name == "charts/" || value3.Name == "embeddings/"))
			{
				AddContainerToZip(value3, dataPath);
			}
		}
	}

	private bool WriteRel(string relPath)
	{
		if (relPath == "word/_rels/numbering.xml.rels")
		{
			return false;
		}
		return true;
	}

	private void SerializeEndnoteRelations()
	{
		MemoryStream memoryStream = new MemoryStream();
		if (IsWord2003ML)
		{
			m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
			m_writer.WriteAttributeString("pkg", "name", null, "/word/_rels/endnotes.xml.rels");
			m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-package.relationships+xml");
			m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		}
		else
		{
			m_writer = CreateWriter(memoryStream);
		}
		m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
		SerializeImagesRelations(memoryStream, EndnoteImages);
		SerializeHyperlinkRelations(memoryStream, EndnoteHyperlinks);
		SerializeAltChunkRelations(memoryStream, EndnoteAlternateChunks);
		foreach (string key in EndnoteChartCollection.Keys)
		{
			string targetPath = "charts/chart" + key.Replace("rId", "") + ".xml";
			string relationshipType = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart";
			SerializeRelationShip(memoryStream, key, relationshipType, targetPath);
		}
		m_writer.WriteEndElement();
		if (IsWord2003ML)
		{
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		else
		{
			m_writer.Flush();
			m_archive.AddItem("word\\_rels\\endnotes.xml.rels", memoryStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
	}

	private void SerializeFootnoteRelations()
	{
		MemoryStream memoryStream = new MemoryStream();
		if (IsWord2003ML)
		{
			m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
			m_writer.WriteAttributeString("pkg", "name", null, "/word/_rels/footnotes.xml.rels");
			m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-package.relationships+xml");
			m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		}
		else
		{
			m_writer = CreateWriter(memoryStream);
		}
		m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
		SerializeImagesRelations(memoryStream, FootnoteImages);
		SerializeHyperlinkRelations(memoryStream, FootnoteHyperlinks);
		SerializeAltChunkRelations(memoryStream, FootnoteAlternateChunks);
		foreach (string key in FootnoteChartCollection.Keys)
		{
			string targetPath = "charts/chart" + key.Replace("rId", "") + ".xml";
			string relationshipType = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart";
			SerializeRelationShip(memoryStream, key, relationshipType, targetPath);
		}
		m_writer.WriteEndElement();
		if (IsWord2003ML)
		{
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		else
		{
			m_writer.Flush();
			m_archive.AddItem("word\\_rels\\footnotes.xml.rels", memoryStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
	}

	private void SerializeCommentRelations()
	{
		MemoryStream memoryStream = new MemoryStream();
		if (!IsWord2003ML)
		{
			m_writer = CreateWriter(memoryStream);
		}
		m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
		SerializeImagesRelations(memoryStream, CommentImages);
		SerializeHyperlinkRelations(memoryStream, CommentHyperlinks);
		SerializeAltChunkRelations(memoryStream, CommentAlternateChunks);
		foreach (string key in CommentsChartCollection.Keys)
		{
			string targetPath = "charts/chart" + key.Replace("rId", "") + ".xml";
			string relationshipType = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart";
			SerializeRelationShip(memoryStream, key, relationshipType, targetPath);
		}
		m_writer.WriteEndElement();
		if (!IsWord2003ML)
		{
			m_writer.Flush();
			m_archive.AddItem("word\\_rels\\comments.xml.rels", memoryStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
	}

	private void SerializeDocumentRelations()
	{
		MemoryStream memoryStream = new MemoryStream();
		if (!IsWord2003ML)
		{
			m_writer = CreateWriter(memoryStream);
		}
		m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
		SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles", "styles.xml");
		SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings", "settings.xml");
		SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme", "theme/theme1.xml");
		if (HasNumbering)
		{
			SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering", "numbering.xml");
		}
		if (m_hasComment)
		{
			SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments", "comments.xml");
		}
		if (m_hasComment && m_document.CommentsEx.Count > 0)
		{
			SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.microsoft.com/office/2011/relationships/commentsExtended", "commentsExtended.xml");
		}
		if (HasEndnote)
		{
			SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/endnotes", "endnotes.xml");
		}
		if (HasFootnote)
		{
			SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes", "footnotes.xml");
		}
		SerializeHeaderFooterRelations(memoryStream);
		SerializeChartRelation(memoryStream);
		if (HasFontTable)
		{
			SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable", "fontTable.xml");
		}
		SerializeIncludePictureUrlRelations(memoryStream, InclPicFieldUrl);
		SerializeImagesRelations(memoryStream, DocumentImages);
		SerializeSvgImageRelation();
		SerializeExternalLinkImages();
		if (AltChunkTargets.Count > 0 && !IsWord2003ML)
		{
			SerializeAltChunkRelations(memoryStream, AltChunkTargets);
		}
		if (HasHyperlink && HyperlinkTargets.Count > 0)
		{
			SerializeHyperlinkRelations(memoryStream, HyperlinkTargets);
		}
		if (m_hasOleObject)
		{
			AddOLEToZip(m_document.DocxPackage);
		}
		SerilaizeXmlItemsRelations(memoryStream, XmlItemsRelations);
		if (m_document.CustomXMLContainer != null)
		{
			string[] array = new string[m_document.CustomXMLContainer.XmlParts.Count];
			m_document.CustomXMLContainer.XmlParts.Keys.CopyTo(array, 0);
			for (int i = 0; i < array.Length; i++)
			{
				string name = m_document.CustomXMLContainer.XmlParts[array[i]].Name;
				if (!string.IsNullOrEmpty(name) && !name.Contains("Props"))
				{
					SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml", "../customXml/" + name);
				}
			}
		}
		if (m_document.CustomXmlPartContainer != null)
		{
			foreach (Part value in m_document.CustomXmlPartContainer.XmlParts.Values)
			{
				string name2 = value.Name;
				if (!string.IsNullOrEmpty(name2) && !name2.Contains("Props"))
				{
					SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml", "../customXml/" + name2);
				}
			}
		}
		if (m_document.HasMacros && IsMacroEnabled)
		{
			SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.microsoft.com/office/2006/relationships/vbaProject", "vbaProject.bin");
		}
		if (m_document.DocxPackage != null && m_document.DocxPackage.FindPartContainer("word/").XmlPartContainers.ContainsKey("glossary/"))
		{
			SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/glossaryDocument", "glossary/document.xml");
		}
		m_writer.WriteEndElement();
		if (!IsWord2003ML)
		{
			m_writer.Flush();
			m_archive.AddItem("word\\_rels\\document.xml.rels", memoryStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
	}

	private void SerializeNumberingsRelation()
	{
		MemoryStream memoryStream = new MemoryStream();
		if (!IsWord2003ML)
		{
			m_writer = CreateWriter(memoryStream);
		}
		m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
		SerializeImagesRelations(memoryStream, PictureBullets);
		m_writer.WriteEndElement();
		if (!IsWord2003ML)
		{
			m_writer.Flush();
			m_archive.AddItem("word\\_rels\\numbering.xml.rels", memoryStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
	}

	private void SerializeAltChunkRelations(MemoryStream stream, Dictionary<string, string> altChunkCollection)
	{
		foreach (string key in altChunkCollection.Keys)
		{
			SerializeRelationShip(stream, key, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/aFChunk", "/" + altChunkCollection[key]);
		}
	}

	private void SerializeHyperlinkRelations(MemoryStream stream, Dictionary<string, string> hyperlinkCollection)
	{
		if (hyperlinkCollection == null)
		{
			return;
		}
		string empty = string.Empty;
		foreach (string key in hyperlinkCollection.Keys)
		{
			empty = hyperlinkCollection[key];
			SerializeRelationShip(key, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink", empty);
		}
	}

	private void SerializeSvgImageRelation()
	{
		if (SvgDataCollection.Count == 0)
		{
			return;
		}
		int num = 1;
		foreach (string key in SvgDataCollection.Keys)
		{
			string text = "word\\media\\image" + num + ".svg";
			SerializeRelationShip(SvgDataCollection[key], key, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", text.Replace("word\\", ""));
			if (m_archive.Find(text.Replace("\\", "/")) == -1)
			{
				m_archive.AddItem(text, SvgDataCollection[key], bControlStream: false, DocGen.Compression.FileAttributes.Archive);
			}
			num++;
		}
	}

	private void SerializeHFSvgImageRelation(Dictionary<string, Stream> images)
	{
		if (images.Count == 0)
		{
			return;
		}
		if (m_hfSvgImageIndex == -1)
		{
			m_hfSvgImageIndex = SvgDataCollection.Count + 1;
		}
		foreach (string key in images.Keys)
		{
			string text = "word\\media\\image" + m_hfSvgImageIndex + ".svg";
			SerializeRelationShip(images[key], key, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", text.Replace("word\\", ""));
			if (m_archive.Find(text.Replace("\\", "/")) == -1)
			{
				m_archive.AddItem(text, images[key], bControlStream: false, DocGen.Compression.FileAttributes.Archive);
			}
			m_hfSvgImageIndex++;
		}
	}

	private void SerializeImagesRelations(MemoryStream stream, Dictionary<string, ImageRecord> imageCollection)
	{
		if (imageCollection == null)
		{
			return;
		}
		string empty = string.Empty;
		foreach (string key in imageCollection.Keys)
		{
			ImageRecord imageRecord = imageCollection[key];
			if (imageRecord == null)
			{
				empty = "word\\media\\image0.jpeg";
				SerializeRelationShip(stream, key, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships/image" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", empty.Replace("word\\", ""));
				continue;
			}
			if (imageRecord.ImageBytes.Length == 0)
			{
				SerializeRelationShip(stream, key, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships/image" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", "NULL");
				continue;
			}
			string fileExtension = GetFileExtension(imageRecord);
			empty = "word\\media\\image" + imageRecord.ImageId + fileExtension;
			SerializeRelationShip(stream, key, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships/image" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", empty.Replace("word\\", ""));
			if (m_archive.Find(empty.Replace("\\", "/")) == -1)
			{
				m_archive.AddItem(empty, new MemoryStream(imageRecord.ImageBytes), bControlStream: false, DocGen.Compression.FileAttributes.Archive);
			}
		}
	}

	private void SerializeImagesRelations(MemoryStream stream, Dictionary<string, ImageRecord> imageCollection, ParagraphItem item)
	{
		if (imageCollection == null)
		{
			return;
		}
		string empty = string.Empty;
		foreach (string key in imageCollection.Keys)
		{
			ImageRecord imageRecord = imageCollection[key];
			if (imageRecord == null)
			{
				empty = "word\\media\\image0.jpeg";
				SerializeRelationShip(stream, key, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships/image" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", empty.Replace("word\\", ""));
				continue;
			}
			if (imageRecord.ImageBytes.Length == 0)
			{
				SerializeRelationShip(stream, key, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships/image" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", "NULL");
				continue;
			}
			string fileExtension = GetFileExtension(imageRecord);
			empty = "word\\media\\image" + imageRecord.ImageId + fileExtension;
			if (m_archive.Find(empty.Replace("\\", "/")) == -1)
			{
				m_archive.AddItem(empty, new MemoryStream(imageRecord.ImageBytes), bControlStream: false, DocGen.Compression.FileAttributes.Archive);
			}
		}
	}

	private void SerializeExternalLinkImages()
	{
		_ = string.Empty;
		foreach (string key in ExternalLinkImages.Keys)
		{
			SerializeRelationShip(key, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships/image" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", ExternalLinkImages[key]);
		}
	}

	private void SerializeHeaderFooterRelations(MemoryStream docRelStream)
	{
		SerializeHFRelation(HeaderFooterType.EvenFooter, docRelStream);
		SerializeHFRelation(HeaderFooterType.EvenHeader, docRelStream);
		SerializeHFRelation(HeaderFooterType.FirstPageFooter, docRelStream);
		SerializeHFRelation(HeaderFooterType.FirstPageHeader, docRelStream);
		SerializeHFRelation(HeaderFooterType.OddFooter, docRelStream);
		SerializeHFRelation(HeaderFooterType.OddHeader, docRelStream);
	}

	private void SerializeHFRelation(HeaderFooterType hfType, MemoryStream stream)
	{
		string empty = string.Empty;
		if (!HeadersFooters.ContainsKey(hfType))
		{
			return;
		}
		foreach (string key in HeadersFooters[hfType].Keys)
		{
			string relationshipType;
			if (hfType == HeaderFooterType.EvenHeader || hfType == HeaderFooterType.FirstPageHeader || hfType == HeaderFooterType.OddHeader)
			{
				empty = "header" + key.Replace("rId", "") + ".xml";
				relationshipType = (IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships/header" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/header");
			}
			else
			{
				empty = "footer" + key.Replace("rId", "") + ".xml";
				relationshipType = (IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships/footer" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer");
			}
			SerializeRelationShip(stream, key, relationshipType, empty);
		}
	}

	private void SerializeIncludePictureUrlRelations(MemoryStream stream, Dictionary<string, string> InclPicFieldUrl)
	{
		if (InclPicFieldUrl == null || InclPicFieldUrl.Count <= 0)
		{
			return;
		}
		foreach (string key in InclPicFieldUrl.Keys)
		{
			string targetPath = InclPicFieldUrl[key];
			SerializeRelationShip(stream, key, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships/image" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", targetPath);
		}
	}

	private void SerilaizeXmlItemsRelations(MemoryStream stream, Dictionary<string, DictionaryEntry> xmlItemsRels)
	{
		if (xmlItemsRels.Count == 0)
		{
			return;
		}
		string empty = string.Empty;
		string empty2 = string.Empty;
		foreach (string key in xmlItemsRels.Keys)
		{
			DictionaryEntry dictionaryEntry = xmlItemsRels[key];
			empty2 = (string)dictionaryEntry.Key;
			empty = (string)dictionaryEntry.Value;
			SerializeRelationShip(stream, key, empty2, empty);
		}
	}

	private void AddOLEToZip(Dictionary<string, Stream> OleContainers)
	{
		string text = null;
		if (OleContainers.Count <= 0)
		{
			return;
		}
		foreach (KeyValuePair<string, Stream> OleContainer in OleContainers)
		{
			text = "word\\embeddings\\" + OleContainer.Key;
			if (!IsWord2003ML)
			{
				m_archive.AddItem(text, OleContainer.Value, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
			}
		}
	}

	private void AddOLEToZip(Package wordPackage)
	{
		string text = null;
		if (OleContainers.Count > 0)
		{
			foreach (KeyValuePair<string, Stream> oleContainer in OleContainers)
			{
				text = "word\\embeddings\\" + oleContainer.Key;
				if (!IsWord2003ML)
				{
					m_archive.AddItem(text, oleContainer.Value, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
				}
			}
		}
		AddToZip(wordPackage, "word/embeddings/");
	}

	private void SerializeBackground(Background background)
	{
		if (background.Type == BackgroundType.NoBackground)
		{
			return;
		}
		m_writer.WriteStartElement("background", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		switch (background.Type)
		{
		case BackgroundType.Color:
			m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode(background.Color));
			break;
		case BackgroundType.Gradient:
		{
			BackgroundGradient gradient = background.Gradient;
			m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode(gradient.Color1));
			SerializeGradient(gradient);
			break;
		}
		case BackgroundType.Picture:
		case BackgroundType.Texture:
			if (background.ImageBytes != null)
			{
				m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode(background.Color));
				m_writer.WriteStartElement("background", "urn:schemas-microsoft-com:vml");
				m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
				WPicture wPicture = new WPicture(background.Document);
				wPicture.LoadImage(background.ImageBytes);
				UpdateImages(wPicture);
				string value = AddImageRelation(DocumentImages, wPicture.ImageRecord, IsNeedToSkipImageRelation(wPicture));
				m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", value);
				m_writer.WriteAttributeString("title", "urn:schemas-microsoft-com:office:office", "");
				m_writer.WriteAttributeString("color2", "#" + GetRGBCode(background.Color));
				m_writer.WriteAttributeString("type", (background.Type == BackgroundType.Picture) ? "frame" : "tile");
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
			break;
		}
		m_writer.WriteEndElement();
	}

	private bool IsNeedToSkipImageRelation(WPicture pic)
	{
		if (pic.ImageRecord == null && pic.OPictureHRef == null)
		{
			return true;
		}
		if (pic.OPictureHRef != null)
		{
			string oPictureHRef = pic.OPictureHRef;
			int num = oPictureHRef.LastIndexOf('/');
			oPictureHRef = oPictureHRef.Substring(num + 1, oPictureHRef.Length - (num + 1));
			if (oPictureHRef.ToLower() == "null")
			{
				return true;
			}
		}
		return false;
	}

	private void SerializeGradient(BackgroundGradient gradient)
	{
		m_writer.WriteStartElement("background", "urn:schemas-microsoft-com:vml");
		if (gradient.Color1 != Color.White)
		{
			m_writer.WriteAttributeString("fillcolor", "#" + GetRGBCode(gradient.Color1));
		}
		m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
		SerializeGradientColor(gradient);
		SerializeGradientShadings(gradient);
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeGradientShadings(BackgroundGradient gradient)
	{
		if (gradient.ShadingStyle != 0)
		{
			switch (gradient.ShadingStyle)
			{
			case GradientShadingStyle.Vertical:
				m_writer.WriteAttributeString("angle", "-90");
				break;
			case GradientShadingStyle.DiagonalUp:
				m_writer.WriteAttributeString("angle", "-135");
				break;
			case GradientShadingStyle.DiagonalDown:
			case GradientShadingStyle.FromCorner:
			case GradientShadingStyle.FromCenter:
				m_writer.WriteAttributeString("angle", "-45");
				break;
			}
		}
		m_writer.WriteAttributeString("method", "linear sigma");
		if (gradient.ShadingStyle == GradientShadingStyle.FromCorner)
		{
			m_writer.WriteAttributeString("focus", "100%");
		}
		else if (gradient.ShadingVariant == GradientShadingVariant.ShadingMiddle)
		{
			m_writer.WriteAttributeString("focus", "50%");
		}
		else if (gradient.ShadingVariant == GradientShadingVariant.ShadingOut)
		{
			m_writer.WriteAttributeString("focus", "-50%");
		}
		else if (gradient.ShadingVariant == GradientShadingVariant.ShadingUp)
		{
			m_writer.WriteAttributeString("focus", "100%");
		}
		if (gradient.ShadingStyle == GradientShadingStyle.FromCenter)
		{
			m_writer.WriteAttributeString("type", "gradientRadial");
		}
		else
		{
			m_writer.WriteAttributeString("type", "gradient");
		}
		if ((gradient.ShadingStyle == GradientShadingStyle.FromCorner && gradient.ShadingVariant != 0) || gradient.ShadingStyle == GradientShadingStyle.FromCenter)
		{
			if (gradient.ShadingStyle == GradientShadingStyle.FromCorner)
			{
				if (gradient.ShadingVariant == GradientShadingVariant.ShadingDown)
				{
					m_writer.WriteAttributeString("focusposition", "1");
				}
				else if (gradient.ShadingVariant == GradientShadingVariant.ShadingOut)
				{
					m_writer.WriteAttributeString("focusposition", ",1");
				}
				else if (gradient.ShadingVariant == GradientShadingVariant.ShadingMiddle)
				{
					m_writer.WriteAttributeString("focusposition", "1,1");
				}
			}
			else
			{
				m_writer.WriteAttributeString("focusposition", ".5,.5");
			}
			m_writer.WriteAttributeString("focussize", "");
		}
		if (gradient.ShadingStyle == GradientShadingStyle.FromCorner || (gradient.ShadingStyle == GradientShadingStyle.FromCenter && gradient.ShadingVariant == GradientShadingVariant.ShadingDown))
		{
			m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:office:office");
			m_writer.WriteAttributeString("ext", "view");
			m_writer.WriteAttributeString("type", "gradientCenter");
			m_writer.WriteEndElement();
		}
	}

	private void SerializeGradientColor(BackgroundGradient gradient)
	{
		if (!(gradient.Color2 != Color.White))
		{
			return;
		}
		if (gradient.Color2.Name[0] == 'e')
		{
			int num = int.Parse(gradient.Color2.Name.Substring(6), NumberStyles.HexNumber);
			if (gradient.Color2.Name[5] == '1')
			{
				m_writer.WriteAttributeString("color2", "fill darken(" + num + ")");
			}
			else
			{
				m_writer.WriteAttributeString("color2", "fill lighten(" + num + ")");
			}
		}
		else
		{
			m_writer.WriteAttributeString("color2", "#" + GetRGBCode(gradient.Color2));
		}
	}

	private void UpdateImages(WPicture pic)
	{
		if (pic.IsMetaFile)
		{
			m_hasMetafiles = true;
		}
		else
		{
			m_hasImages = true;
		}
	}

	private void SerializeDocumentBody()
	{
		if (m_document.Sections.Count == 0)
		{
			throw new Exception("There are no sections present in the document");
		}
		m_writer.WriteStartElement("body", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		foreach (WSection section in m_document.Sections)
		{
			SerializeSection(section);
		}
		m_writer.WriteEndElement();
	}

	private void SerializeSection(WSection section)
	{
		bool flag = false;
		if (section.NextSibling == null)
		{
			flag = true;
		}
		section.AddEmptyParagraph();
		SerializeBodyItems(section.Body.Items, flag);
		if (flag)
		{
			SerializeSectionProperties(section, isTrackrevision: false);
		}
	}

	private void SerializeBodyItems(BodyItemCollection bodyItemCollection, bool isLastSection)
	{
		for (int i = 0; i < bodyItemCollection.Count; i++)
		{
			SerializeBodyItem(bodyItemCollection[i], isLastSection);
		}
	}

	private void SerializeBodyItem(TextBodyItem item, bool isLastSection)
	{
		if (item == null)
		{
			throw new ArgumentException("BodyItem should not be null");
		}
		switch (item.EntityType)
		{
		case EntityType.Paragraph:
			SerializeParagraph(item as WParagraph, isLastSection);
			break;
		case EntityType.Table:
		{
			WTable wTable = item as WTable;
			{
				foreach (WTableRow row in wTable.Rows)
				{
					if (row.Cells.Count > 0)
					{
						SerializeTable(wTable);
						break;
					}
				}
				break;
			}
		}
		case EntityType.BlockContentControl:
			SerializeStructureDocumentTagBlock(item as BlockContentControl);
			break;
		case EntityType.AlternateChunk:
			SerializeAlternateChunk(item as AlternateChunk);
			if ((item as AlternateChunk).IsParagraphItem)
			{
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
			break;
		}
	}

	private void SerializeStructureDocumentTagInline(InlineContentControl sdTagInline)
	{
		if (sdTagInline != null)
		{
			if (sdTagInline.ParagraphItems.Count != 0 && sdTagInline.ParagraphItems[0].RevisionsInternal.Count != 0 && sdTagInline.IsAllItemSameRevision())
			{
				SerializeRevisionStart(sdTagInline.ParagraphItems[0]);
			}
			m_writer.WriteStartElement("sdt", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeSDTProperties(sdTagInline.ContentControlProperties);
			if (sdTagInline.BreakCharacterFormat != null)
			{
				m_writer.WriteStartElement("sdtEndPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				SerializeCharacterFormat(sdTagInline.BreakCharacterFormat);
				m_writer.WriteEndElement();
			}
			SerializeSDTContentInline(sdTagInline.ParagraphItems);
			m_writer.WriteEndElement();
		}
	}

	private void SerializeSDTContentInline(ParagraphItemCollection paraItems)
	{
		m_writer.WriteStartElement("sdtContent", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		for (int i = 0; i < paraItems.Count; i++)
		{
			SerializeParagraphItem(paraItems[i], isFromCompression: false);
		}
		m_writer.WriteEndElement();
	}

	private void UpdateAlternateChunkRelation(Entity entity, AlternateChunk altChunk)
	{
		entity = altChunk.GetOwnerTextBody(entity);
		if (entity is WComment && !CommentAlternateChunks.ContainsKey(altChunk.TargetId))
		{
			CommentAlternateChunks.Add(altChunk.TargetId, altChunk.ContentPath);
		}
		else if (entity is WFootnote)
		{
			if ((entity as WFootnote).FootnoteType == FootnoteType.Footnote && !FootnoteAlternateChunks.ContainsKey(altChunk.TargetId))
			{
				FootnoteAlternateChunks.Add(altChunk.TargetId, altChunk.ContentPath);
			}
			else if (!EndnoteAlternateChunks.ContainsKey(altChunk.TargetId))
			{
				EndnoteAlternateChunks.Add(altChunk.TargetId, altChunk.ContentPath);
			}
		}
		else if (entity is HeaderFooter)
		{
			string key = string.Empty;
			foreach (HeaderFooterType key2 in m_headerFooterColl.Keys)
			{
				Dictionary<string, HeaderFooter> dictionary = m_headerFooterColl[key2];
				foreach (string key3 in dictionary.Keys)
				{
					if (dictionary[key3] == entity as HeaderFooter)
					{
						key = key3;
					}
				}
			}
			if (HeaderFooterAlternateChunks.ContainsKey(key))
			{
				Dictionary<string, string> dictionary2 = m_headerFooterAlternateChunks[key];
				if (!dictionary2.ContainsKey(altChunk.TargetId))
				{
					dictionary2.Add(altChunk.TargetId, altChunk.ContentPath);
				}
			}
			else
			{
				Dictionary<string, string> dictionary2 = new Dictionary<string, string>();
				dictionary2.Add(altChunk.TargetId, altChunk.ContentPath);
				HeaderFooterAlternateChunks.Add(key, dictionary2);
			}
		}
		else if (!AltChunkTargets.ContainsKey(altChunk.TargetId))
		{
			AltChunkTargets.Add(altChunk.TargetId, altChunk.ContentPath);
		}
	}

	private void SerializeAlternateChunk(AlternateChunk altChunk)
	{
		SerializeBeforeBookmarks(altChunk);
		UpdateAlternateChunkRelation(altChunk.OwnerTextBody, altChunk);
		if (!AltChunkContentTypes.ContainsKey(altChunk.ContentExtension))
		{
			AltChunkContentTypes.Add(altChunk.ContentExtension, altChunk.ContentType);
		}
		m_writer.WriteStartElement("w", "altChunk", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("r", "id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", altChunk.TargetId);
		m_writer.WriteStartElement("w", "altChunkPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteStartElement("w", "matchSrc", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if ((altChunk.ImportOption & ImportOptions.KeepSourceFormatting) != 0)
		{
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "true");
		}
		else
		{
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		SerializeAfterBookmarks();
	}

	private void SerializeBeforeBookmarks(AlternateChunk altChunk)
	{
		if (altChunk.AltChunkBookmarks.Count <= 0)
		{
			return;
		}
		foreach (Entity altChunkBookmark in altChunk.AltChunkBookmarks)
		{
			if (altChunkBookmark is BookmarkStart)
			{
				SerializeBookmarkStart(altChunkBookmark as BookmarkStart);
			}
			else if (altChunkBookmark is BookmarkEnd && !(altChunkBookmark as BookmarkEnd).IsAfterParagraphMark)
			{
				SerializeBookmarkEnd(altChunkBookmark as BookmarkEnd);
			}
			else
			{
				altChunkAfterBookmarks.Add(altChunkBookmark);
			}
		}
	}

	private void SerializeAfterBookmarks()
	{
		if (altChunkAfterBookmarks.Count <= 0)
		{
			return;
		}
		foreach (Entity altChunkAfterBookmark in altChunkAfterBookmarks)
		{
			if (altChunkAfterBookmark is BookmarkEnd)
			{
				(altChunkAfterBookmark as BookmarkEnd).IsAfterParagraphMark = false;
				SerializeBookmarkEnd(altChunkAfterBookmark as BookmarkEnd);
			}
		}
		altChunkAfterBookmarks.Clear();
	}

	private void SerializeStructureDocumentTagBlock(BlockContentControl sdTagBlock)
	{
		if (sdTagBlock != null)
		{
			m_writer.WriteStartElement("sdt", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeSDTProperties(sdTagBlock.ContentControlProperties);
			if (sdTagBlock.BreakCharacterFormat != null)
			{
				m_writer.WriteStartElement("sdtEndPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				SerializeCharacterFormat(sdTagBlock.BreakCharacterFormat);
				m_writer.WriteEndElement();
			}
			if (sdTagBlock.TextBody != null)
			{
				SerializeSDTContent(sdTagBlock.TextBody);
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeSDTProperties(ContentControlProperties properties)
	{
		if (properties != null)
		{
			m_writer.WriteStartElement("sdtPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (properties.CharacterFormat != null)
			{
				SerializeCharacterFormat(properties.CharacterFormat);
			}
			if (properties.HasKey(0))
			{
				m_writer.WriteStartElement("appearance", "http://schemas.microsoft.com/office/word/2012/wordml");
				m_writer.WriteAttributeString("w15", "val", "http://schemas.microsoft.com/office/word/2012/wordml", properties.Appearance.ToString().ToLower());
				m_writer.WriteEndElement();
			}
			if (properties.HasKey(1))
			{
				m_writer.WriteStartElement("color", "http://schemas.microsoft.com/office/word/2012/wordml");
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode(properties.Color));
				m_writer.WriteEndElement();
			}
			if (!string.IsNullOrEmpty(properties.Title))
			{
				m_writer.WriteStartElement("alias", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", properties.Title);
				m_writer.WriteEndElement();
			}
			if (!string.IsNullOrEmpty(properties.Tag))
			{
				m_writer.WriteStartElement("tag", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", properties.Tag);
				m_writer.WriteEndElement();
			}
			if (!string.IsNullOrEmpty(properties.ID))
			{
				m_writer.WriteStartElement("id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", properties.ID);
				m_writer.WriteEndElement();
			}
			if (!string.IsNullOrEmpty(properties.PlaceHolderDocPartId))
			{
				m_writer.WriteStartElement("placeholder", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteStartElement("docPart", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", properties.PlaceHolderDocPartId);
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
			if (properties.HasKey(7) || properties.HasKey(8))
			{
				SerializeSDTLockSetting(properties);
			}
			SerializeSDTType(properties);
			if (properties.HasKey(11) && properties.HasPlaceHolderText)
			{
				m_writer.WriteStartElement("showingPlcHdr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
			}
			if (properties.HasKey(9) && properties.IsTemporary)
			{
				m_writer.WriteStartElement("temporary", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
			}
			if (properties.Bibliograph)
			{
				m_writer.WriteStartElement("bibliography", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
			}
			if (properties.Citation)
			{
				m_writer.WriteStartElement("citation", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
			}
			if (properties.Type == ContentControlType.Date)
			{
				SerializeSDTDate(properties);
			}
			if (properties.XmlMapping.XPath != null && properties.Type != 0)
			{
				SerializeSDTDataBinding(properties.XmlMapping);
			}
			if (properties.DocPartObj != null)
			{
				m_writer.WriteStartElement("docPartObj", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				SerializeDocPartItem(properties.DocPartObj);
				m_writer.WriteEndElement();
			}
			if (properties.DocPartList != null)
			{
				m_writer.WriteStartElement("docPartList", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				SerializeDocPartItem(properties.DocPartList);
				m_writer.WriteEndElement();
			}
			switch (properties.ContentRepeatingType)
			{
			case ContentRepeatingType.RepeatingSection:
				m_writer.WriteStartElement("repeatingSection", "http://schemas.microsoft.com/office/word/2012/wordml");
				m_writer.WriteEndElement();
				break;
			case ContentRepeatingType.RepeatingSectionItem:
				m_writer.WriteStartElement("repeatingSectionItem", "http://schemas.microsoft.com/office/word/2012/wordml");
				m_writer.WriteEndElement();
				break;
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeDocPartItem(DocPartItem docPartItem)
	{
		if (docPartItem.DocPartGallery != null)
		{
			m_writer.WriteStartElement("docPartGallery", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", docPartItem.DocPartGallery);
			m_writer.WriteEndElement();
		}
		if (docPartItem.DocPartCategory != null)
		{
			m_writer.WriteStartElement("docPartCategory", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", docPartItem.DocPartCategory);
			m_writer.WriteEndElement();
		}
		if (docPartItem.IsDocPartUnique)
		{
			m_writer.WriteStartElement("docPartUnique", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
	}

	private void SerializeSDTDataBinding(XmlMapping dataBinding)
	{
		m_writer.WriteStartElement("dataBinding", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (dataBinding.PrefixMapping != null && dataBinding.PrefixMapping != string.Empty)
		{
			m_writer.WriteAttributeString("w", "prefixMappings", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dataBinding.PrefixMapping);
		}
		if (dataBinding.XPath != null)
		{
			m_writer.WriteAttributeString("w", "xpath", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dataBinding.XPath);
		}
		if (dataBinding.StoreItemID != null && dataBinding.StoreItemID != string.Empty)
		{
			m_writer.WriteAttributeString("w", "storeItemID", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dataBinding.StoreItemID);
		}
		m_writer.WriteEndElement();
	}

	private void SerializeSDTLockSetting(ContentControlProperties properties)
	{
		m_writer.WriteStartElement("lock", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (properties.HasKey(8) && properties.HasKey(7) && properties.LockContents && properties.LockContentControl)
		{
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "sdtContentLocked");
		}
		else if (properties.HasKey(7) && properties.LockContentControl)
		{
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "sdtLocked");
		}
		else if (properties.HasKey(8) && properties.LockContents)
		{
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "contentLocked");
		}
		m_writer.WriteEndElement();
	}

	private void SerializeSDTType(ContentControlProperties properties)
	{
		switch (properties.Type)
		{
		case ContentControlType.Text:
			m_writer.WriteStartElement("text", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (properties.HasKey(10) && properties.Multiline)
			{
				m_writer.WriteAttributeString("multiLine", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
			}
			m_writer.WriteEndElement();
			break;
		case ContentControlType.Picture:
			m_writer.WriteStartElement("picture", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
			break;
		case ContentControlType.ComboBox:
			m_writer.WriteStartElement("comboBox", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeSDTDropDownList(properties.ContentControlListItems);
			m_writer.WriteEndElement();
			break;
		case ContentControlType.DropDownList:
			m_writer.WriteStartElement("dropDownList", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeSDTDropDownList(properties.ContentControlListItems);
			m_writer.WriteEndElement();
			break;
		case ContentControlType.RichText:
			m_writer.WriteStartElement("richText", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
			break;
		case ContentControlType.CheckBox:
			m_writer.WriteStartElement("checkbox", "http://schemas.microsoft.com/office/word/2010/wordml");
			SerializeSDTCheckBox(properties);
			m_writer.WriteEndElement();
			break;
		case ContentControlType.RepeatingSection:
			m_writer.WriteStartElement("repeatingSection", "http://schemas.microsoft.com/office/word/2012/wordml");
			m_writer.WriteEndElement();
			break;
		case ContentControlType.Group:
			m_writer.WriteStartElement("group", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
			break;
		case ContentControlType.BuildingBlockGallery:
		case ContentControlType.Date:
			break;
		}
	}

	private void SerializeSDTCheckBox(ContentControlProperties properties)
	{
		if (properties == null || properties.Type != ContentControlType.CheckBox)
		{
			return;
		}
		if (properties.HasKey(2))
		{
			m_writer.WriteStartElement("checked", "http://schemas.microsoft.com/office/word/2010/wordml");
			if (properties.IsChecked)
			{
				m_writer.WriteAttributeString("val", "http://schemas.microsoft.com/office/word/2010/wordml", "1");
			}
			else
			{
				m_writer.WriteAttributeString("val", "http://schemas.microsoft.com/office/word/2010/wordml", "0");
			}
			m_writer.WriteEndElement();
		}
		if (properties.CheckedState != null && properties.CheckedState.Value != null && properties.CheckedState.Font != null)
		{
			m_writer.WriteStartElement("checkedState", "http://schemas.microsoft.com/office/word/2010/wordml");
			string text = string.Empty;
			string value = properties.CheckedState.Value;
			foreach (char c in value)
			{
				string text2 = text;
				int num = c;
				text = text2 + num.ToString("X");
			}
			m_writer.WriteAttributeString("val", "http://schemas.microsoft.com/office/word/2010/wordml", text);
			m_writer.WriteAttributeString("font", "http://schemas.microsoft.com/office/word/2010/wordml", properties.CheckedState.Font);
			m_writer.WriteEndElement();
		}
		if (properties.UncheckedState != null && properties.UncheckedState.Value != null && properties.UncheckedState.Font != null)
		{
			m_writer.WriteStartElement("uncheckedState", "http://schemas.microsoft.com/office/word/2010/wordml");
			string text3 = string.Empty;
			string value = properties.UncheckedState.Value;
			foreach (char c2 in value)
			{
				string text4 = text3;
				int num = c2;
				text3 = text4 + num.ToString("X");
			}
			m_writer.WriteAttributeString("val", "http://schemas.microsoft.com/office/word/2010/wordml", text3);
			m_writer.WriteAttributeString("font", "http://schemas.microsoft.com/office/word/2010/wordml", properties.UncheckedState.Font);
			m_writer.WriteEndElement();
		}
	}

	private void SerializeSDTDropDownList(ContentControlListItems dropDownList)
	{
		if (dropDownList.LastValue != null && dropDownList.LastValue != string.Empty)
		{
			m_writer.WriteAttributeString("w", "lastValue", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dropDownList.LastValue);
		}
		foreach (ContentControlListItem item in (IEnumerable)dropDownList)
		{
			m_writer.WriteStartElement("listItem", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (item.DisplayText != null)
			{
				m_writer.WriteAttributeString("w", "displayText", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", item.DisplayText);
			}
			if (item.Value != null)
			{
				m_writer.WriteAttributeString("w", "value", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", item.Value);
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeSDTDate(ContentControlProperties properties)
	{
		m_writer.WriteStartElement("date", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (properties.FullDate != null && properties.FullDate != string.Empty)
		{
			m_writer.WriteAttributeString("w", "fullDate", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", properties.FullDate);
		}
		if (properties.DateDisplayFormat != null && properties.DateDisplayFormat != string.Empty)
		{
			m_writer.WriteStartElement("dateFormat", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", properties.DateDisplayFormat);
			m_writer.WriteEndElement();
		}
		if (properties.HasKey(5) && Enum.IsDefined(typeof(LocaleIDs), (int)properties.DateDisplayLocale))
		{
			m_writer.WriteStartElement("lid", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			string value = properties.DateDisplayLocale.ToString().Replace('_', '-');
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value);
			m_writer.WriteEndElement();
		}
		else
		{
			SerializeDocxProps(properties.XmlProps, "localeId");
		}
		if (properties.HasKey(3))
		{
			m_writer.WriteStartElement("calendar", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetCalenderType(properties.DateCalendarType));
			m_writer.WriteEndElement();
		}
		if (properties.HasKey(6))
		{
			m_writer.WriteStartElement("storeMappedDataAs", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetDateStorageType(properties.DateStorageFormat));
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private string GetDateStorageType(ContentControlDateStorageFormat type)
	{
		return type switch
		{
			ContentControlDateStorageFormat.DateStorageDate => "date", 
			ContentControlDateStorageFormat.DateStorageText => "text", 
			_ => "dateTime", 
		};
	}

	private string GetCalenderType(CalendarType type)
	{
		return type switch
		{
			CalendarType.Gregorian => "gregorian", 
			CalendarType.GregorianArabic => "gregorianArabic", 
			CalendarType.GregorianMiddleEastFrench => "gregorianMeFrench", 
			CalendarType.GregorianEnglish => "gregorianUs", 
			CalendarType.GregorianTransliteratedEnglish => "gregorianXlitEnglish", 
			CalendarType.GregorianTransliteratedFrench => "gregorianXlitFrench", 
			CalendarType.Hebrew => "hebrew", 
			CalendarType.Hijri => "hijri", 
			CalendarType.Japan => "japan", 
			CalendarType.Korean => "korea", 
			CalendarType.Saka => "saka", 
			CalendarType.Taiwan => "taiwan", 
			CalendarType.Thai => "thai", 
			_ => null, 
		};
	}

	private void SerializeSDTContent(WTextBody body)
	{
		m_writer.WriteStartElement("sdtContent", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		TextBodyItem textBodyItem = null;
		for (int i = 0; i < body.Items.Count; i++)
		{
			textBodyItem = body.Items[i];
			SerializeBodyItem(textBodyItem, isLastSection: false);
		}
		m_writer.WriteEndElement();
	}

	private void SerializeTable(WTable table)
	{
		if (table.Rows.Count > 0)
		{
			table.UpdateGridSpan();
			m_writer.WriteStartElement("tbl", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (table.Rows.Count != 0)
			{
				RowFormat format = (table.DocxTableFormat.HasFormat ? table.DocxTableFormat.Format : table.Rows[0].RowFormat);
				SerializeTableFormat(format, table);
			}
			else
			{
				SerializeTableFormat(table.DocxTableFormat.Format, table);
			}
			SerializeTableGrid(table);
			SerializeTableRows(table.Rows);
			m_writer.WriteEndElement();
			while (BookMarkCollection.Count > 0 && BookMarkCollection[0] is BookmarkEnd && (BookMarkCollection[0] as BookmarkEnd).IsAfterTableMark)
			{
				BookmarkEnd bookmarkEnd = BookMarkCollection[0] as BookmarkEnd;
				bookmarkEnd.IsAfterTableMark = false;
				SerializeBookmarkEnd(bookmarkEnd);
				bookmarkEnd.IsAfterTableMark = true;
				BookMarkCollection.Remove(bookmarkEnd);
			}
			while (EditableRangeCollection.Count > 0 && EditableRangeCollection[0] is EditableRangeEnd && (EditableRangeCollection[0] as EditableRangeEnd).IsAfterTableMark)
			{
				EditableRangeEnd editableRangeEnd = EditableRangeCollection[0] as EditableRangeEnd;
				editableRangeEnd.IsAfterTableMark = false;
				SerializeEditableRangeEnd(editableRangeEnd);
				editableRangeEnd.IsAfterTableMark = true;
				EditableRangeCollection.Remove(editableRangeEnd);
			}
			while (MovingRevisionCollection.Count > 0 && MovingRevisionDetails != null && MovingRevisionCollection[0].IsAfterTableMark)
			{
				SerializeMoveRangeEnd();
			}
		}
	}

	private void SerializeTableRows(WRowCollection rows)
	{
		if (rows.Count <= 0)
		{
			return;
		}
		foreach (WTableRow row in rows)
		{
			if (row.Cells.Count <= 0)
			{
				continue;
			}
			if (row.ContentControl != null)
			{
				m_writer.WriteStartElement("sdt", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				SerializeSDTProperties(row.ContentControl.ContentControlProperties);
				if (row.ContentControl.BreakCharacterFormat != null)
				{
					m_writer.WriteStartElement("sdtEndPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
					SerializeCharacterFormat(row.ContentControl.BreakCharacterFormat);
					m_writer.WriteEndElement();
				}
				m_writer.WriteStartElement("sdtContent", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				SerializeRow(row);
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
			else
			{
				SerializeRow(row);
			}
		}
	}

	private void SerializeRow(WTableRow row)
	{
		m_writer.WriteStartElement("tr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeRowFormat(row);
		SerializeCells(row.Cells);
		m_writer.WriteEndElement();
		while (BookMarkCollection.Count > 0 && BookMarkCollection[0] is BookmarkEnd && (BookMarkCollection[0] as BookmarkEnd).IsAfterRowMark)
		{
			BookmarkEnd bookmarkEnd = BookMarkCollection[0] as BookmarkEnd;
			bookmarkEnd.IsAfterRowMark = false;
			SerializeBookmarkEnd(bookmarkEnd);
			bookmarkEnd.IsAfterRowMark = true;
			BookMarkCollection.Remove(bookmarkEnd);
		}
		while (EditableRangeCollection.Count > 0 && EditableRangeCollection[0] is EditableRangeEnd && (EditableRangeCollection[0] as EditableRangeEnd).IsAfterRowMark)
		{
			EditableRangeEnd editableRangeEnd = EditableRangeCollection[0] as EditableRangeEnd;
			editableRangeEnd.IsAfterRowMark = false;
			SerializeEditableRangeEnd(editableRangeEnd);
			editableRangeEnd.IsAfterRowMark = true;
			EditableRangeCollection.Remove(editableRangeEnd);
		}
		while (MovingRevisionCollection.Count > 0 && MovingRevisionDetails != null && MovingRevisionCollection[0].IsAfterRowMark)
		{
			SerializeMoveRangeEnd();
		}
	}

	private void SerializeCells(WCellCollection cells)
	{
		foreach (WTableCell cell in cells)
		{
			if (cell.ContentControl != null)
			{
				m_writer.WriteStartElement("sdt", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				SerializeSDTProperties(cell.ContentControl.ContentControlProperties);
				if (cell.ContentControl.BreakCharacterFormat != null)
				{
					m_writer.WriteStartElement("sdtEndPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
					SerializeCharacterFormat(cell.ContentControl.BreakCharacterFormat);
					m_writer.WriteEndElement();
				}
				m_writer.WriteStartElement("sdtContent", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				SerializeCell(cell);
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
			else
			{
				SerializeCell(cell);
			}
		}
	}

	private void SerializeCell(WTableCell cell)
	{
		m_writer.WriteStartElement("tc", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeCellFormat(cell.CellFormat);
		if (cell.Items.Count > 0)
		{
			int i = 0;
			TextBodyItem textBodyItem = null;
			for (; i < cell.Items.Count; i++)
			{
				textBodyItem = cell.Items[i];
				if (textBodyItem is WParagraph && i == cell.Items.Count - 1)
				{
					WParagraph wParagraph = textBodyItem as WParagraph;
					if (wParagraph.BreakCharacterFormat.PropertiesHash.Count > 0)
					{
						MergeCharProps(wParagraph.BreakCharacterFormat, cell.CharacterFormat);
					}
				}
				SerializeBodyItem(textBodyItem, isLastSection: false);
			}
			if (cell.Items.LastItem.EntityType == EntityType.Table)
			{
				m_writer.WriteStartElement("p", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
			}
		}
		else
		{
			m_writer.WriteStartElement("p", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteStartElement("pPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteStartElement("pStyle", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "Normal");
			m_writer.WriteEndElement();
			SerializeCharacterFormat(cell.CharacterFormat);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		while (BookMarkCollection.Count > 0 && BookMarkCollection[0] is BookmarkEnd && (BookMarkCollection[0] as BookmarkEnd).IsAfterCellMark)
		{
			BookmarkEnd bookmarkEnd = BookMarkCollection[0] as BookmarkEnd;
			bookmarkEnd.IsAfterCellMark = false;
			SerializeBookmarkEnd(bookmarkEnd);
			bookmarkEnd.IsAfterCellMark = true;
			BookMarkCollection.Remove(bookmarkEnd);
		}
		while (EditableRangeCollection.Count > 0 && EditableRangeCollection[0] is EditableRangeEnd && (EditableRangeCollection[0] as EditableRangeEnd).IsAfterCellMark)
		{
			EditableRangeEnd editableRangeEnd = EditableRangeCollection[0] as EditableRangeEnd;
			editableRangeEnd.IsAfterCellMark = false;
			SerializeEditableRangeEnd(editableRangeEnd);
			editableRangeEnd.IsAfterCellMark = true;
			EditableRangeCollection.Remove(editableRangeEnd);
		}
		while (MovingRevisionCollection.Count > 0 && MovingRevisionDetails != null && MovingRevisionCollection[0].IsAfterCellMark)
		{
			SerializeMoveRangeEnd();
		}
		while (CommentMarkCollection.Count > 0 && CommentMarkCollection[0] is WCommentMark && (CommentMarkCollection[0] as WCommentMark).IsAfterCellMark && (CommentMarkCollection[0] as WCommentMark).Type == CommentMarkType.CommentEnd)
		{
			WCommentMark wCommentMark = CommentMarkCollection[0] as WCommentMark;
			wCommentMark.IsAfterCellMark = false;
			SerializeCommentRangeEnd(m_commentsId[wCommentMark.CommentId], wCommentMark);
			wCommentMark.IsAfterCellMark = true;
			CommentMarkCollection.Remove(wCommentMark);
		}
	}

	private void MergeCharProps(WCharacterFormat ParaBreakCharFormat, WCharacterFormat cellCharacterFormat)
	{
		Dictionary<int, object> propertiesHash = ParaBreakCharFormat.PropertiesHash;
		Dictionary<int, object> propertiesHash2 = cellCharacterFormat.PropertiesHash;
		if (propertiesHash2.Count == 0 || propertiesHash.Count == 0)
		{
			return;
		}
		foreach (KeyValuePair<int, object> item in propertiesHash2)
		{
			if (!propertiesHash.ContainsKey(item.Key))
			{
				propertiesHash.Add(item.Key, item.Value);
			}
		}
	}

	private void SerializeCellFormat(CellFormat cellFormat)
	{
		List<Stream> list = new List<Stream>();
		int i = 0;
		for (int count = cellFormat.XmlProps.Count; i < count; i++)
		{
			list.Add(cellFormat.XmlProps[i]);
		}
		WTableCell wTableCell = cellFormat.OwnerBase as WTableCell;
		RowFormat tableFormat = wTableCell.OwnerRow.OwnerTable.TableFormat;
		RowFormat rowFormat = wTableCell.OwnerRow.RowFormat;
		m_writer.WriteStartElement("tcPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeCnfStyleElement(wTableCell);
		SerializeCellWidth(wTableCell);
		SerializeGridSpan(wTableCell);
		SerializeCellMerge(cellFormat);
		m_writer.WriteStartElement("tcBorders", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeBorders(cellFormat.Borders, 8);
		m_writer.WriteEndElement();
		SerializeCellShading(wTableCell, tableFormat, rowFormat);
		if (cellFormat.HasValue(9))
		{
			m_writer.WriteStartElement("noWrap", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (cellFormat.TextWrap)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
			}
			m_writer.WriteEndElement();
		}
		if (!cellFormat.SamePaddingsAsTable)
		{
			m_writer.WriteStartElement("tcMar", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializePaddings(cellFormat.Paddings);
			m_writer.WriteEndElement();
		}
		SerializeTableCellDirection(cellFormat);
		if (cellFormat.FitText)
		{
			m_writer.WriteStartElement("tcFitText", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (cellFormat.HideMark)
		{
			m_writer.WriteStartElement("hideMark", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (cellFormat.HasValue(2))
		{
			SerializeCellVerticalAlign(cellFormat.VerticalAlignment);
		}
		SerializeDocxProps(list, "hideMark");
		SerializeDocxProps(list, "cellIns");
		SerializeDocxProps(list, "cellDel");
		SerializeDocxProps(list, "cellMerge");
		if (cellFormat.Revisions.Count > 0 && !m_isAlternativeCellFormat)
		{
			foreach (Revision revision in cellFormat.Revisions)
			{
				if (revision.RevisionType != RevisionType.Formatting)
				{
					continue;
				}
				SerializeTrackChangeProps("tcPrChange", revision.Author, revision.Date);
				if (cellFormat.OldPropertiesHash.Count > 0)
				{
					m_isAlternativeCellFormat = true;
					Dictionary<int, object> dictionary = new Dictionary<int, object>(cellFormat.OldPropertiesHash);
					Dictionary<int, object> dictionary2 = new Dictionary<int, object>(cellFormat.PropertiesHash);
					cellFormat.PropertiesHash.Clear();
					cellFormat.OldPropertiesHash.Clear();
					foreach (KeyValuePair<int, object> item in dictionary)
					{
						cellFormat.PropertiesHash[item.Key] = item.Value;
					}
					SerializeCellFormat(cellFormat);
					cellFormat.PropertiesHash.Clear();
					foreach (KeyValuePair<int, object> item2 in dictionary2)
					{
						cellFormat.PropertiesHash[item2.Key] = item2.Value;
					}
					foreach (KeyValuePair<int, object> item3 in dictionary)
					{
						cellFormat.OldPropertiesHash[item3.Key] = item3.Value;
					}
					m_isAlternativeCellFormat = false;
				}
				else
				{
					m_writer.WriteStartElement("tcPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
					m_writer.WriteEndElement();
				}
				m_writer.WriteEndElement();
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializeCellVerticalAlign(VerticalAlignment alignment)
	{
		m_writer.WriteStartElement("vAlign", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		switch (alignment)
		{
		case VerticalAlignment.Top:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "top");
			break;
		case VerticalAlignment.Middle:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "center");
			break;
		case VerticalAlignment.Bottom:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "bottom");
			break;
		}
		m_writer.WriteEndElement();
	}

	private void SerializeTableCellDirection(CellFormat cellFormat)
	{
		if (cellFormat.TextDirection != 0)
		{
			m_writer.WriteStartElement("textDirection", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			switch (cellFormat.TextDirection)
			{
			case TextDirection.Horizontal:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "lrTb");
				break;
			case TextDirection.VerticalBottomToTop:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "btLr");
				break;
			case TextDirection.VerticalTopToBottom:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "tbRl");
				break;
			case TextDirection.HorizontalFarEast:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "lrTbV");
				break;
			case TextDirection.Vertical:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "tbLrV");
				break;
			case TextDirection.VerticalFarEast:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "tbRlV");
				break;
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeCellShading(WTableCell cell, RowFormat tf, RowFormat rf)
	{
		CellFormat cellFormat = cell.CellFormat;
		if (cellFormat.HasValue(4) || cellFormat.HasValue(7))
		{
			m_writer.WriteStartElement("shd", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (cellFormat.BackColor == Color.Empty)
			{
				m_writer.WriteAttributeString("fill", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
			}
			else
			{
				m_writer.WriteAttributeString("fill", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode(cellFormat.BackColor));
			}
			if (cell.ForeColor == Color.Empty)
			{
				m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
			}
			else
			{
				m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode(cell.ForeColor));
			}
			string textureStyle = GetTextureStyle(cell.TextureStyle);
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", textureStyle);
			m_writer.WriteEndElement();
		}
	}

	private void SerializeCellMerge(CellFormat cellFormat)
	{
		if (cellFormat.HorizontalMerge != 0)
		{
			m_writer.WriteStartElement("hMerge", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			switch (cellFormat.HorizontalMerge)
			{
			case CellMerge.Start:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "restart");
				break;
			case CellMerge.Continue:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "continue");
				break;
			}
			m_writer.WriteEndElement();
		}
		if (cellFormat.VerticalMerge != 0)
		{
			m_writer.WriteStartElement("vMerge", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			switch (cellFormat.VerticalMerge)
			{
			case CellMerge.Start:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "restart");
				break;
			case CellMerge.Continue:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "continue");
				break;
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeGridSpan(WTableCell cell)
	{
		int gridSpan = cell.GridSpan;
		if (gridSpan > 1)
		{
			m_writer.WriteStartElement("gridSpan", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", gridSpan.ToString());
			m_writer.WriteEndElement();
		}
	}

	private void SerializeCellWidth(WTableCell cell)
	{
		CellFormat cellFormat = cell.CellFormat;
		if (cellFormat.PreferredWidth.WidthType == FtsWidth.None)
		{
			return;
		}
		m_writer.WriteStartElement("tcW", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (cellFormat.PreferredWidth.WidthType == FtsWidth.Auto)
		{
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
			m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
		}
		else if (cellFormat.PreferredWidth.WidthType == FtsWidth.Percentage)
		{
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "pct");
			int num = (int)Math.Round(cellFormat.PreferredWidth.Width * 50f);
			m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString());
		}
		else if (cellFormat.PreferredWidth.WidthType == FtsWidth.Point)
		{
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
			float num2 = 0f;
			int num3 = 0;
			if (IsStrict)
			{
				num2 = cellFormat.PreferredWidth.Width;
			}
			else
			{
				num3 = (int)Math.Round(cellFormat.PreferredWidth.Width * 20f);
			}
			m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", IsStrict ? (num2 + "pt") : num3.ToString());
		}
		m_writer.WriteEndElement();
	}

	private void SerializeRowFormat(WTableRow row)
	{
		if (row.OwnerTable.Owner != null && !m_isAlternativeRowFormat && (row.OwnerTable.Owner.EntityType == EntityType.Table || row.OwnerTable.Owner.EntityType == EntityType.TableRow || row.HasTblPrEx))
		{
			m_writer.WriteStartElement("tblPrEx", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeTableFormat(row.RowFormat, null);
			m_writer.WriteEndElement();
		}
		RowFormat rowFormat = row.RowFormat;
		List<Stream> list = new List<Stream>();
		int i = 0;
		for (int count = rowFormat.XmlProps.Count; i < count; i++)
		{
			list.Add(rowFormat.XmlProps[i]);
		}
		m_writer.WriteStartElement("trPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeCnfStyleElement(row);
		SerializeDocxProps(list, "divId");
		short gridBefore = rowFormat.GridBefore;
		if (gridBefore > 0)
		{
			m_writer.WriteStartElement("gridBefore", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", gridBefore.ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		short gridAfter = rowFormat.GridAfter;
		if (gridAfter > 0)
		{
			m_writer.WriteStartElement("gridAfter", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", gridAfter.ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		if (gridBefore > 0)
		{
			m_writer.WriteStartElement("wBefore", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			switch (rowFormat.GridBeforeWidth.WidthType)
			{
			case FtsWidth.Percentage:
				m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "pct");
				m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (rowFormat.GridBeforeWidth.Width * 50f).ToString(CultureInfo.InvariantCulture));
				break;
			case FtsWidth.Point:
				m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
				m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (rowFormat.GridBeforeWidth.Width * 20f).ToString(CultureInfo.InvariantCulture));
				break;
			}
			m_writer.WriteEndElement();
		}
		if (gridAfter > 0)
		{
			m_writer.WriteStartElement("wAfter", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			switch (rowFormat.GridAfterWidth.WidthType)
			{
			case FtsWidth.Percentage:
				m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "pct");
				m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (rowFormat.GridAfterWidth.Width * 50f).ToString(CultureInfo.InvariantCulture));
				break;
			case FtsWidth.Point:
				m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
				m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (rowFormat.GridAfterWidth.Width * 20f).ToString(CultureInfo.InvariantCulture));
				break;
			}
			m_writer.WriteEndElement();
		}
		if (rowFormat.HasValue(121) && rowFormat.Hidden)
		{
			m_writer.WriteStartElement("hidden", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (rowFormat.HasValue(106) && !rowFormat.IsBreakAcrossPages)
		{
			m_writer.WriteStartElement("cantSplit", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (row.Height != 0f)
		{
			m_writer.WriteStartElement("trHeight", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(Math.Abs(row.Height) * 20f));
			switch (row.HeightType)
			{
			case TableRowHeightType.AtLeast:
				m_writer.WriteAttributeString("hRule", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "atLeast");
				break;
			case TableRowHeightType.Exactly:
				m_writer.WriteAttributeString("hRule", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "exact");
				break;
			}
			m_writer.WriteEndElement();
		}
		if (row.IsHeader)
		{
			m_writer.WriteStartElement("tblHeader", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		SerializeCellSpacing(rowFormat);
		SerializeTableAlignment(rowFormat);
		SerializeDocxProps(list, "hidden");
		if (row.RowFormat.Revisions.Count > 0 && !m_isAlternativeRowFormat)
		{
			SerializeRevisionsInFormatting(row.RowFormat.Revisions);
		}
		if (rowFormat.HasKey(122) && rowFormat.Revisions.Count > 0 && !m_isAlternativeRowFormat)
		{
			foreach (Revision revision in rowFormat.Revisions)
			{
				if (revision.RevisionType != RevisionType.Formatting)
				{
					continue;
				}
				SerializeTrackChangeProps("trPrChange", revision.Author, revision.Date);
				if (rowFormat.OldPropertiesHash.Count > 0)
				{
					m_isAlternativeRowFormat = true;
					Dictionary<int, object> dictionary = new Dictionary<int, object>(rowFormat.OldPropertiesHash);
					Dictionary<int, object> dictionary2 = new Dictionary<int, object>(rowFormat.PropertiesHash);
					rowFormat.PropertiesHash.Clear();
					foreach (KeyValuePair<int, object> item in dictionary)
					{
						rowFormat.PropertiesHash[item.Key] = item.Value;
					}
					rowFormat.OldPropertiesHash.Clear();
					SerializeRowFormat(row);
					rowFormat.PropertiesHash.Clear();
					foreach (KeyValuePair<int, object> item2 in dictionary2)
					{
						rowFormat.PropertiesHash[item2.Key] = item2.Value;
					}
					foreach (KeyValuePair<int, object> item3 in dictionary)
					{
						rowFormat.OldPropertiesHash[item3.Key] = item3.Value;
					}
					m_isAlternativeRowFormat = false;
				}
				else
				{
					m_writer.WriteStartElement("trPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
					m_writer.WriteEndElement();
				}
				m_writer.WriteEndElement();
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializeCnfStyleElement(WTableRow row)
	{
		IStyle style = m_document.Styles.FindByName(row.OwnerTable.StyleName, StyleType.TableStyle);
		if (style == null || (style as WTableStyle).ConditionalFormattingStyles.Count <= 0)
		{
			return;
		}
		int rowIndex = row.GetRowIndex();
		WTable ownerTable = row.OwnerTable;
		string text = "0";
		string text2 = "0";
		string text3 = "0";
		string text4 = "0";
		string text5 = "0";
		string text6 = "0";
		string text7 = "0";
		string text8 = "0";
		string text9 = "0";
		string text10 = "0";
		string text11 = "0";
		string text12 = "0";
		IEnumerator enumerator = (style as WTableStyle).ConditionalFormattingStyles.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				switch (((ConditionalFormattingStyle)enumerator.Current).ConditionalFormattingType)
				{
				case ConditionalFormattingType.FirstRow:
					if (rowIndex == 0 && ownerTable.ApplyStyleForHeaderRow)
					{
						text = "1";
					}
					break;
				case ConditionalFormattingType.LastRow:
					if (rowIndex != 0 && rowIndex == ownerTable.Rows.Count - 1 && ownerTable.ApplyStyleForLastRow)
					{
						text2 = "1";
					}
					break;
				case ConditionalFormattingType.OddRowBanding:
					if (rowIndex != ownerTable.Rows.Count - 1 && rowIndex % 2 == 1 && ownerTable.ApplyStyleForBandedRows)
					{
						text7 = "1";
					}
					break;
				case ConditionalFormattingType.EvenRowBanding:
					if (rowIndex != 0 && rowIndex != ownerTable.Rows.Count - 1 && rowIndex % 2 == 0 && ownerTable.ApplyStyleForBandedRows)
					{
						text8 = "1";
					}
					break;
				}
			}
		}
		finally
		{
			IDisposable disposable = enumerator as IDisposable;
			if (disposable != null)
			{
				disposable.Dispose();
			}
		}
		string text13 = text + text2 + text3 + text4 + text5 + text6 + text7 + text8 + text10 + text9 + text12 + text11;
		if (text13 != "000000000000")
		{
			m_writer.WriteStartElement("cnfStyle", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text13);
			m_writer.WriteAttributeString("w", "firstRow", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
			m_writer.WriteAttributeString("w", "lastRow", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text2);
			m_writer.WriteAttributeString("w", "firstColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text3);
			m_writer.WriteAttributeString("w", "lastColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text4);
			m_writer.WriteAttributeString("w", "oddVBand", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text5);
			m_writer.WriteAttributeString("w", "evenVBand", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text6);
			m_writer.WriteAttributeString("w", "oddHBand", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text7);
			m_writer.WriteAttributeString("w", "evenHBand", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text8);
			m_writer.WriteAttributeString("w", "firstRowFirstColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text9);
			m_writer.WriteAttributeString("w", "firstRowLastColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text10);
			m_writer.WriteAttributeString("w", "lastRowFirstColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text11);
			m_writer.WriteAttributeString("w", "lastRowLastColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text12);
			m_writer.WriteEndElement();
		}
	}

	private void SerializeCnfStyleElement(WTableCell cell)
	{
		IStyle style = m_document.Styles.FindByName(cell.OwnerRow.OwnerTable.StyleName, StyleType.TableStyle);
		if (style == null || (style as WTableStyle).ConditionalFormattingStyles.Count <= 0)
		{
			return;
		}
		int cellIndex = cell.GetCellIndex();
		int rowIndex = cell.OwnerRow.GetRowIndex();
		WTable ownerTable = cell.OwnerRow.OwnerTable;
		string text = "0";
		string text2 = "0";
		string text3 = "0";
		string text4 = "0";
		string text5 = "0";
		string text6 = "0";
		string text7 = "0";
		string text8 = "0";
		string text9 = "0";
		string text10 = "0";
		string text11 = "0";
		string text12 = "0";
		IEnumerator enumerator = (style as WTableStyle).ConditionalFormattingStyles.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				switch (((ConditionalFormattingStyle)enumerator.Current).ConditionalFormattingType)
				{
				case ConditionalFormattingType.FirstColumn:
					if (cellIndex == 0 && ownerTable.ApplyStyleForFirstColumn)
					{
						text3 = "1";
					}
					break;
				case ConditionalFormattingType.LastColumn:
					if (cellIndex != 0 && cellIndex == cell.OwnerRow.Cells.Count - 1 && ownerTable.ApplyStyleForLastColumn)
					{
						text4 = "1";
					}
					break;
				case ConditionalFormattingType.OddColumnBanding:
					if (cellIndex != cell.OwnerRow.Cells.Count - 1 && cellIndex % 2 == 1 && ownerTable.ApplyStyleForBandedColumns)
					{
						text5 = "1";
					}
					break;
				case ConditionalFormattingType.EvenColumnBanding:
					if (cellIndex != 0 && cellIndex != cell.OwnerRow.Cells.Count - 1 && cellIndex % 2 == 0 && ownerTable.ApplyStyleForBandedColumns)
					{
						text6 = "1";
					}
					break;
				case ConditionalFormattingType.FirstRowLastCell:
					if (rowIndex == 0 && cellIndex != 0 && cellIndex == cell.OwnerRow.Cells.Count - 1 && ownerTable.ApplyStyleForHeaderRow && ownerTable.ApplyStyleForLastColumn)
					{
						text10 = "1";
					}
					break;
				case ConditionalFormattingType.FirstRowFirstCell:
					if (rowIndex == 0 && cellIndex == 0 && ownerTable.ApplyStyleForHeaderRow && ownerTable.ApplyStyleForFirstColumn)
					{
						text9 = "1";
					}
					break;
				case ConditionalFormattingType.LastRowLastCell:
					if (rowIndex != 0 && rowIndex == ownerTable.Rows.Count - 1 && cellIndex != 0 && cellIndex == cell.OwnerRow.Cells.Count - 1 && ownerTable.ApplyStyleForLastRow && ownerTable.ApplyStyleForLastColumn)
					{
						text12 = "1";
					}
					break;
				case ConditionalFormattingType.LastRowFirstCell:
					if (rowIndex != 0 && rowIndex == ownerTable.Rows.Count - 1 && cellIndex == 0 && ownerTable.ApplyStyleForLastRow && ownerTable.ApplyStyleForFirstColumn)
					{
						text11 = "1";
					}
					break;
				}
			}
		}
		finally
		{
			IDisposable disposable = enumerator as IDisposable;
			if (disposable != null)
			{
				disposable.Dispose();
			}
		}
		string text13 = text + text2 + text3 + text4 + text5 + text6 + text7 + text8 + text10 + text9 + text12 + text11;
		if (text13 != "000000000000")
		{
			m_writer.WriteStartElement("cnfStyle", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text13);
			m_writer.WriteAttributeString("w", "firstRow", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
			m_writer.WriteAttributeString("w", "lastRow", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text2);
			m_writer.WriteAttributeString("w", "firstColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text3);
			m_writer.WriteAttributeString("w", "lastColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text4);
			m_writer.WriteAttributeString("w", "oddVBand", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text5);
			m_writer.WriteAttributeString("w", "evenVBand", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text6);
			m_writer.WriteAttributeString("w", "oddHBand", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text7);
			m_writer.WriteAttributeString("w", "evenHBand", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text8);
			m_writer.WriteAttributeString("w", "firstRowFirstColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text9);
			m_writer.WriteAttributeString("w", "firstRowLastColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text10);
			m_writer.WriteAttributeString("w", "lastRowFirstColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text11);
			m_writer.WriteAttributeString("w", "lastRowLastColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text12);
			m_writer.WriteEndElement();
		}
		else
		{
			IsParagraphContainsCnfStyle = true;
		}
	}

	private void SerializeCnfStyleElement(WParagraph paragraph)
	{
		WTableCell ownerTableCell = paragraph.GetOwnerTableCell(paragraph.OwnerTextBody);
		IStyle style = m_document.Styles.FindByName(ownerTableCell.OwnerRow.OwnerTable.StyleName, StyleType.TableStyle);
		if (style == null || (style as WTableStyle).ConditionalFormattingStyles.Count <= 0)
		{
			return;
		}
		ownerTableCell.GetCellIndex();
		int rowIndex = ownerTableCell.OwnerRow.GetRowIndex();
		WTable ownerTable = ownerTableCell.OwnerRow.OwnerTable;
		if (!IsParagraphHasCnfStyle(style, rowIndex, ownerTable))
		{
			return;
		}
		string text = "0";
		string text2 = "0";
		string text3 = "0";
		string text4 = "0";
		string text5 = "0";
		string text6 = "0";
		string text7 = "0";
		string text8 = "0";
		string text9 = "0";
		string text10 = "0";
		string text11 = "0";
		string text12 = "0";
		IEnumerator enumerator = (style as WTableStyle).ConditionalFormattingStyles.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				switch (((ConditionalFormattingStyle)enumerator.Current).ConditionalFormattingType)
				{
				case ConditionalFormattingType.FirstRow:
					if (rowIndex == 0 && ownerTable.ApplyStyleForHeaderRow)
					{
						text = "1";
					}
					break;
				case ConditionalFormattingType.LastRow:
					if (rowIndex != 0 && rowIndex == ownerTable.Rows.Count - 1 && ownerTable.ApplyStyleForLastRow)
					{
						text2 = "1";
					}
					break;
				case ConditionalFormattingType.OddRowBanding:
					if (rowIndex != ownerTable.Rows.Count - 1 && rowIndex % 2 == 1 && ownerTable.ApplyStyleForBandedRows)
					{
						text7 = "1";
					}
					break;
				case ConditionalFormattingType.EvenRowBanding:
					if (rowIndex != 0 && rowIndex != ownerTable.Rows.Count - 1 && rowIndex % 2 == 0 && ownerTable.ApplyStyleForBandedRows)
					{
						text8 = "1";
					}
					break;
				}
			}
		}
		finally
		{
			IDisposable disposable = enumerator as IDisposable;
			if (disposable != null)
			{
				disposable.Dispose();
			}
		}
		string value = text + text2 + text3 + text4 + text5 + text6 + text7 + text8 + text10 + text9 + text12 + text11;
		m_writer.WriteStartElement("cnfStyle", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value);
		m_writer.WriteAttributeString("w", "firstRow", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
		m_writer.WriteAttributeString("w", "lastRow", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text2);
		m_writer.WriteAttributeString("w", "firstColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text3);
		m_writer.WriteAttributeString("w", "lastColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text4);
		m_writer.WriteAttributeString("w", "oddVBand", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text5);
		m_writer.WriteAttributeString("w", "evenVBand", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text6);
		m_writer.WriteAttributeString("w", "oddHBand", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text7);
		m_writer.WriteAttributeString("w", "evenHBand", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text8);
		m_writer.WriteAttributeString("w", "firstRowFirstColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text9);
		m_writer.WriteAttributeString("w", "firstRowLastColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text10);
		m_writer.WriteAttributeString("w", "lastRowFirstColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text11);
		m_writer.WriteAttributeString("w", "lastRowLastColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text12);
		m_writer.WriteEndElement();
	}

	private bool IsParagraphHasCnfStyle(IStyle style, int rowIndex, WTable table)
	{
		bool result = false;
		foreach (ConditionalFormattingStyle conditionalFormattingStyle in (style as WTableStyle).ConditionalFormattingStyles)
		{
			if ((conditionalFormattingStyle.ConditionalFormattingType == ConditionalFormattingType.FirstColumn && table.ApplyStyleForFirstColumn) || (conditionalFormattingStyle.ConditionalFormattingType == ConditionalFormattingType.LastColumn && table.ApplyStyleForLastColumn) || (conditionalFormattingStyle.ConditionalFormattingType == ConditionalFormattingType.OddColumnBanding && table.ApplyStyleForBandedColumns) || (conditionalFormattingStyle.ConditionalFormattingType == ConditionalFormattingType.EvenColumnBanding && table.ApplyStyleForBandedColumns) || (rowIndex == 0 && conditionalFormattingStyle.ConditionalFormattingType == ConditionalFormattingType.FirstRowFirstCell && table.ApplyStyleForHeaderRow && table.ApplyStyleForFirstColumn) || (rowIndex != 0 && rowIndex == table.Rows.Count - 1 && conditionalFormattingStyle.ConditionalFormattingType == ConditionalFormattingType.LastRowFirstCell && table.ApplyStyleForLastRow && table.ApplyStyleForFirstColumn))
			{
				result = true;
				break;
			}
			result = false;
		}
		return result;
	}

	private void SerializeTableFormat(RowFormat format, WTable table)
	{
		if (table != null)
		{
			List<Stream> list = new List<Stream>();
			int i = 0;
			for (int count = table.DocxTableFormat.NodeArray.Count; i < count; i++)
			{
				list.Add(table.DocxTableFormat.NodeArray[i]);
			}
			m_writer.WriteStartElement("tblPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeTableStyle(format);
			if (format.WrapTextAround && !(table.OwnerTextBody.Owner is WTextBox) && !(table.OwnerTextBody.Owner is WComment) && !(table.OwnerTextBody.Owner is WFootnote))
			{
				SerializeTablePositioning(format.Positioning);
				if (!format.Positioning.AllowOverlap)
				{
					m_writer.WriteStartElement("tblOverlap", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
					m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "never");
					m_writer.WriteEndElement();
				}
			}
			if (format.PropertiesHash.ContainsKey(104))
			{
				if (format.Bidi)
				{
					m_writer.WriteStartElement("bidiVisual", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				}
				else
				{
					m_writer.WriteStartElement("bidiVisual", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
					m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
				}
				m_writer.WriteEndElement();
			}
			SerializeDocxProps(list, "tblStyleRowBandSize");
			SerializeDocxProps(list, "tblStyleColBandSize");
			SerializeTableWidth(table);
			SerializeTableAlignment(format);
			SerializeCellSpacing(format);
			SerializeTableIndentation(format);
			SerializeTableBorders(format);
			SerializeTableShading(format);
			SerializeTblLayout(format);
			SerializeTableCellMargin(format);
			SerializeTableLook(table);
			if (table.Title != null)
			{
				SerializeTableTitle(table);
			}
			if (table.Description != null)
			{
				SerializeTableDescription(table);
			}
		}
		else
		{
			SerializeCellSpacing(format);
			SerializeTableIndentation(format);
			SerializeTableBorders(format);
			SerializeTableShading(format);
			SerializeTblLayout(format);
			SerializeTableCellMargin(format);
		}
		if (format.OwnerBase != null && format.OwnerBase is WTable && format.OldPropertiesHash.Count > 0 && !m_isAlternativeTableFormat && format.Revisions.Count > 0)
		{
			foreach (Revision revision in format.Revisions)
			{
				if (revision.RevisionType == RevisionType.Formatting)
				{
					m_isAlternativeTableFormat = true;
					SerializeTrackChangeProps("tblPrChange", revision.Author, revision.Date);
					SerializeTableTrackChanges(format, format.OwnerBase as WTable);
					m_writer.WriteEndElement();
					m_isAlternativeTableFormat = false;
				}
			}
		}
		if (format.OwnerRow != null && format.OldPropertiesHash.Count > 0 && format.Revisions.Count > 0)
		{
			foreach (Revision revision2 in format.Revisions)
			{
				if (revision2.RevisionType == RevisionType.Formatting)
				{
					SerializeTrackChangeProps("tblPrExChange", revision2.Author, revision2.Date);
					m_writer.WriteStartElement("tblPrEx", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
					SerializeTableTrackChanges(format, null);
					m_writer.WriteEndElement();
					m_writer.WriteEndElement();
				}
			}
		}
		if (table != null)
		{
			m_writer.WriteEndElement();
		}
	}

	private void SerializeTableTrackChanges(RowFormat format, WTable table)
	{
		Dictionary<int, object> dictionary = new Dictionary<int, object>(format.OldPropertiesHash);
		Dictionary<int, object> dictionary2 = new Dictionary<int, object>(format.PropertiesHash);
		format.PropertiesHash.Clear();
		foreach (KeyValuePair<int, object> item in dictionary)
		{
			format.PropertiesHash[item.Key] = item.Value;
		}
		format.OldPropertiesHash.Clear();
		string styleName = string.Empty;
		if (table != null)
		{
			styleName = table.DocxTableFormat.StyleName;
			table.DocxTableFormat.StyleName = table.TrackTblFormat.StyleName;
		}
		SerializeTableFormat(format, table);
		if (table != null)
		{
			table.DocxTableFormat.StyleName = styleName;
		}
		foreach (KeyValuePair<int, object> item2 in dictionary2)
		{
			format.PropertiesHash[item2.Key] = item2.Value;
		}
		foreach (KeyValuePair<int, object> item3 in dictionary)
		{
			format.OldPropertiesHash[item3.Key] = item3.Value;
		}
	}

	private void SerializeTableTitle(WTable table)
	{
		m_writer.WriteStartElement("tblCaption", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", table.Title);
		m_writer.WriteEndElement();
	}

	private void SerializeTableDescription(WTable table)
	{
		m_writer.WriteStartElement("tblDescription", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", table.Description);
		m_writer.WriteEndElement();
	}

	private void SerializeTableCellMargin(RowFormat format)
	{
		if (!format.Paddings.IsDefault || format.HasValue(3))
		{
			m_writer.WriteStartElement("tblCellMar", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializePaddings(format.Paddings);
			m_writer.WriteEndElement();
		}
	}

	private void SerializePaddings(Paddings paddings)
	{
		if (paddings.Top >= 0f && paddings.HasKey(2))
		{
			m_writer.WriteStartElement("top", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (IsStrict ? paddings.Top.ToString() : ToString(paddings.Top * 20f)) + (IsStrict ? "pt" : ""));
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
			m_writer.WriteEndElement();
		}
		if (paddings.Left >= 0f && paddings.HasKey(1))
		{
			m_writer.WriteStartElement(IsStrict ? "start" : "left", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (IsStrict ? paddings.Left.ToString() : ToString(paddings.Left * 20f)) + (IsStrict ? "pt" : ""));
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
			m_writer.WriteEndElement();
		}
		if (paddings.Bottom >= 0f && paddings.HasKey(3))
		{
			m_writer.WriteStartElement("bottom", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (IsStrict ? paddings.Bottom.ToString() : ToString(paddings.Bottom * 20f)) + (IsStrict ? "pt" : ""));
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
			m_writer.WriteEndElement();
		}
		if (paddings.Right >= 0f && paddings.HasKey(4))
		{
			m_writer.WriteStartElement(IsStrict ? "end" : "right", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (IsStrict ? paddings.Right.ToString() : ToString(paddings.Right * 20f)) + (IsStrict ? "pt" : ""));
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
			m_writer.WriteEndElement();
		}
	}

	private void SerializeTblLayout(RowFormat format)
	{
		if (!format.IsAutoResized)
		{
			m_writer.WriteStartElement("tblLayout", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "fixed");
			m_writer.WriteEndElement();
		}
	}

	private void SerializeTableShading(RowFormat format)
	{
		if (format.HasValue(108) || format.HasValue(110))
		{
			m_writer.WriteStartElement("shd", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (format.BackColor == Color.Empty)
			{
				m_writer.WriteAttributeString("fill", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
			}
			else
			{
				m_writer.WriteAttributeString("fill", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode(format.BackColor));
			}
			string textureStyle = GetTextureStyle(format.TextureStyle);
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", textureStyle);
			m_writer.WriteEndElement();
		}
	}

	private void SerializeTableBorders(RowFormat format)
	{
		Borders borders = format.Borders;
		if (!IsNoneBorder(borders))
		{
			m_writer.WriteStartElement("tblBorders", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeBorders(format.Borders, 8);
			m_writer.WriteEndElement();
		}
	}

	private bool IsNoneBorder(Borders borders)
	{
		if (IsNoneBorder(borders.Bottom) && IsNoneBorder(borders.Right) && IsNoneBorder(borders.Top) && IsNoneBorder(borders.Left) && IsNoneBorder(borders.DiagonalDown) && IsNoneBorder(borders.DiagonalUp) && IsNoneBorder(borders.Horizontal))
		{
			return IsNoneBorder(borders.Vertical);
		}
		return false;
	}

	private void SerializeTableIndentation(RowFormat format)
	{
		if (format.HasValue(53))
		{
			m_writer.WriteStartElement("tblInd", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			int num = (int)Math.Round(format.LeftIndent * 20f);
			m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString());
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
			m_writer.WriteEndElement();
		}
	}

	private void SerializeCellSpacing(RowFormat format)
	{
		if (format.CellSpacing >= 0f)
		{
			m_writer.WriteStartElement("tblCellSpacing", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (IsStrict ? format.CellSpacing.ToString() : ToString(format.CellSpacing * 20f)) + (IsStrict ? "pt" : ""));
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
			m_writer.WriteEndElement();
		}
	}

	private void SerializeTableWidth(WTable table)
	{
		if (table.PreferredTableWidth.WidthType != 0 && (table.PreferredTableWidth.WidthType < FtsWidth.Percentage || table.PreferredTableWidth.Width != 0f))
		{
			m_writer.WriteStartElement("tblW", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (table.PreferredTableWidth.WidthType == FtsWidth.Auto)
			{
				m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
				m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
			}
			else if (table.PreferredTableWidth.WidthType == FtsWidth.Percentage)
			{
				m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(table.PreferredTableWidth.Width * 50f));
				m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "pct");
			}
			else if (table.PreferredTableWidth.WidthType == FtsWidth.Point)
			{
				float num = (float)(IsStrict ? ((double)table.PreferredTableWidth.Width) : Math.Round(table.PreferredTableWidth.Width * 20f));
				m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num + (IsStrict ? "pt" : ""));
				m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeTableAlignment(RowFormat format)
	{
		if (format.PropertiesHash.ContainsKey(105))
		{
			m_writer.WriteStartElement("jc", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			switch (format.HorizontalAlignment)
			{
			case RowAlignment.Right:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", IsStrict ? "end" : "right");
				break;
			case RowAlignment.Center:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "center");
				break;
			default:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", IsStrict ? "start" : "left");
				break;
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeTablePositioning(RowFormat.TablePositioning positioning)
	{
		m_writer.WriteStartElement("tblpPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		string text = null;
		if (positioning.DistanceFromLeft != 0f)
		{
			text = (IsStrict ? positioning.DistanceFromLeft.ToString() : ToString(positioning.DistanceFromLeft * 20f)) + (IsStrict ? "pt" : "");
			m_writer.WriteAttributeString("leftFromText", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
		}
		if (positioning.DistanceFromRight != 0f)
		{
			text = (IsStrict ? positioning.DistanceFromRight.ToString() : ToString(positioning.DistanceFromRight * 20f)) + (IsStrict ? "pt" : "");
			m_writer.WriteAttributeString("rightFromText", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
		}
		if (positioning.DistanceFromTop != 0f)
		{
			text = (IsStrict ? positioning.DistanceFromTop.ToString() : ToString(positioning.DistanceFromTop * 20f)) + (IsStrict ? "pt" : "");
			m_writer.WriteAttributeString("topFromText", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
		}
		if (positioning.DistanceFromBottom != 0f)
		{
			text = (IsStrict ? positioning.DistanceFromBottom.ToString() : ToString(positioning.DistanceFromBottom * 20f)) + (IsStrict ? "pt" : "");
			m_writer.WriteAttributeString("bottomFromText", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
		}
		SerializeTableVertRelation(positioning.VertRelationTo);
		if (positioning.HorizRelationTo != 0)
		{
			SerializeTableHorizRelation(positioning.HorizRelationTo);
		}
		if (positioning.HorizPositionAbs != 0)
		{
			SerializeTableHorizPosition(positioning.HorizPositionAbs);
		}
		else if (positioning.HorizPosition != 0f)
		{
			text = (IsStrict ? positioning.HorizPosition.ToString() : ToString(positioning.HorizPosition * 20f)) + (IsStrict ? "pt" : "");
			m_writer.WriteAttributeString("tblpX", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
		}
		if (positioning.VertPositionAbs != 0)
		{
			SerializeTableVertPosition(positioning.VertPositionAbs);
		}
		else if (positioning.VertPosition != 0f)
		{
			text = (IsStrict ? positioning.VertPosition.ToString() : ToString(positioning.VertPosition * 20f)) + (IsStrict ? "pt" : "");
			m_writer.WriteAttributeString("tblpY", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
		}
		m_writer.WriteEndElement();
	}

	private void SerializeTableHorizPosition(HorizontalPosition position)
	{
		string text = null;
		switch (position)
		{
		case HorizontalPosition.Center:
			text = "center";
			break;
		case HorizontalPosition.Right:
			text = "right";
			break;
		case HorizontalPosition.Inside:
			text = "inside";
			break;
		case HorizontalPosition.Outside:
			text = "outside";
			break;
		}
		if (text != null)
		{
			m_writer.WriteAttributeString("tblpXSpec", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
		}
	}

	private void SerializeTableVertPosition(VerticalPosition position)
	{
		string text = null;
		switch (position)
		{
		case VerticalPosition.Top:
			text = "top";
			break;
		case VerticalPosition.Center:
			text = "center";
			break;
		case VerticalPosition.Bottom:
			text = "bottom";
			break;
		case VerticalPosition.Inside:
			text = "inside";
			break;
		case VerticalPosition.Outside:
			text = "outside";
			break;
		}
		if (text != null)
		{
			m_writer.WriteAttributeString("tblpYSpec", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
		}
	}

	private void SerializeTableVertRelation(VerticalRelation relation)
	{
		string text = null;
		switch (relation)
		{
		case VerticalRelation.Paragraph:
			text = "text";
			break;
		case VerticalRelation.Page:
			text = "page";
			break;
		case VerticalRelation.Margin:
			text = "margin";
			break;
		}
		if (text != null)
		{
			m_writer.WriteAttributeString("vertAnchor", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
		}
	}

	private void SerializeTableHorizRelation(HorizontalRelation relation)
	{
		string text = null;
		switch (relation)
		{
		case HorizontalRelation.Column:
			text = "text";
			break;
		case HorizontalRelation.Margin:
			text = "margin";
			break;
		case HorizontalRelation.Page:
			text = "page";
			break;
		}
		if (text != null)
		{
			m_writer.WriteAttributeString("horzAnchor", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
		}
	}

	private void SerializeTableStyle(RowFormat format)
	{
		WTable wTable = null;
		if (format.OwnerBase != null && format.OwnerBase is WTable)
		{
			wTable = format.OwnerBase as WTable;
			if (wTable.DocxTableFormat.HasFormat && !wTable.DocxTableFormat.Format.IsDefault && string.IsNullOrEmpty(wTable.DocxTableFormat.StyleName))
			{
				return;
			}
		}
		string text = "TableGrid";
		if (wTable != null)
		{
			if (!string.IsNullOrEmpty(wTable.DocxTableFormat.StyleName))
			{
				text = wTable.DocxTableFormat.StyleName;
			}
			if (wTable.StyleName != null && wTable.DocxTableFormat.StyleName != wTable.TrackTblFormat.StyleName)
			{
				text = GetStyleId(wTable.StyleName);
				if (text == null)
				{
					text = wTable.StyleName.Replace(" ", string.Empty);
				}
			}
		}
		else if (format.OwnerBase is WTableRow && (format.OwnerBase as WTableRow).OwnerTable != null)
		{
			string text2 = (format.OwnerBase as WTableRow).OwnerTable.DocxTableFormat.StyleName;
			if ((format.OwnerBase as WTableRow).OwnerTable.StyleName != null)
			{
				text2 = GetStyleId((format.OwnerBase as WTableRow).OwnerTable.StyleName);
				if (text2 == null)
				{
					text2 = (format.OwnerBase as WTableRow).OwnerTable.StyleName.Replace(" ", string.Empty);
				}
			}
			if (text2 != null)
			{
				text = text2;
			}
		}
		m_writer.WriteStartElement("tblStyle", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text.Replace(" ", string.Empty));
		m_writer.WriteEndElement();
	}

	private void SerializeTableLook(WTable table)
	{
		string text = "0";
		string text2 = "0";
		string text3 = "0";
		string text4 = "0";
		string text5 = "0";
		string text6 = "0";
		if (table.ApplyStyleForHeaderRow)
		{
			text = "1";
		}
		if (table.ApplyStyleForLastRow)
		{
			text2 = "1";
		}
		if (table.ApplyStyleForFirstColumn)
		{
			text3 = "1";
		}
		if (table.ApplyStyleForLastColumn)
		{
			text4 = "1";
		}
		if (!table.ApplyStyleForBandedRows)
		{
			text5 = "1";
		}
		if (!table.ApplyStyleForBandedColumns)
		{
			text6 = "1";
		}
		string value = text6 + text5 + text4 + text3 + text2 + text + "00000";
		value = $"{Convert.ToInt64(value, 2):X}".PadLeft(4, '0');
		m_writer.WriteStartElement("tblLook", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value);
		m_writer.WriteAttributeString("w", "firstRow", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
		m_writer.WriteAttributeString("w", "lastRow", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text2);
		m_writer.WriteAttributeString("w", "firstColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text3);
		m_writer.WriteAttributeString("w", "lastColumn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text4);
		m_writer.WriteAttributeString("w", "noHBand", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text5);
		m_writer.WriteAttributeString("w", "noVBand", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text6);
		m_writer.WriteEndElement();
	}

	private void SerializeTableGrid(WTable table)
	{
		m_writer.WriteStartElement("tblGrid", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (table.TableGrid.Count != 0)
		{
			SerializeGridColumns(table.TableGrid);
		}
		if (table.m_trackTableGrid != null && table.TrackTableGrid.Count != 0)
		{
			m_writer.WriteStartElement("tblGridChange", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetNextTChangeId());
			m_writer.WriteStartElement("tblGrid", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeGridColumns(table.TrackTableGrid);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeGridColumns(WTableColumnCollection grid)
	{
		float num = 0f;
		int i = 0;
		for (int count = grid.Count; i < count; i++)
		{
			float endOffset = grid[i].EndOffset;
			SerializeGridColumn(endOffset - num);
			num = endOffset;
		}
	}

	private void SerializeGridColumn(float colWidth)
	{
		int num = (int)Math.Round(colWidth);
		m_writer.WriteStartElement("gridCol", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString());
		m_writer.WriteEndElement();
	}

	private void SerializeParagraph(WParagraph paragraph, bool isLastSection)
	{
		if (paragraph == null)
		{
			throw new ArgumentException("Paragraph should not be null");
		}
		if (paragraph.RemoveEmpty && (paragraph.Text == string.Empty || paragraph.IsOnlyHasSpaces()))
		{
			if (!isLastSection && paragraph.IsEndOfSection)
			{
				m_writer.WriteStartElement("w", "p", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteStartElement("pPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				if (paragraph.OwnerTextBody.Owner is WSection { NextSibling: not null } wSection)
				{
					SerializeSectionProperties(wSection, isTrackrevision: false);
				}
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
			return;
		}
		if (paragraph.ParagraphFormat.PageBreakAfter && !IsPageBreakNeedToBeSkipped(paragraph))
		{
			paragraph.InsertBreak(BreakType.PageBreak);
		}
		if (paragraph.ParagraphFormat.ColumnBreakAfter && !IsPageBreakNeedToBeSkipped(paragraph))
		{
			paragraph.InsertBreak(BreakType.ColumnBreak);
		}
		if (!(paragraph.Owner.Owner is BlockContentControl) || (paragraph.Owner.Owner as BlockContentControl).ContentControlProperties.Type != ContentControlType.Text || !(paragraph.Owner.Owner as BlockContentControl).ContentControlProperties.XmlMapping.IsMapped)
		{
			paragraph.SplitTextRange();
		}
		m_writer.WriteStartElement("w", "p", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (!string.IsNullOrEmpty(paragraph.ParaId))
		{
			m_writer.WriteAttributeString("w14", "paraId", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.microsoft.com/office/word/2010/wordml", paragraph.ParaId);
		}
		m_writer.WriteStartElement("pPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeParagraphFormat(paragraph.ParagraphFormat, paragraph);
		m_writer.WriteEndElement();
		EnsureWatermark(paragraph);
		SerializeParagraphItems(paragraph.Items);
		if (!(paragraph.NextSibling is AlternateChunk) || !(paragraph.NextSibling as AlternateChunk).IsParagraphItem)
		{
			m_writer.WriteEndElement();
		}
		else
		{
			m_writer.WriteStartElement("w", "r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		}
		while (BookMarkCollection.Count > 0 && BookMarkCollection[0] is BookmarkEnd && (BookMarkCollection[0] as BookmarkEnd).IsAfterParagraphMark)
		{
			BookmarkEnd bookmarkEnd = BookMarkCollection[0] as BookmarkEnd;
			bookmarkEnd.IsAfterParagraphMark = false;
			SerializeBookmarkEnd(bookmarkEnd);
			bookmarkEnd.IsAfterParagraphMark = true;
			BookMarkCollection.Remove(bookmarkEnd);
		}
		while (EditableRangeCollection.Count > 0 && EditableRangeCollection[0] is EditableRangeEnd && (EditableRangeCollection[0] as EditableRangeEnd).IsAfterParagraphMark)
		{
			EditableRangeEnd editableRangeEnd = EditableRangeCollection[0] as EditableRangeEnd;
			editableRangeEnd.IsAfterParagraphMark = false;
			SerializeEditableRangeEnd(editableRangeEnd);
			editableRangeEnd.IsAfterParagraphMark = true;
			EditableRangeCollection.Remove(editableRangeEnd);
		}
		while (MovingRevisionCollection.Count > 0 && MovingRevisionDetails != null && MovingRevisionCollection[0].IsAfterParagraphMark)
		{
			SerializeMoveRangeEnd();
		}
	}

	private void EnsureWatermark(WParagraph paragraph)
	{
		HeaderFooter headerFooter = ((paragraph.OwnerTextBody is HeaderFooter) ? (paragraph.OwnerTextBody as HeaderFooter) : (paragraph.GetBaseEntity(paragraph) as HeaderFooter));
		if (headerFooter != null && headerFooter.Paragraphs.Count > 0 && headerFooter.Paragraphs[0] == paragraph && (paragraph.OwnerTextBody.Owner.Owner == null || !(paragraph.OwnerTextBody.Owner is BlockContentControl)) && headerFooter.WriteWatermark)
		{
			SerializeWatermark(headerFooter.Watermark);
		}
	}

	private void SerializeParagraphItems(ParagraphItemCollection paraItems)
	{
		bool flag = false;
		bool flag2 = BookMarkCollection.Count > 0;
		for (int i = 0; i < paraItems.Count; i++)
		{
			ParagraphItem paragraphItem = paraItems[i];
			bool flag3 = false;
			flag3 = (flag ? (paragraphItem.GetCharFormat().BiDirectionalOverride != BiDirectionalOverride.None) : SerializeDirectionalOverride(paragraphItem));
			if (!flag && flag3)
			{
				flag = true;
			}
			if (flag && !flag3)
			{
				m_writer.WriteEndElement();
				flag = false;
			}
			if (!(paragraphItem is BookmarkStart) && flag2)
			{
				SerializeIsNextParaBookmarkEnd();
				flag2 = false;
			}
			SerializeParagraphItem(paragraphItem, isFromCompression: false);
		}
		if (flag2)
		{
			SerializeIsNextParaBookmarkEnd();
		}
		if (flag)
		{
			m_writer.WriteEndElement();
		}
	}

	private void SerializeIsNextParaBookmarkEnd()
	{
		while (BookMarkCollection.Count > 0 && BookMarkCollection[0] is BookmarkEnd && (BookMarkCollection[0] as BookmarkEnd).IsToAddInNextPara)
		{
			BookmarkEnd bookmarkEnd = BookMarkCollection[0] as BookmarkEnd;
			bookmarkEnd.IsToAddInNextPara = false;
			SerializeBookmarkEnd(bookmarkEnd);
			bookmarkEnd.IsToAddInNextPara = true;
			BookMarkCollection.Remove(bookmarkEnd);
		}
	}

	private bool SkipFieldItem(ParagraphItem item)
	{
		if (IsSkipFieldItem)
		{
			if (item is WFieldMark)
			{
				if ((item as WFieldMark).Type == FieldMarkType.FieldSeparator)
				{
					if (CurrentField.FieldSeparator == item && CurrentField.FieldType == FieldType.FieldHyperlink)
					{
						IsSkipFieldItem = false;
					}
				}
				else if (CurrentField.FieldEnd == item)
				{
					FieldStack.Pop();
					IsSkipFieldItem = false;
				}
			}
			return true;
		}
		return false;
	}

	private void SerializeParagraphItem(ParagraphItem item, bool isFromCompression)
	{
		if (item.SkipDocxItem || SkipFieldItem(item))
		{
			return;
		}
		if (!(item.Owner is InlineContentControl) || (item.Owner as InlineContentControl).ParagraphItems[0] != item || (item.Owner as InlineContentControl).ParagraphItems[0].RevisionsInternal.Count == 0 || !(item.Owner as InlineContentControl).IsAllItemSameRevision())
		{
			SerializeRevisionStart(item);
		}
		switch (item.EntityType)
		{
		case EntityType.Break:
		{
			Break @break = item as Break;
			if (@break.BreakType != 0 || !IsPageBreakNeedToBeSkipped(item))
			{
				if ((@break.BreakType == BreakType.LineBreak || @break.BreakType == BreakType.TextWrappingBreak) && @break.TextRange.Text == ControlChar.CarriegeReturn)
				{
					m_writer.WriteStartElement("r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
					m_writer.WriteStartElement("cr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
					m_writer.WriteEndElement();
					m_writer.WriteEndElement();
				}
				else
				{
					SerializeBreak(@break);
				}
			}
			break;
		}
		case EntityType.BookmarkStart:
			SerializeBookmarkStart(item as BookmarkStart);
			break;
		case EntityType.BookmarkEnd:
			SerializeBookmarkEnd(item as BookmarkEnd);
			break;
		case EntityType.EditableRangeStart:
			SerializeEditableRangeStart(item as EditableRangeStart);
			break;
		case EntityType.EditableRangeEnd:
			SerializeEditableRangeEnd(item as EditableRangeEnd);
			break;
		case EntityType.Picture:
			if (item.IsNotFieldShape())
			{
				SerializePicture(item as WPicture);
			}
			break;
		case EntityType.TOC:
			SerializeTableOfContents(item as TableOfContent);
			break;
		case EntityType.FieldMark:
			SerializeFieldMark(item as WFieldMark);
			break;
		case EntityType.Symbol:
			SerializeSymbol(item as WSymbol);
			break;
		case EntityType.OleObject:
			SerializeOleObject(item as WOleObject);
			break;
		case EntityType.TextBox:
			SerializeTextBox(item as WTextBox);
			break;
		case EntityType.Shape:
			if (item.IsNotFieldShape())
			{
				Entity ownerParagraph = item.OwnerParagraph;
				if (ownerParagraph != null && ownerParagraph.GetBaseEntity(ownerParagraph) is HeaderFooter)
				{
					m_HeaderFooterType = (ownerParagraph.GetBaseEntity(ownerParagraph) as HeaderFooter).Type;
					m_IsAutoshapeTextboxInHeader = true;
				}
				WTextBoxCollection autoShapeTextCollection = (item as ShapeObject).AutoShapeTextCollection;
				SerializeTextboxes(autoShapeTextCollection);
				m_IsAutoshapeTextboxInHeader = false;
			}
			break;
		case EntityType.AutoShape:
			SerializeAutoShape(item as Shape);
			break;
		case EntityType.GroupShape:
			SerializeGroupShape(item as GroupShape);
			break;
		case EntityType.Chart:
			m_hasChart = true;
			SerializeChart(item as WChart);
			break;
		case EntityType.Comment:
			SerializeCommentReference(item as WComment);
			break;
		case EntityType.CommentMark:
			SerializeCommentMark(item as WCommentMark);
			break;
		case EntityType.DropDownFormField:
			SerializeDropDownFormField(item as WDropDownFormField);
			break;
		case EntityType.TextFormField:
			SerializeTextFormField(item as WTextFormField);
			break;
		case EntityType.CheckBox:
			SerializeCheckBoxField(item as WCheckBox);
			break;
		case EntityType.Footnote:
			SerializeFootEndnote(item as WFootnote, isFromCompression);
			break;
		case EntityType.Field:
		case EntityType.MergeField:
		case EntityType.SeqField:
		case EntityType.EmbededField:
		case EntityType.ControlField:
			SerializeFieldBegin(item as WField);
			break;
		case EntityType.XmlParaItem:
			SerializeXmlParagraphItem(item as XmlParagraphItem, isInGroupShape: false);
			break;
		case EntityType.InlineContentControl:
			SerializeStructureDocumentTagInline(item as InlineContentControl);
			break;
		case EntityType.AbsoluteTab:
			SerializeAbsoluteTab(item as WAbsoluteTab);
			break;
		case EntityType.Math:
			SerializeMathMLElement(item as WMath);
			break;
		default:
			SerializeTextRange(item);
			break;
		}
		SerializeRevisionEnd(item);
	}

	private void SerializeMathMLElement(WMath math)
	{
		MathMLSerializer mathMLSerializer = new MathMLSerializer();
		if (math.IsInline)
		{
			for (int i = 0; i < math.MathParagraph.Maths.Count; i++)
			{
				m_writer.WriteStartElement("oMath", "http://schemas.openxmlformats.org/officeDocument/2006/math");
				mathMLSerializer.SerializeMath(m_writer, math.MathParagraph.Maths[i], this);
				m_writer.WriteEndElement();
			}
		}
		else
		{
			mathMLSerializer.SerializeMathPara(m_writer, math.MathParagraph, this);
		}
	}

	internal override void SerializeRunCharacterFormat(IOfficeMathRunElement paraItem)
	{
		if (paraItem.Item is WTextRange wTextRange)
		{
			SerializeCharacterFormat(wTextRange.CharacterFormat);
		}
	}

	internal override void SerializeControlProperties(IOfficeRunFormat mathControlFormat)
	{
		WCharacterFormat characterFormat = mathControlFormat as WCharacterFormat;
		SerializeCharacterFormat(characterFormat);
	}

	internal override void SerializeMathRun(IOfficeMathRunElement officeMathParaItem)
	{
		MathMLSerializer mathMLSerializer = new MathMLSerializer();
		if (!(officeMathParaItem.Item is WField) && officeMathParaItem.Item is WTextRange)
		{
			WTextRange obj = officeMathParaItem.Item as WTextRange;
			mathMLSerializer.SerializeMathRunFormat(m_writer, officeMathParaItem.MathFormat as OfficeMathFormat);
			SerializeRunCharacterFormat(officeMathParaItem);
			m_writer.WriteStartElement("t", "http://schemas.openxmlformats.org/officeDocument/2006/math");
			string text = obj.Text;
			m_writer.WriteString(text);
			m_writer.WriteEndElement();
		}
		else if (officeMathParaItem.Item != null)
		{
			SerializeParagraphItem(officeMathParaItem.Item as ParagraphItem, isFromCompression: true);
		}
	}

	private void SerializeChart(WChart chart)
	{
		m_writer.WriteStartElement("r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeCharacterFormat(chart.ParaItemCharFormat);
		m_writer.WriteStartElement("drawing", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (chart.WrapFormat.TextWrappingStyle != 0)
		{
			SerializeAbsolutePicture(chart);
		}
		else
		{
			SerializeInlinePicture(chart);
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeChartGraphicData(WChart chart)
	{
		m_writer.WriteStartElement("wp", "docPr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		if (chart.ShapeID == 0L)
		{
			chart.ShapeID = GetNextDocPrID();
		}
		long shapeID = chart.ShapeID;
		m_writer.WriteAttributeString("id", shapeID.ToString());
		string text = "";
		text = ((chart.Name == null || chart.Name.Length <= 0) ? chart.EntityType.ToString() : chart.Name);
		m_writer.WriteAttributeString("name", text);
		if (!string.IsNullOrEmpty(chart.Title))
		{
			m_writer.WriteAttributeString("title", chart.Title);
		}
		else
		{
			m_writer.WriteAttributeString("title", string.Empty);
		}
		if (chart.AlternativeText != null)
		{
			m_writer.WriteAttributeString("descr", chart.AlternativeText);
		}
		if (!chart.Visible)
		{
			m_writer.WriteAttributeString("hidden", "1");
		}
		m_writer.WriteEndElement();
		string nextRelationShipID = GetNextRelationShipID();
		Entity chartBaseEntity = GetChartBaseEntity(chart);
		if (chartBaseEntity is HeaderFooter && !HFChartCollection.ContainsKey(nextRelationShipID))
		{
			HFChartCollection.Add(nextRelationShipID, chart);
		}
		if (chartBaseEntity is WFootnote)
		{
			if ((chartBaseEntity as WFootnote).FootnoteType == FootnoteType.Footnote && !FootnoteChartCollection.ContainsKey(nextRelationShipID))
			{
				FootnoteChartCollection.Add(nextRelationShipID, chart);
			}
			else if ((chartBaseEntity as WFootnote).FootnoteType == FootnoteType.Endnote && !EndnoteChartCollection.ContainsKey(nextRelationShipID))
			{
				EndnoteChartCollection.Add(nextRelationShipID, chart);
			}
		}
		if (chartBaseEntity is WComment && !CommentsChartCollection.ContainsKey(nextRelationShipID))
		{
			CommentsChartCollection.Add(nextRelationShipID, chart);
		}
		if (!(chartBaseEntity is HeaderFooter) && !(chartBaseEntity is WFootnote) && !(chartBaseEntity is WComment))
		{
			DocumentChartCollection.Add(nextRelationShipID, chart);
		}
		if (!IsWord2003ML)
		{
			SerializeChartElements(chart, nextRelationShipID);
		}
		m_writer.WriteStartElement("a", "graphic", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("a", "graphicData", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (chart.Is2016Chart)
		{
			m_writer.WriteAttributeString("uri", "http://schemas.microsoft.com/office/drawing/2014/chartex");
			m_writer.WriteStartElement("cx", "chart", "http://schemas.microsoft.com/office/drawing/2014/chartex");
		}
		else
		{
			m_writer.WriteAttributeString("uri", "http://schemas.openxmlformats.org/drawingml/2006/chart");
			m_writer.WriteStartElement("c", "chart", "http://schemas.openxmlformats.org/drawingml/2006/chart");
		}
		m_writer.WriteAttributeString("xmlns", "r", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
		m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", nextRelationShipID);
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		if (!ChartRelationId.ContainsKey(nextRelationShipID))
		{
			ChartRelationId.Add(nextRelationShipID, chart);
		}
	}

	private void SerializeChartRelation(MemoryStream docRelStream)
	{
		string empty = string.Empty;
		foreach (string key in ChartRelationId.Keys)
		{
			WChart wChart = ChartRelationId[key];
			if (!HFChartCollection.ContainsKey(key) && !FootnoteChartCollection.ContainsKey(key) && !EndnoteChartCollection.ContainsKey(key) && !CommentsChartCollection.ContainsKey(key))
			{
				string relationshipType;
				if (wChart.Is2016Chart)
				{
					empty = "charts/chartEx" + key.Replace("rId", "") + ".xml";
					relationshipType = "http://schemas.microsoft.com/office/2014/relationships/chartEx";
				}
				else
				{
					empty = "charts/chart" + key.Replace("rId", "") + ".xml";
					relationshipType = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart";
				}
				SerializeRelationShip(docRelStream, key, relationshipType, empty);
			}
		}
	}

	private void SerializeChartExStyles(DictionaryEntry relation, ChartImpl chartImpl, string relId)
	{
		int num = ++m_chartStyleID;
		string text = "style" + num;
		relation.Key = "http://schemas.microsoft.com/office/2011/relationships/chartStyle";
		MemoryStream memoryStream = new MemoryStream();
		StreamWriter streamWriter = new StreamWriter(memoryStream);
		XmlWriter writer = DocGen.DocIO.DLS.Convertors.UtilityMethods.CreateWriter(streamWriter);
		relation.Value = text + ".xml";
		relId = chartImpl.Relations.GenerateRelationId();
		chartImpl.Relations[relId] = new Relation("", "http://schemas.microsoft.com/office/2011/relationships/chartStyle");
		ChartRelations.Add(relId, relation);
		SerializeDefaultChartStyles(writer, chartImpl, chartImpl.AppImplementation);
		m_archive.AddItem("word/charts/" + text + ".xml", memoryStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		streamWriter.Flush();
		memoryStream.Flush();
	}

	private void SerializeChartExColors(DictionaryEntry relation, ChartImpl chartImpl, string relId)
	{
		int num = ++m_chartColorStyleID;
		string text = "colors" + num;
		MemoryStream memoryStream = new MemoryStream();
		StreamWriter streamWriter = new StreamWriter(memoryStream);
		XmlWriter writer = DocGen.DocIO.DLS.Convertors.UtilityMethods.CreateWriter(streamWriter);
		relation.Key = "http://schemas.microsoft.com/office/2011/relationships/chartColorStyle";
		relation.Value = text + ".xml";
		relId = chartImpl.Relations.GenerateRelationId();
		chartImpl.Relations[relId] = new Relation("", "http://schemas.microsoft.com/office/2011/relationships/chartColorStyle");
		ChartRelations.Add(relId, relation);
		SerializeDefaultChartColorStyles(writer, chartImpl.AppImplementation);
		streamWriter.Flush();
		m_archive.AddItem("word/charts/" + text + ".xml", memoryStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		streamWriter.Flush();
		memoryStream.Flush();
	}

	private void SerializeChartElements(WChart chart, string id)
	{
		MemoryStream memoryStream = new MemoryStream();
		string itemName = ((!chart.Is2016Chart) ? ("word/charts/chart" + id.Replace("rId", "") + ".xml") : ("word/charts/chartEx" + id.Replace("rId", "") + ".xml"));
		m_archive.AddItem(itemName, memoryStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		DictionaryEntry dictionaryEntry = default(DictionaryEntry);
		string empty = string.Empty;
		ChartImpl chartImpl = chart.OfficeChart as ChartImpl;
		string relationId = string.Empty;
		foreach (string key in chart.DocxProps.Keys)
		{
			if (key.Contains("/chartUserShapes"))
			{
				chartImpl.RelationPreservedStreamCollection.Add("http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartUserShapes", null);
				break;
			}
		}
		using (XmlWriter writer = XmlWriter.Create(memoryStream))
		{
			if (!chart.Is2016Chart)
			{
				new ChartSerializator().SerializeChart(writer, chartImpl, string.Empty, GetAppVersion());
			}
			else
			{
				new ChartExSerializator().SerializeChartEx(writer, chartImpl);
			}
		}
		if (chart.Is2016Chart && chart.DocxProps.Count == 0)
		{
			SerializeChartExStyles(dictionaryEntry, chartImpl, relationId);
			SerializeChartExColors(dictionaryEntry, chartImpl, relationId);
		}
		foreach (string key2 in chart.DocxProps.Keys)
		{
			if (key2.Contains("/chartStyle"))
			{
				int num = ++m_chartStyleID;
				string text = "style" + num;
				m_archive.AddItem("word/charts/" + text + ".xml", chart.DocxProps[key2], bControlStream: false, DocGen.Compression.FileAttributes.Archive);
				dictionaryEntry.Key = "http://schemas.microsoft.com/office/2011/relationships/chartStyle";
				dictionaryEntry.Value = text + ".xml";
				if (chartImpl.Relations.Count > 0)
				{
					relationId = chartImpl.Relations.GenerateRelationId();
					chartImpl.Relations[relationId] = new Relation("", "http://schemas.microsoft.com/office/2011/relationships/chartStyle");
				}
				else
				{
					relationId = NextChartElementsRelationId();
				}
				ChartRelations.Add(relationId, dictionaryEntry);
			}
			if (key2.Contains("/chartColorStyle"))
			{
				int num = ++m_chartColorStyleID;
				string text2 = "colors" + num;
				m_archive.AddItem("word/charts/" + text2 + ".xml", chart.DocxProps[key2], bControlStream: false, DocGen.Compression.FileAttributes.Archive);
				dictionaryEntry.Key = "http://schemas.microsoft.com/office/2011/relationships/chartColorStyle";
				dictionaryEntry.Value = text2 + ".xml";
				if (chartImpl.Relations.Count > 0)
				{
					relationId = chartImpl.Relations.GenerateRelationId();
					chartImpl.Relations[relationId] = new Relation("", "http://schemas.microsoft.com/office/2011/relationships/chartColorStyle");
				}
				else
				{
					relationId = NextChartElementsRelationId();
				}
				ChartRelations.Add(relationId, dictionaryEntry);
			}
			if (key2.Contains("/chartUserShapes"))
			{
				key2.LastIndexOf('/');
				int num = ++m_chartDrawingID;
				string text3 = "drawing" + num;
				m_archive.AddItem("word/drawings/" + text3 + ".xml", chart.DocxProps[key2], bControlStream: false, DocGen.Compression.FileAttributes.Archive);
				dictionaryEntry.Key = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartUserShapes";
				dictionaryEntry.Value = "../drawings/" + text3 + ".xml";
				Relation relation = null;
				if (chartImpl.Relations.Count > 0)
				{
					relation = chartImpl.Relations.FindRelationByContentType("http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartUserShapes", out relationId);
				}
				if (relation == null)
				{
					relationId = NextChartElementsRelationId();
				}
				ChartRelations.Add(relationId, dictionaryEntry);
			}
			if (key2.Contains("/relation") && key2.Contains("drawing"))
			{
				string text4 = "drawing" + m_chartDrawingID;
				m_archive.AddItem("word/drawings/_rels/" + text4 + ".xml.rels", chart.DocxProps[key2], bControlStream: false, DocGen.Compression.FileAttributes.Archive);
			}
		}
		foreach (string key3 in chartImpl.RelationPreservedStreamCollection.Keys)
		{
			if (key3.Contains("rId"))
			{
				byte[] array = new byte[chartImpl.RelationPreservedStreamCollection[key3].Length];
				chartImpl.RelationPreservedStreamCollection[key3].Position = 0L;
				chartImpl.RelationPreservedStreamCollection[key3].Read(array, 0, array.Length);
				ImageRecord imageRecord = new ImageRecord(chart.Document, array);
				imageRecord.Attach();
				string text5 = "media/image" + imageRecord.ImageId + GetFileExtension(imageRecord);
				if (m_archive.Find(text5.Replace("\\", "/")) == -1)
				{
					m_archive.AddItem("word/" + text5, new MemoryStream(imageRecord.ImageBytes), bControlStream: false, DocGen.Compression.FileAttributes.Archive);
				}
				dictionaryEntry.Key = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image";
				dictionaryEntry.Value = "../" + text5;
				m_hasImages = true;
				ChartRelations.Add(key3, dictionaryEntry);
			}
		}
		if (chart.IsExternalRelation && !string.IsNullOrEmpty(chart.ExternalDataPath))
		{
			Relation relation2 = null;
			if (chartImpl.Relations.Count > 0)
			{
				relation2 = chartImpl.Relations.FindRelationByContentType("http://schemas.openxmlformats.org/officeDocument/2006/relationships/package", out relationId);
			}
			if (relation2 == null)
			{
				relationId = NextChartElementsRelationId();
			}
			dictionaryEntry.Key = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/oleObject";
			dictionaryEntry.Value = chart.ExternalDataPath;
			ChartRelations.Add(relationId, dictionaryEntry);
		}
		else
		{
			bool defaultExcelFile = true;
			Stream stream;
			if (!string.IsNullOrEmpty(chart.InternalDataPath) && chart.DocxProps.ContainsKey(chart.InternalDataPath))
			{
				stream = chart.DocxProps[chart.InternalDataPath];
				defaultExcelFile = false;
			}
			else
			{
				stream = GetManifestResourceStream("ExcelTemplate.xlsx");
			}
			empty = "Microsoft_Excel_Worksheet" + id.Replace("rId", "");
			ZipArchive zipArchive = new ZipArchive();
			zipArchive.Open(stream, closeStream: true);
			zipArchive.RemoveItem("xl/sharedStrings.xml");
			zipArchive.RemoveItem("xl/styles.xml");
			MemoryStream stream2 = new MemoryStream();
			Dictionary<int, int> styleIndex = chart.Workbook.DataHolder.SaveStyles(zipArchive, stream2);
			int workSheetIndex = ((chart.Workbook.Worksheets.Count > 0) ? ((chart.Workbook.Worksheets.Count > chart.Workbook.ActiveSheetIndex) ? chart.Workbook.ActiveSheetIndex : 0) : 0);
			chart.Workbook.DataHolder.Serializator.SerializeWorksheets(zipArchive, chart.Workbook, chart.OfficeChart as ChartImpl, workSheetIndex, styleIndex, defaultExcelFile);
			MemoryStream memoryStream2 = new MemoryStream();
			using (XmlWriter writer2 = XmlWriter.Create(memoryStream2))
			{
				chart.Workbook.DataHolder.Serializator.SerializeSST(writer2);
			}
			zipArchive.AddItem("xl/sharedStrings.xml", memoryStream2, bControlStream: true, DocGen.Compression.FileAttributes.Archive);
			MemoryStream memoryStream3 = new MemoryStream();
			zipArchive.Save(memoryStream3, closeStream: false);
			m_archive.AddItem("word/embeddings/" + empty + ".xlsx", memoryStream3, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
			dictionaryEntry.Key = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/package";
			dictionaryEntry.Value = "../embeddings/" + empty + ".xlsx";
			Relation relation3 = null;
			if (chartImpl.Relations.Count > 0)
			{
				relation3 = chartImpl.Relations.FindRelationByContentType("http://schemas.openxmlformats.org/officeDocument/2006/relationships/package", out relationId);
			}
			if (relation3 == null)
			{
				relationId = NextChartElementsRelationId();
			}
			while (ChartRelations.ContainsKey(relationId))
			{
				relationId = NextChartElementsRelationId();
			}
			ChartRelations.Add(relationId, dictionaryEntry);
		}
		SerializeChartElementRelations(ChartRelations, id, chart.Is2016Chart);
		ChartRelations.Clear();
		m_chartElementsRelationId = 0;
		chartImpl.RelationPreservedStreamCollection.Clear();
	}

	private void SerializeDefaultChartStyles(XmlWriter writer, ChartImpl chart, ApplicationImpl applicationImpl)
	{
		writer.WriteStartDocument(standalone: true);
		writer.WriteStartElement("cs", "chartStyle", "http://schemas.microsoft.com/office/drawing/2012/chartStyle");
		writer.WriteAttributeString("xmlns", "a", null, "http://schemas.openxmlformats.org/drawingml/2006/main");
		writer.WriteAttributeString("xmlns", "cs", null, "http://schemas.microsoft.com/office/drawing/2012/chartStyle");
		writer.WriteAttributeString("id", "419");
		if (m_defaultChartStyleElements == null)
		{
			InitializeChartStyleElements();
		}
		for (int i = 0; i < 32; i++)
		{
			if (!m_defaultChartStyleElements.ContainsKey((ChartStyleElements)i))
			{
				continue;
			}
			ChartStyleElements chartStyleElements = ChartStyleElements.extLst;
			ShapeStyle shapeStyle = m_defaultChartStyleElements[(ChartStyleElements)i];
			if (shapeStyle != null)
			{
				if (chart.IsTreeMapOrSunBurst)
				{
					switch ((ChartStyleElements)i)
					{
					case ChartStyleElements.dataPoint:
						shapeStyle.ShapeProperties.BorderWeight = 19050.0;
						shapeStyle.ShapeProperties.BorderFillColorValue = "lt1";
						chartStyleElements = ChartStyleElements.dataPoint;
						break;
					case ChartStyleElements.dataLabel:
						shapeStyle.FontRefstyleEntry.ColorValue = "lt1";
						shapeStyle.FontRefstyleEntry.LumOffValue1 = -1.0;
						shapeStyle.FontRefstyleEntry.LumModValue = -1.0;
						chartStyleElements = ChartStyleElements.dataLabel;
						break;
					case ChartStyleElements.axisTitle:
						shapeStyle.ShapeProperties = new StyleEntryShapeProperties();
						shapeStyle.ShapeProperties.ShapeFillColorModelType = ColorModel.schemeClr;
						shapeStyle.ShapeProperties.ShapeFillColorValue = "bg1";
						shapeStyle.ShapeProperties.ShapeFillLumModValue = 65000.0;
						shapeStyle.ShapeProperties.BorderWeight = 19050.0;
						shapeStyle.ShapeProperties.BorderFillColorModelType = ColorModel.schemeClr;
						shapeStyle.ShapeProperties.BorderFillColorValue = "bg1";
						chartStyleElements = ChartStyleElements.axisTitle;
						break;
					}
				}
				if (chart.ChartType == OfficeChartType.Funnel && i == 1)
				{
					shapeStyle.ShapeProperties.BorderWeight = 0.0;
					chartStyleElements = ChartStyleElements.categoryAxis;
				}
				ChartStyleElements chartStyleElements2 = (ChartStyleElements)i;
				shapeStyle.Write(writer, chartStyleElements2.ToString());
			}
			else if (i == 9)
			{
				writer.WriteStartElement("cs", ChartStyleElements.dataPointMarkerLayout.ToString(), "http://schemas.microsoft.com/office/drawing/2012/chartStyle");
				writer.WriteAttributeString("size", "5");
				writer.WriteAttributeString("symbol", "circle");
				writer.WriteEndElement();
			}
			switch (chartStyleElements)
			{
			case ChartStyleElements.axisTitle:
				shapeStyle.ShapeProperties = null;
				break;
			case ChartStyleElements.dataLabel:
				shapeStyle.FontRefstyleEntry.ColorValue = "tx1";
				shapeStyle.FontRefstyleEntry.LumOffValue1 = 75000.0;
				shapeStyle.FontRefstyleEntry.LumModValue = 25000.0;
				break;
			case ChartStyleElements.dataPoint:
				shapeStyle.ShapeProperties.BorderWeight = -1.0;
				shapeStyle.ShapeProperties.BorderFillColorValue = "phClr";
				break;
			case ChartStyleElements.categoryAxis:
				shapeStyle.ShapeProperties.BorderWeight = 9525.0;
				break;
			}
		}
		writer.WriteEndElement();
		writer.Flush();
	}

	private void SerializeDefaultChartColorStyles(XmlWriter writer, ApplicationImpl applicationImpl)
	{
		writer.WriteStartDocument(standalone: true);
		writer.WriteStartElement("cs", "colorStyle", "http://schemas.microsoft.com/office/drawing/2012/chartStyle");
		writer.WriteAttributeString("xmlns", "a", null, "http://schemas.openxmlformats.org/drawingml/2006/main");
		writer.WriteAttributeString("xmlns", "cs", null, "http://schemas.microsoft.com/office/drawing/2012/chartStyle");
		writer.WriteAttributeString("id", "10");
		writer.WriteAttributeString("meth", "cycle");
		writer.WriteStartElement("a", "schemeClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
		writer.WriteAttributeString("val", "accent1");
		writer.WriteEndElement();
		writer.WriteStartElement("a", "schemeClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
		writer.WriteAttributeString("val", "accent2");
		writer.WriteEndElement();
		writer.WriteStartElement("a", "schemeClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
		writer.WriteAttributeString("val", "accent3");
		writer.WriteEndElement();
		writer.WriteStartElement("a", "schemeClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
		writer.WriteAttributeString("val", "accent4");
		writer.WriteEndElement();
		writer.WriteStartElement("a", "schemeClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
		writer.WriteAttributeString("val", "accent5");
		writer.WriteEndElement();
		writer.WriteStartElement("a", "schemeClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
		writer.WriteAttributeString("val", "accent6");
		writer.WriteEndElement();
		writer.WriteElementString("cs", "variation", "http://schemas.microsoft.com/office/drawing/2012/chartStyle", "");
		if (m_defaultColorVariations == null)
		{
			InitializeChartColorElements();
		}
		for (int i = 0; i < m_defaultColorVariations.Length; i++)
		{
			writer.WriteStartElement("cs", "variation", "http://schemas.microsoft.com/office/drawing/2012/chartStyle");
			writer.WriteStartElement("a", "lumMod", "http://schemas.openxmlformats.org/drawingml/2006/main");
			writer.WriteAttributeString("val", m_defaultColorVariations[i][0].ToString());
			writer.WriteEndElement();
			if (m_defaultColorVariations[i].Length == 2)
			{
				writer.WriteStartElement("a", "lumOff", "http://schemas.openxmlformats.org/drawingml/2006/main");
				writer.WriteAttributeString("val", m_defaultColorVariations[i][1].ToString());
				writer.WriteEndElement();
			}
			writer.WriteEndElement();
		}
		writer.WriteEndElement();
		writer.Flush();
	}

	private void InitializeChartColorElements()
	{
		m_defaultColorVariations = new double[8][];
		m_defaultColorVariations[0] = new double[1] { 60000.0 };
		m_defaultColorVariations[1] = new double[2] { 80000.0, 20000.0 };
		m_defaultColorVariations[2] = new double[1] { 80000.0 };
		m_defaultColorVariations[3] = new double[2] { 60000.0, 40000.0 };
		m_defaultColorVariations[4] = new double[1] { 50000.0 };
		m_defaultColorVariations[5] = new double[2] { 70000.0, 30000.0 };
		m_defaultColorVariations[6] = new double[1] { 70000.0 };
		m_defaultColorVariations[7] = new double[2] { 50000.0, 50000.0 };
	}

	private void InitializeChartStyleElements()
	{
		m_defaultChartStyleElements = new Dictionary<ChartStyleElements, ShapeStyle>(31);
		ShapeStyle shapeStyle = null;
		string nameSpaceValue = "http://schemas.microsoft.com/office/drawing/2012/chartStyle";
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", 65000.0, 35000.0, -1.0, -1.0);
		shapeStyle.DefaultRunParagraphProperties = new TextSettings();
		shapeStyle.DefaultRunParagraphProperties.FontSize = 10f;
		shapeStyle.DefaultRunParagraphProperties.KerningValue = 12f;
		shapeStyle.DefaultRunParagraphProperties.SpacingValue = -1f;
		shapeStyle.DefaultRunParagraphProperties.Baseline = -1;
		m_defaultChartStyleElements.Add(ChartStyleElements.axisTitle, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", 65000.0, 35000.0, -1.0, -1.0);
		shapeStyle.ShapeProperties = new StyleEntryShapeProperties();
		shapeStyle.ShapeProperties.BorderWeight = 9525.0;
		shapeStyle.ShapeProperties.LineCap = EndLineCap.flat;
		shapeStyle.ShapeProperties.BorderLineStyle = Excel2007ShapeLineStyle.sng;
		shapeStyle.ShapeProperties.IsInsetPenAlignment = false;
		shapeStyle.ShapeProperties.BorderFillColorModelType = ColorModel.schemeClr;
		shapeStyle.ShapeProperties.BorderFillColorValue = "tx1";
		shapeStyle.ShapeProperties.BorderFillLumModValue = 15000.0;
		shapeStyle.ShapeProperties.BorderFillLumOffValue1 = 85000.0;
		shapeStyle.ShapeProperties.BorderIsRound = true;
		shapeStyle.DefaultRunParagraphProperties = new TextSettings();
		shapeStyle.DefaultRunParagraphProperties.FontSize = 9f;
		shapeStyle.DefaultRunParagraphProperties.KerningValue = 12f;
		shapeStyle.DefaultRunParagraphProperties.SpacingValue = -1f;
		shapeStyle.DefaultRunParagraphProperties.Baseline = -1;
		m_defaultChartStyleElements.Add(ChartStyleElements.categoryAxis, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", 65000.0, 35000.0, -1.0, -1.0);
		shapeStyle.DefaultRunParagraphProperties = new TextSettings();
		shapeStyle.DefaultRunParagraphProperties.FontSize = 9f;
		shapeStyle.DefaultRunParagraphProperties.KerningValue = -1f;
		shapeStyle.DefaultRunParagraphProperties.SpacingValue = -1f;
		shapeStyle.DefaultRunParagraphProperties.Baseline = -1;
		m_defaultChartStyleElements.Add(ChartStyleElements.trendlineLabel, shapeStyle);
		m_defaultChartStyleElements.Add(ChartStyleElements.valueAxis, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, (StyleEntryModifierEnum)3);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.ShapeProperties = new StyleEntryShapeProperties();
		shapeStyle.ShapeProperties.ShapeFillType = OfficeFillType.SolidColor;
		shapeStyle.ShapeProperties.ShapeFillColorModelType = ColorModel.schemeClr;
		shapeStyle.ShapeProperties.ShapeFillColorValue = "bg1";
		shapeStyle.ShapeProperties.BorderWeight = 9525.0;
		shapeStyle.ShapeProperties.LineCap = EndLineCap.flat;
		shapeStyle.ShapeProperties.BorderLineStyle = Excel2007ShapeLineStyle.sng;
		shapeStyle.ShapeProperties.IsInsetPenAlignment = false;
		shapeStyle.ShapeProperties.BorderFillColorModelType = ColorModel.schemeClr;
		shapeStyle.ShapeProperties.BorderFillColorValue = "tx1";
		shapeStyle.ShapeProperties.BorderFillLumModValue = 15000.0;
		shapeStyle.ShapeProperties.BorderFillLumOffValue1 = 85000.0;
		shapeStyle.ShapeProperties.BorderIsRound = true;
		shapeStyle.DefaultRunParagraphProperties = new TextSettings();
		shapeStyle.DefaultRunParagraphProperties.FontSize = 10f;
		shapeStyle.DefaultRunParagraphProperties.KerningValue = 12f;
		shapeStyle.DefaultRunParagraphProperties.SpacingValue = -1f;
		shapeStyle.DefaultRunParagraphProperties.Baseline = -1;
		m_defaultChartStyleElements.Add(ChartStyleElements.chartArea, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", 65000.0, 35000.0, -1.0, -1.0);
		shapeStyle.ShapeProperties = new StyleEntryShapeProperties();
		shapeStyle.ShapeProperties.BorderWeight = 9525.0;
		shapeStyle.ShapeProperties.BorderFillColorModelType = ColorModel.schemeClr;
		shapeStyle.ShapeProperties.BorderFillColorValue = "tx1";
		shapeStyle.ShapeProperties.BorderFillLumModValue = 15000.0;
		shapeStyle.ShapeProperties.BorderFillLumOffValue1 = 85000.0;
		shapeStyle.DefaultRunParagraphProperties = new TextSettings();
		shapeStyle.DefaultRunParagraphProperties.FontSize = 9f;
		shapeStyle.DefaultRunParagraphProperties.KerningValue = -1f;
		shapeStyle.DefaultRunParagraphProperties.SpacingValue = -1f;
		shapeStyle.DefaultRunParagraphProperties.Baseline = -1;
		m_defaultChartStyleElements.Add(ChartStyleElements.dataTable, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", 75000.0, 25000.0, -1.0, -1.0);
		shapeStyle.DefaultRunParagraphProperties = new TextSettings();
		shapeStyle.DefaultRunParagraphProperties.FontSize = 9f;
		shapeStyle.DefaultRunParagraphProperties.KerningValue = 12f;
		shapeStyle.DefaultRunParagraphProperties.SpacingValue = -1f;
		shapeStyle.DefaultRunParagraphProperties.Baseline = -1;
		shapeStyle.TextBodyProperties = new TextBodyPropertiesHolder();
		shapeStyle.TextBodyProperties.WrapTextInShape = true;
		shapeStyle.TextBodyProperties.SetLeftMargin(38100);
		shapeStyle.TextBodyProperties.SetTopMargin(19050);
		shapeStyle.TextBodyProperties.SetRightMargin(38100);
		shapeStyle.TextBodyProperties.SetBottomMargin(19050);
		shapeStyle.TextBodyProperties.TextDirection = DocGen.OfficeChart.TextDirection.Horizontal;
		shapeStyle.TextBodyProperties.VerticalAlignment = OfficeVerticalAlignment.Middle;
		shapeStyle.TextBodyProperties.IsAutoSize = true;
		m_defaultChartStyleElements.Add(ChartStyleElements.dataLabel, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", 65000.0, 35000.0, -1.0, -1.0);
		shapeStyle.ShapeProperties = new StyleEntryShapeProperties();
		shapeStyle.ShapeProperties.ShapeFillType = OfficeFillType.SolidColor;
		shapeStyle.ShapeProperties.ShapeFillColorModelType = ColorModel.schemeClr;
		shapeStyle.ShapeProperties.ShapeFillColorValue = "lt1";
		shapeStyle.ShapeProperties.BorderFillColorModelType = ColorModel.schemeClr;
		shapeStyle.ShapeProperties.BorderFillColorValue = "dk1";
		shapeStyle.ShapeProperties.BorderFillLumModValue = 25000.0;
		shapeStyle.ShapeProperties.BorderFillLumOffValue1 = 75000.0;
		shapeStyle.DefaultRunParagraphProperties = new TextSettings();
		shapeStyle.DefaultRunParagraphProperties.FontSize = 9f;
		shapeStyle.DefaultRunParagraphProperties.KerningValue = -1f;
		shapeStyle.DefaultRunParagraphProperties.SpacingValue = -1f;
		shapeStyle.DefaultRunParagraphProperties.Baseline = -1;
		shapeStyle.TextBodyProperties = new TextBodyPropertiesHolder();
		shapeStyle.TextBodyProperties.WrapTextInShape = true;
		shapeStyle.TextBodyProperties.SetLeftMargin(36576);
		shapeStyle.TextBodyProperties.SetTopMargin(18288);
		shapeStyle.TextBodyProperties.SetRightMargin(36576);
		shapeStyle.TextBodyProperties.SetBottomMargin(18288);
		shapeStyle.TextBodyProperties.TextDirection = DocGen.OfficeChart.TextDirection.Horizontal;
		shapeStyle.TextBodyProperties.VerticalAlignment = OfficeVerticalAlignment.MiddleCentered;
		shapeStyle.TextBodyProperties.TextVertOverflowType = TextVertOverflowType.Clip;
		shapeStyle.TextBodyProperties.TextHorzOverflowType = TextHorzOverflowType.Clip;
		shapeStyle.TextBodyProperties.IsAutoSize = true;
		m_defaultChartStyleElements.Add(ChartStyleElements.dataLabelCallout, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.styleClr, "auto", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.styleClr, "auto", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.ShapeProperties = new StyleEntryShapeProperties();
		shapeStyle.ShapeProperties.ShapeFillColorModelType = ColorModel.schemeClr;
		shapeStyle.ShapeProperties.ShapeFillColorValue = "phClr";
		shapeStyle.ShapeProperties.BorderFillColorModelType = ColorModel.schemeClr;
		shapeStyle.ShapeProperties.BorderFillColorValue = "phClr";
		m_defaultChartStyleElements.Add(ChartStyleElements.dataPoint, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.styleClr, "auto", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.ShapeProperties = new StyleEntryShapeProperties();
		shapeStyle.ShapeProperties.ShapeFillColorModelType = ColorModel.schemeClr;
		shapeStyle.ShapeProperties.ShapeFillColorValue = "phClr";
		m_defaultChartStyleElements.Add(ChartStyleElements.dataPoint3D, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.styleClr, "auto", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.ShapeProperties = new StyleEntryShapeProperties();
		shapeStyle.ShapeProperties.BorderWeight = 28575.0;
		shapeStyle.ShapeProperties.LineCap = EndLineCap.rnd;
		shapeStyle.ShapeProperties.BorderFillColorModelType = ColorModel.schemeClr;
		shapeStyle.ShapeProperties.BorderFillColorValue = "phClr";
		shapeStyle.ShapeProperties.BorderIsRound = true;
		m_defaultChartStyleElements.Add(ChartStyleElements.dataPointLine, shapeStyle);
		m_defaultChartStyleElements.Add(ChartStyleElements.dataPointWireframe, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.styleClr, "auto", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.ShapeProperties = new StyleEntryShapeProperties();
		shapeStyle.ShapeProperties.ShapeFillColorModelType = ColorModel.schemeClr;
		shapeStyle.ShapeProperties.ShapeFillColorValue = "phClr";
		shapeStyle.ShapeProperties.BorderWeight = 9525.0;
		shapeStyle.ShapeProperties.BorderFillColorModelType = ColorModel.schemeClr;
		shapeStyle.ShapeProperties.BorderFillColorValue = "lt1";
		m_defaultChartStyleElements.Add(ChartStyleElements.dataPointMarker, shapeStyle);
		m_defaultChartStyleElements.Add(ChartStyleElements.dataPointMarkerLayout, null);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none)
		{
			LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0),
			FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0),
			EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0),
			FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", -1.0, -1.0, -1.0, -1.0)
		};
		m_defaultChartStyleElements.Add(ChartStyleElements.wall, shapeStyle);
		m_defaultChartStyleElements.Add(ChartStyleElements.dropLine, shapeStyle);
		m_defaultChartStyleElements.Add(ChartStyleElements.errorBar, shapeStyle);
		m_defaultChartStyleElements.Add(ChartStyleElements.floor, shapeStyle);
		m_defaultChartStyleElements.Add(ChartStyleElements.hiLoLine, shapeStyle);
		m_defaultChartStyleElements.Add(ChartStyleElements.leaderLine, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "dk1", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.ShapeProperties = new StyleEntryShapeProperties();
		shapeStyle.ShapeProperties.ShapeFillColorModelType = ColorModel.schemeClr;
		shapeStyle.ShapeProperties.ShapeFillColorValue = "dk1";
		m_defaultChartStyleElements.Add(ChartStyleElements.downBar, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "dk1", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.ShapeProperties = new StyleEntryShapeProperties();
		shapeStyle.ShapeProperties.ShapeFillColorModelType = ColorModel.schemeClr;
		shapeStyle.ShapeProperties.ShapeFillColorValue = "lt1";
		m_defaultChartStyleElements.Add(ChartStyleElements.upBar, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", 65000.0, 35000.0, -1.0, -1.0);
		shapeStyle.DefaultRunParagraphProperties = new TextSettings();
		shapeStyle.DefaultRunParagraphProperties.FontSize = 9f;
		shapeStyle.DefaultRunParagraphProperties.KerningValue = 12f;
		shapeStyle.DefaultRunParagraphProperties.SpacingValue = -1f;
		shapeStyle.DefaultRunParagraphProperties.Baseline = -1;
		m_defaultChartStyleElements.Add(ChartStyleElements.legend, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, (StyleEntryModifierEnum)3)
		{
			LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0),
			FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0),
			EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0),
			FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", -1.0, -1.0, -1.0, -1.0)
		};
		m_defaultChartStyleElements.Add(ChartStyleElements.plotArea, shapeStyle);
		m_defaultChartStyleElements.Add(ChartStyleElements.plotArea3D, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.ShapeProperties = new StyleEntryShapeProperties();
		shapeStyle.ShapeProperties.BorderWeight = 9525.0;
		shapeStyle.ShapeProperties.LineCap = EndLineCap.flat;
		shapeStyle.ShapeProperties.BorderLineStyle = Excel2007ShapeLineStyle.sng;
		shapeStyle.ShapeProperties.IsInsetPenAlignment = false;
		shapeStyle.ShapeProperties.BorderFillColorModelType = ColorModel.schemeClr;
		shapeStyle.ShapeProperties.BorderFillColorValue = "tx1";
		shapeStyle.ShapeProperties.BorderFillLumModValue = 15000.0;
		shapeStyle.ShapeProperties.BorderFillLumOffValue1 = 85000.0;
		shapeStyle.ShapeProperties.BorderIsRound = true;
		m_defaultChartStyleElements.Add(ChartStyleElements.gridlineMajor, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.ShapeProperties = new StyleEntryShapeProperties();
		shapeStyle.ShapeProperties.BorderWeight = 9525.0;
		shapeStyle.ShapeProperties.LineCap = EndLineCap.flat;
		shapeStyle.ShapeProperties.BorderLineStyle = Excel2007ShapeLineStyle.sng;
		shapeStyle.ShapeProperties.IsInsetPenAlignment = false;
		shapeStyle.ShapeProperties.BorderFillColorModelType = ColorModel.schemeClr;
		shapeStyle.ShapeProperties.BorderFillColorValue = "tx1";
		shapeStyle.ShapeProperties.BorderFillLumModValue = 15000.0;
		shapeStyle.ShapeProperties.BorderFillLumOffValue1 = 85000.0;
		shapeStyle.ShapeProperties.BorderFillLumOffValue2 = 10000.0;
		shapeStyle.ShapeProperties.BorderIsRound = true;
		m_defaultChartStyleElements.Add(ChartStyleElements.gridlineMinor, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", 65000.0, 35000.0, -1.0, -1.0);
		shapeStyle.DefaultRunParagraphProperties = new TextSettings();
		shapeStyle.DefaultRunParagraphProperties.FontSize = 14f;
		shapeStyle.DefaultRunParagraphProperties.Bold = false;
		shapeStyle.DefaultRunParagraphProperties.KerningValue = 12f;
		shapeStyle.DefaultRunParagraphProperties.SpacingValue = 0f;
		shapeStyle.DefaultRunParagraphProperties.Baseline = 0;
		m_defaultChartStyleElements.Add(ChartStyleElements.title, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.ShapeProperties = new StyleEntryShapeProperties();
		shapeStyle.ShapeProperties.BorderWeight = 19050.0;
		shapeStyle.ShapeProperties.LineCap = EndLineCap.rnd;
		shapeStyle.ShapeProperties.BorderFillColorModelType = ColorModel.schemeClr;
		shapeStyle.ShapeProperties.BorderFillColorValue = "phClr";
		m_defaultChartStyleElements.Add(ChartStyleElements.trendline, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", 65000.0, 35000.0, -1.0, -1.0);
		shapeStyle.ShapeProperties = new StyleEntryShapeProperties();
		shapeStyle.ShapeProperties.BorderWeight = 9525.0;
		shapeStyle.ShapeProperties.LineCap = EndLineCap.flat;
		shapeStyle.ShapeProperties.BorderLineStyle = Excel2007ShapeLineStyle.sng;
		shapeStyle.ShapeProperties.IsInsetPenAlignment = false;
		shapeStyle.ShapeProperties.BorderFillColorModelType = ColorModel.schemeClr;
		shapeStyle.ShapeProperties.BorderFillColorValue = "tx1";
		shapeStyle.ShapeProperties.BorderFillLumModValue = 15000.0;
		shapeStyle.ShapeProperties.BorderFillLumOffValue1 = 85000.0;
		shapeStyle.ShapeProperties.BorderIsRound = true;
		shapeStyle.DefaultRunParagraphProperties = new TextSettings();
		shapeStyle.DefaultRunParagraphProperties.FontSize = 9f;
		shapeStyle.DefaultRunParagraphProperties.KerningValue = -1f;
		shapeStyle.DefaultRunParagraphProperties.SpacingValue = -1f;
		shapeStyle.DefaultRunParagraphProperties.Baseline = -1;
		m_defaultChartStyleElements.Add(ChartStyleElements.seriesAxis, shapeStyle);
		shapeStyle = new ShapeStyle("cs", nameSpaceValue, StyleEntryModifierEnum.none);
		shapeStyle.LineRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FillRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.EffectRefStyleEntry = new StyleOrFontReference(0, ColorModel.none, "", -1.0, -1.0, -1.0, -1.0);
		shapeStyle.FontRefstyleEntry = new StyleOrFontReference(1, ColorModel.schemeClr, "tx1", 65000.0, 35000.0, -1.0, -1.0);
		shapeStyle.ShapeProperties = new StyleEntryShapeProperties();
		shapeStyle.ShapeProperties.BorderWeight = 9525.0;
		shapeStyle.ShapeProperties.LineCap = EndLineCap.flat;
		shapeStyle.ShapeProperties.BorderFillColorModelType = ColorModel.srgbClr;
		shapeStyle.ShapeProperties.BorderFillColorValue = "D9D9D9";
		shapeStyle.ShapeProperties.BorderIsRound = true;
		m_defaultChartStyleElements.Add(ChartStyleElements.seriesLine, shapeStyle);
	}

	private double GetAppVersion()
	{
		string text = m_document.ActualFormatType.ToString();
		if (text.Contains("Word2007"))
		{
			return 12.0;
		}
		if (text.Contains("Word2010"))
		{
			return 14.0;
		}
		return 15.0;
	}

	private string NextChartElementsRelationId()
	{
		return $"rId{++m_chartElementsRelationId}";
	}

	private void SerializeChartElementRelations(Dictionary<string, DictionaryEntry> relations, string OccurrenceOfChart, bool isChart2016)
	{
		MemoryStream data = new MemoryStream();
		XmlWriter xmlWriter = CreateWriter(data);
		xmlWriter.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
		foreach (string key in relations.Keys)
		{
			DictionaryEntry dictionaryEntry = relations[key];
			SerializeChartElementRelation(xmlWriter, key, dictionaryEntry.Key.ToString(), dictionaryEntry.Value.ToString());
		}
		xmlWriter.WriteEndElement();
		xmlWriter.Flush();
		string text = (isChart2016 ? ("word/charts/_rels/chartEx" + OccurrenceOfChart.Replace("rId", "") + ".xml.rels") : (text = "word/charts/_rels/chart" + OccurrenceOfChart.Replace("rId", "") + ".xml.rels"));
		m_archive.AddItem(text, data, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
	}

	private void SerializeChartElementRelation(XmlWriter XmlWriter, string relationshipID, string relationshipType, string targetPath)
	{
		XmlWriter.WriteStartElement("Relationship");
		XmlWriter.WriteAttributeString("Id", relationshipID);
		XmlWriter.WriteAttributeString("Type", relationshipType);
		if ((targetPath.EndsWith(".xltx") || targetPath.EndsWith(".xlsx") || targetPath.EndsWith(".xlsm")) && string.Equals(relationshipType, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/oleObject"))
		{
			XmlWriter.WriteAttributeString("Target", targetPath.Replace(ControlChar.LineBreak, string.Empty));
			XmlWriter.WriteAttributeString("TargetMode", "External");
		}
		else
		{
			XmlWriter.WriteAttributeString("Target", targetPath.Replace("\\", "/").Replace(ControlChar.LineBreak, string.Empty));
		}
		XmlWriter.WriteEndElement();
	}

	private void SerializeRow(XmlWriter writer, WorksheetImpl sheet, string cellTag, int row)
	{
		if (writer == null)
		{
			throw new ArgumentNullException("writer");
		}
		writer.WriteStartElement("row");
		writer.WriteAttributeString("r", row.ToString());
		string value = sheet.FirstColumn + ":" + sheet.LastColumn;
		writer.WriteAttributeString("spans", value);
		SerializeCells(writer, sheet, cellTag, row);
		writer.WriteEndElement();
	}

	private void SerializeCells(XmlWriter writer, WorksheetImpl sheet, string cellTag, int row)
	{
		if (writer == null)
		{
			throw new ArgumentNullException("writer");
		}
		for (int i = sheet.FirstColumn; i <= sheet.LastColumn; i++)
		{
			SerializeCell(writer, sheet, cellTag, row, i);
		}
	}

	private void SerializeCell(XmlWriter writer, WorksheetImpl sheet, string cellTag, int row, int column)
	{
		if (writer == null)
		{
			throw new ArgumentNullException("writer");
		}
		writer.WriteStartElement(cellTag);
		string addressLocal = sheet.Range[row, column].AddressLocal;
		writer.WriteAttributeString("r", addressLocal);
		object value = sheet[row, column].Value2;
		if (value.GetType().Name == "String")
		{
			int num = sheet.ParentWorkbook.InnerSST.AddIncrease(value.ToString());
			writer.WriteAttributeString("t", "s");
			writer.WriteElementString("v", num.ToString());
		}
		else
		{
			writer.WriteElementString("v", sheet[row, column].Value2.ToString());
		}
		writer.WriteEndElement();
	}

	private void SerializeSST(XmlWriter writer, WorksheetImpl sheet)
	{
		SSTDictionary innerSST = sheet.ParentWorkbook.InnerSST;
		writer.WriteStartElement("sst", "http://schemas.openxmlformats.org/spreadsheetml/2006/main");
		int count = innerSST.Count;
		int labelSSTCount = innerSST.GetLabelSSTCount();
		writer.WriteAttributeString("uniqueCount", count.ToString());
		writer.WriteAttributeString("count", labelSSTCount.ToString());
		for (int i = 0; i < count; i++)
		{
			object sSTContentByIndex = innerSST.GetSSTContentByIndex(i);
			SerializeStringItem(writer, sSTContentByIndex);
		}
	}

	private void SerializeStringItem(XmlWriter writer, object objTextOrString)
	{
		if (writer == null)
		{
			throw new ArgumentNullException("writer");
		}
		if (objTextOrString == null)
		{
			throw new ArgumentNullException("text");
		}
		writer.WriteStartElement("si");
		string text = objTextOrString.ToString();
		writer.WriteStartElement("t");
		writer.WriteString(ReplaceInvalidSurrogateCharacters(text));
		writer.WriteEndElement();
		writer.WriteEndElement();
	}

	private string GetFileExtension(ImageRecord image)
	{
		string result = (image.IsMetafile ? ".wmf" : ".jpeg");
		if (image.ImageFormat.Equals(DocGen.DocIO.DLS.Entities.ImageFormat.Bmp))
		{
			result = ".bmp";
		}
		else if (image.ImageFormat.Equals(DocGen.DocIO.DLS.Entities.ImageFormat.Emf))
		{
			result = ".emf";
		}
		else if (image.ImageFormat.Equals(DocGen.DocIO.DLS.Entities.ImageFormat.Exif))
		{
			result = ".exif";
		}
		else if (image.ImageFormat.Equals(DocGen.DocIO.DLS.Entities.ImageFormat.Gif))
		{
			result = ".gif";
		}
		else if (image.ImageFormat.Equals(DocGen.DocIO.DLS.Entities.ImageFormat.Icon))
		{
			result = ".ico";
		}
		else if (image.ImageFormat.Equals(DocGen.DocIO.DLS.Entities.ImageFormat.Jpeg))
		{
			result = ".jpeg";
		}
		else if (image.ImageFormat.Equals(DocGen.DocIO.DLS.Entities.ImageFormat.MemoryBmp))
		{
			result = ".bmp";
		}
		else if (image.ImageFormat.Equals(DocGen.DocIO.DLS.Entities.ImageFormat.Png))
		{
			result = ".png";
		}
		else if (image.ImageFormat.Equals(DocGen.DocIO.DLS.Entities.ImageFormat.Tiff))
		{
			result = ".tif";
		}
		else if (image.ImageFormat.Equals(DocGen.DocIO.DLS.Entities.ImageFormat.Wmf))
		{
			result = ".wmf";
		}
		return result;
	}

	private void SerializeGroupShape(GroupShape shape)
	{
		m_writer.WriteStartElement("r", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeCharacterFormat(shape.ParaItemCharFormat);
		if (!shape.Is2007Shape && m_document.SaveFormatType != FormatType.Word2007)
		{
			m_writer.WriteStartElement("AlternateContent", "http://schemas.openxmlformats.org/markup-compatibility/2006");
			m_writer.WriteStartElement("Choice", "http://schemas.openxmlformats.org/markup-compatibility/2006");
			m_writer.WriteAttributeString("Requires", "wps");
			m_writer.WriteStartElement("drawing", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (shape.WrapFormat.TextWrappingStyle == TextWrappingStyle.Behind)
			{
				shape.IsBelowText = true;
			}
			if (shape.WrapFormat.TextWrappingStyle != 0)
			{
				SerializeAbsolutePicture(shape);
				m_writer.WriteEndElement();
			}
			else
			{
				SerializeInlinePicture(shape);
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			m_writer.WriteStartElement("Fallback", "http://schemas.openxmlformats.org/markup-compatibility/2006");
		}
		SerializeFallbackShape(shape);
		if (!shape.Is2007Shape && m_document.SaveFormatType != FormatType.Word2007)
		{
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeFallbackShape(GroupShape shape)
	{
		XmlReader reader = null;
		string empty = string.Empty;
		m_writer.WriteStartElement("pict", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteStartElement("group", "urn:schemas-microsoft-com:vml");
		string name = shape.Name;
		m_writer.WriteAttributeString("id", name);
		SerializeTextBoxFormat(shape, shape.Docx2007Props);
		string coordinateSize = shape.CoordinateSize;
		if (!string.IsNullOrEmpty(coordinateSize))
		{
			m_writer.WriteAttributeString("coordsize", coordinateSize);
		}
		float coordinateXOrigin = shape.CoordinateXOrigin;
		string value = string.Concat(str2: Math.Round(shape.CoordinateYOrigin, 2).ToString(CultureInfo.InvariantCulture), str0: Math.Round(coordinateXOrigin, 2).ToString(CultureInfo.InvariantCulture), str1: ",");
		if (!string.IsNullOrEmpty(value))
		{
			m_writer.WriteAttributeString("coordorigin", value);
		}
		int num = 1;
		foreach (ParagraphItem childShape2 in shape.ChildShapes)
		{
			if (childShape2 is ChildGroupShape)
			{
				SerializeFallbackNestedGroupShape(childShape2 as ChildGroupShape);
			}
			else if (childShape2 is ChildShape)
			{
				ChildShape childShape = childShape2 as ChildShape;
				SerializeFallbackChildShape(reader, childShape, name, empty, num);
				num++;
			}
		}
		if (shape.WrapFormat.TextWrappingStyle != TextWrappingStyle.InFrontOfText && shape.WrapFormat.TextWrappingStyle != TextWrappingStyle.Behind)
		{
			m_writer.WriteStartElement("wrap", "urn:schemas-microsoft-com:office:word");
			m_writer.WriteAttributeString("type", GetTextWrappingStyleAsString(shape.WrapFormat.TextWrappingStyle));
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeFallbackNestedGroupShape(ChildGroupShape shape)
	{
		XmlReader reader = null;
		string empty = string.Empty;
		m_writer.WriteStartElement("group", "urn:schemas-microsoft-com:vml");
		string name = shape.Name;
		m_writer.WriteAttributeString("id", name);
		string coordinateSize = shape.CoordinateSize;
		if (!string.IsNullOrEmpty(coordinateSize))
		{
			m_writer.WriteAttributeString("coordsize", coordinateSize);
		}
		string value = shape.CoordinateXOrigin.ToString(CultureInfo.InvariantCulture) + "," + shape.CoordinateYOrigin.ToString(CultureInfo.InvariantCulture);
		if (!string.IsNullOrEmpty(value))
		{
			m_writer.WriteAttributeString("coordorigin", value);
		}
		SerializeTextBoxFormat(shape, shape.Docx2007Props);
		int shapeId = 1;
		foreach (ChildShape childShape in shape.ChildShapes)
		{
			if (childShape is ChildGroupShape)
			{
				SerializeFallbackNestedGroupShape(childShape as ChildGroupShape);
			}
			else if (childShape != null)
			{
				SerializeFallbackChildShape(reader, childShape, shape.Name, empty, shapeId);
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializeFallbackChildShape(XmlReader reader, ChildShape childShape, string value, string shapeType, int shapeId)
	{
		if (childShape.AutoShapeType != 0 && childShape.AutoShapeType != AutoShapeType.Unknown && childShape.AutoShapeType != AutoShapeType.Rectangle && childShape.AutoShapeType != AutoShapeType.RoundedRectangle && childShape.AutoShapeType != AutoShapeType.Line && childShape.AutoShapeType != AutoShapeType.Oval)
		{
			SerializeShapeType(m_writer, childShape, ref shapeType, ref reader);
		}
		if (childShape.AutoShapeType == AutoShapeType.Rectangle)
		{
			m_writer.WriteStartElement("rect", "urn:schemas-microsoft-com:vml");
			if (!string.IsNullOrEmpty(childShape.Name))
			{
				m_writer.WriteAttributeString("id", childShape.Name);
			}
			else
			{
				value = childShape.AutoShapeType.ToString();
				m_writer.WriteAttributeString("id", value + " " + shapeId++);
			}
			if (!string.IsNullOrEmpty(shapeType))
			{
				m_writer.WriteAttributeString("type", shapeType);
			}
		}
		else if (childShape.AutoShapeType == AutoShapeType.RoundedRectangle)
		{
			m_writer.WriteStartElement("roundrect", "urn:schemas-microsoft-com:vml");
			if (!string.IsNullOrEmpty(childShape.Name))
			{
				m_writer.WriteAttributeString("id", childShape.Name);
			}
			else
			{
				value = childShape.AutoShapeType.ToString();
				m_writer.WriteAttributeString("id", value + " " + shapeId++);
			}
			if (!string.IsNullOrEmpty(shapeType))
			{
				m_writer.WriteAttributeString("type", shapeType);
			}
		}
		else if (childShape.AutoShapeType == AutoShapeType.Oval)
		{
			m_writer.WriteStartElement("oval", "urn:schemas-microsoft-com:vml");
			if (!string.IsNullOrEmpty(childShape.Name))
			{
				m_writer.WriteAttributeString("id", childShape.Name);
			}
			else
			{
				value = childShape.AutoShapeType.ToString();
				m_writer.WriteAttributeString("id", value + " " + shapeId++);
			}
			if (!string.IsNullOrEmpty(shapeType))
			{
				m_writer.WriteAttributeString("type", shapeType);
			}
		}
		else if (childShape.AutoShapeType == AutoShapeType.Line)
		{
			m_writer.WriteStartElement("line", "urn:schemas-microsoft-com:vml");
			if (!string.IsNullOrEmpty(childShape.Name))
			{
				m_writer.WriteAttributeString("id", childShape.Name);
			}
			else
			{
				value = childShape.AutoShapeType.ToString();
				m_writer.WriteAttributeString("id", value + " " + shapeId++);
			}
			if (!string.IsNullOrEmpty(shapeType))
			{
				m_writer.WriteAttributeString("type", shapeType);
			}
		}
		else if (reader != null)
		{
			m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
			value = reader.GetAttribute("coordsize");
			if (value != null)
			{
				m_writer.WriteAttributeString("coordsize", value);
			}
			value = reader.GetAttribute("spt", "urn:schemas-microsoft-com:office:office");
			if (value != null)
			{
				m_writer.WriteAttributeString("spt", "urn:schemas-microsoft-com:office:office", value);
			}
			value = reader.GetAttribute("adj");
			if (value != null)
			{
				m_writer.WriteAttributeString("adj", value);
			}
			value = reader.GetAttribute("path");
			if (value != null)
			{
				m_writer.WriteAttributeString("path", value);
			}
		}
		else
		{
			m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
			if (!string.IsNullOrEmpty(childShape.Name))
			{
				m_writer.WriteAttributeString("id", childShape.Name);
			}
			else
			{
				value = childShape.AutoShapeType.ToString();
				m_writer.WriteAttributeString("id", value + " " + childShape.ShapeID);
			}
			if (!string.IsNullOrEmpty(childShape.Type))
			{
				m_writer.WriteAttributeString("type", childShape.Type);
			}
			if (!string.IsNullOrEmpty(childShape.CoordinateSize))
			{
				m_writer.WriteAttributeString("coordsize", childShape.CoordinateSize);
			}
			if (childShape.CoordinateXOrigin != 0f && childShape.CoordinateYOrigin != 0f)
			{
				string value2 = childShape.CoordinateXOrigin.ToString(CultureInfo.InvariantCulture) + "," + childShape.CoordinateYOrigin.ToString(CultureInfo.InvariantCulture);
				if (!string.IsNullOrEmpty(value2))
				{
					m_writer.WriteAttributeString("coordorigin", value2);
				}
			}
		}
		if (childShape.IsHorizontalRule)
		{
			SerializeHorizontalRule(childShape, childShape.Docx2007Props);
		}
		else
		{
			SerializeTextBoxFormat(childShape, childShape.Docx2007Props);
		}
		SerializeFillEffects(childShape, childShape.Docx2007Props);
		SerializeDocxStream(childShape.Docx2007Props, "callout");
		SerializeDocxStream(childShape.Docx2007Props, "wrap");
		if ((childShape.IsPicture && childShape.ImageBytes != null) || (childShape.FillFormat.ImageRecord != null && childShape.FillFormat.FillType != FillType.FillTextured && childShape.FillFormat.FillType != FillType.FillPicture && childShape.FillFormat.FillType != FillType.FillPatterned))
		{
			m_writer.WriteStartElement("imagedata", "urn:schemas-microsoft-com:vml");
			byte[] array = null;
			if (childShape.IsPicture)
			{
				array = childShape.ImageBytes;
			}
			if (childShape.FillFormat.ImageRecord != null)
			{
				array = childShape.FillFormat.ImageRecord.ImageBytes;
			}
			if (childShape.FillFormat.FillType == FillType.FillPatterned && childShape.FillFormat.Pattern != PatternType.Mixed)
			{
				array = GetPatternImageBytes(childShape.FillFormat.Pattern.ToString());
			}
			if (array != null)
			{
				Entity baseEntity = GetBaseEntity(childShape);
				string text = string.Empty;
				WPicture wPicture = new WPicture(m_document);
				wPicture.LoadImage(array);
				UpdateImages(wPicture);
				if (baseEntity is WSection)
				{
					text = AddImageRelation(DocumentImages, wPicture.ImageRecord, IsNeedToSkipImageRelation(wPicture));
				}
				else if (baseEntity is HeaderFooter)
				{
					text = UpdateHFImageRels(baseEntity as HeaderFooter, wPicture);
				}
				m_writer.WriteAttributeString("id", "http://schemas.openxmlformats.org/officeDocument/2006/relationships", text.ToString());
				if (childShape.IsPicture && childShape.Title != null)
				{
					m_writer.WriteAttributeString("title", "urn:schemas-microsoft-com:office:office", childShape.Title);
				}
				if (!childShape.IsPicture && childShape.FillFormat.Contrast != float.MinValue)
				{
					uint num = Convert.ToUInt32(65536f * (1f - childShape.FillFormat.Contrast / 100f));
					m_writer.WriteAttributeString("gain", num.ToString(CultureInfo.InvariantCulture) + "f");
				}
				if (!childShape.FillFormat.ReColorTarget.IsEmpty)
				{
					m_writer.WriteAttributeString("recolortarget", "#" + GetRGBCode(childShape.FillFormat.ReColorTarget));
				}
				if (childShape.IsPicture)
				{
					if ((double)childShape.FillFormat.SourceRectangle.TopOffset != 0.0)
					{
						m_writer.WriteAttributeString("croptop", Math.Round(SetCroppingValue(childShape.FillFormat.SourceRectangle.TopOffset)).ToString(CultureInfo.InvariantCulture) + "f");
					}
					if ((double)childShape.FillFormat.SourceRectangle.BottomOffset != 0.0)
					{
						m_writer.WriteAttributeString("cropbottom", Math.Round(SetCroppingValue(childShape.FillFormat.SourceRectangle.BottomOffset)).ToString(CultureInfo.InvariantCulture) + "f");
					}
					if ((double)childShape.FillFormat.SourceRectangle.LeftOffset != 0.0)
					{
						m_writer.WriteAttributeString("cropleft", Math.Round(SetCroppingValue(childShape.FillFormat.SourceRectangle.LeftOffset)).ToString(CultureInfo.InvariantCulture) + "f");
					}
					if ((double)childShape.FillFormat.SourceRectangle.RightOffset != 0.0)
					{
						m_writer.WriteAttributeString("cropright", Math.Round(SetCroppingValue(childShape.FillFormat.SourceRectangle.RightOffset)).ToString(CultureInfo.InvariantCulture) + "f");
					}
				}
				m_writer.WriteEndElement();
			}
		}
		if (childShape.Docx2007Props.ContainsKey("textpath"))
		{
			SerializeDocxStream(childShape.Docx2007Props, "textpath");
		}
		if (childShape.Docx2007Props.ContainsKey("path"))
		{
			SerializeDocxStream(childShape.Docx2007Props, "path");
		}
		if (childShape.Docx2007Props.ContainsKey("shadow"))
		{
			SerializeDocxStream(childShape.Docx2007Props, "shadow");
		}
		if (childShape.Docx2007Props.ContainsKey("shadow1"))
		{
			SerializeDocx2007ShadowFormat(childShape);
		}
		if (!childShape.IsPicture && (childShape.TextBody.Items.Count > 0 || childShape.TextFrame.HasInternalMargin))
		{
			SerializeChildShapeTextBoxContent(childShape.TextBody, childShape.TextFrame);
		}
		m_writer.WriteEndElement();
		shapeId++;
	}

	private void SerializeAutoShape(Shape shape)
	{
		if (shape.AutoShapeType == AutoShapeType.Unknown && shape.Path2DList == null && shape.Path == null)
		{
			return;
		}
		m_writer.WriteStartElement("r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeCharacterFormat(shape.ParaItemCharFormat);
		if (!shape.Is2007Shape)
		{
			m_writer.WriteStartElement("AlternateContent", "http://schemas.openxmlformats.org/markup-compatibility/2006");
			m_writer.WriteStartElement("Choice", "http://schemas.openxmlformats.org/markup-compatibility/2006");
			m_writer.WriteAttributeString("Requires", "wps");
			m_writer.WriteStartElement("drawing", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			IsSerializingChoiceContent = true;
			if (shape.WrapFormat.TextWrappingStyle != 0)
			{
				SerializeAbsolutePicture(shape);
			}
			else
			{
				SerializeInlinePicture(shape);
			}
			IsSerializingChoiceContent = false;
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			m_writer.WriteStartElement("Fallback", "http://schemas.openxmlformats.org/markup-compatibility/2006");
			m_isFallBack = true;
		}
		SerializeFallbackShape(shape);
		if (!shape.Is2007Shape)
		{
			m_writer.WriteEndElement();
			m_isFallBack = false;
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeFallbackShape(Shape shape)
	{
		if (shape.AutoShapeType == AutoShapeType.Unknown && shape.Path2DList == null && shape.Path == null)
		{
			return;
		}
		XmlReader reader = null;
		string shapeType = string.Empty;
		m_writer.WriteStartElement("pict", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (shape.AutoShapeType != AutoShapeType.Unknown && shape.AutoShapeType != AutoShapeType.Rectangle && shape.AutoShapeType != AutoShapeType.RoundedRectangle && shape.AutoShapeType != AutoShapeType.Line && shape.AutoShapeType != AutoShapeType.Oval)
		{
			SerializeShapeType(m_writer, shape, ref shapeType, ref reader);
		}
		if (shape.AutoShapeType == AutoShapeType.Rectangle)
		{
			m_writer.WriteStartElement("rect", "urn:schemas-microsoft-com:vml");
		}
		else if (shape.AutoShapeType == AutoShapeType.RoundedRectangle)
		{
			m_writer.WriteStartElement("roundrect", "urn:schemas-microsoft-com:vml");
		}
		else if (shape.AutoShapeType == AutoShapeType.Oval)
		{
			m_writer.WriteStartElement("oval", "urn:schemas-microsoft-com:vml");
		}
		else if (shape.AutoShapeType == AutoShapeType.Line)
		{
			m_writer.WriteStartElement("line", "urn:schemas-microsoft-com:vml");
		}
		else if (reader != null)
		{
			m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
			string attribute = reader.GetAttribute("id");
			m_writer.WriteAttributeString("id", attribute + " " + (m_document.AutoShapeCollection.Count + 1));
			attribute = reader.GetAttribute("coordsize");
			if (attribute != null)
			{
				m_writer.WriteAttributeString("coordsize", attribute);
			}
			attribute = reader.GetAttribute("spt", "urn:schemas-microsoft-com:office:office");
			if (attribute != null)
			{
				m_writer.WriteAttributeString("spt", "urn:schemas-microsoft-com:office:office", attribute);
			}
			attribute = reader.GetAttribute("adj");
			if (attribute != null)
			{
				m_writer.WriteAttributeString("adj", attribute);
			}
			attribute = reader.GetAttribute("path");
			if (attribute != null)
			{
				m_writer.WriteAttributeString("path", attribute);
			}
		}
		else
		{
			m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
			m_writer.WriteAttributeString("type", "#" + shapeType);
		}
		if (shape.IsHorizontalRule)
		{
			SerializeHorizontalRule(shape, shape.Docx2007Props);
		}
		else
		{
			SerializeTextBoxFormat(shape, shape.Docx2007Props);
		}
		SerializeFillEffects(shape, shape.Docx2007Props);
		SerializeDocxStream(shape.Docx2007Props, "callout");
		SerializeDocxStream(shape.Docx2007Props, "wrap");
		if (shape.Docx2007Props.ContainsKey("shadow1"))
		{
			SerializeDocx2007ShadowFormat(shape);
		}
		if (shape.Docx2007Props.ContainsKey("extrusion"))
		{
			for (int i = 0; i < shape.EffectList.Count; i++)
			{
				if (shape.EffectList[i].IsShapeProperties)
				{
					SerializeDocx2007Extrusion(shape.EffectList[i].ThreeDFormat);
				}
			}
		}
		if (shape.TextBody.Items.Count > 0)
		{
			m_writer.WriteStartElement("textbox", "urn:schemas-microsoft-com:vml");
			if (shape.TextFrame.HasInternalMargin && shape.TextFrame.InternalMargin.PropertiesHash.Count > 0)
			{
				SerializeInsetAttribute(shape.TextFrame);
			}
			SerializeTextBoxStyle(shape.TextFrame);
			m_writer.WriteStartElement("txbxContent", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			int j = 0;
			for (int count = shape.TextBody.Items.Count; j < count; j++)
			{
				SerializeBodyItem(shape.TextBody.Items[j], isLastSection: false);
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeDocx2007Extrusion(ThreeDFormat threeDFormat)
	{
		m_writer.WriteStartElement("extrusion", "urn:schemas-microsoft-com:office:office");
		if (threeDFormat.PropertiesHash.ContainsKey(73))
		{
			m_writer.WriteAttributeString("ext", "urn:schemas-microsoft-com:vml", threeDFormat.Extension.ToString());
		}
		if (threeDFormat.PropertiesHash.ContainsKey(12))
		{
			m_writer.WriteAttributeString("color", "#" + GetRGBCode(threeDFormat.ExtrusionColor));
		}
		if (threeDFormat.PropertiesHash.ContainsKey(36))
		{
			m_writer.WriteAttributeString("ext", "urn:schemas-microsoft-com:vml", threeDFormat.ColorMode.ToString());
		}
		if (threeDFormat.PropertiesHash.ContainsKey(67))
		{
			m_writer.WriteAttributeString("on", threeDFormat.Visible ? "t" : "f");
		}
		if (threeDFormat.PropertiesHash.ContainsKey(72))
		{
			m_writer.WriteAttributeString("metal", threeDFormat.Metal ? "t" : "f");
		}
		string text = null;
		if (threeDFormat.PropertiesHash.ContainsKey(53))
		{
			text = threeDFormat.RotationAngleX.ToString(CultureInfo.InvariantCulture);
		}
		if (threeDFormat.PropertiesHash.ContainsKey(54))
		{
			text = text + "," + threeDFormat.RotationAngleY.ToString(CultureInfo.InvariantCulture);
		}
		if (text != null)
		{
			m_writer.WriteAttributeString("rotationangle", text.ToString());
		}
		if (threeDFormat.PropertiesHash.ContainsKey(49))
		{
			m_writer.WriteAttributeString("orientationangle", threeDFormat.OrientationAngle.ToString(CultureInfo.InvariantCulture));
		}
		string text2 = null;
		if (threeDFormat.PropertiesHash.ContainsKey(62))
		{
			text2 = threeDFormat.ViewPointX.ToString(CultureInfo.InvariantCulture) + "pt";
		}
		if (threeDFormat.PropertiesHash.ContainsKey(63))
		{
			text2 = text2 + "," + threeDFormat.ViewPointY.ToString(CultureInfo.InvariantCulture) + "pt";
		}
		if (threeDFormat.PropertiesHash.ContainsKey(64))
		{
			text2 = text2 + "," + threeDFormat.ViewPointZ.ToString(CultureInfo.InvariantCulture) + "pt";
		}
		if (text2 != null)
		{
			m_writer.WriteAttributeString("viewpoint", text2.ToString());
		}
		string text3 = null;
		if (threeDFormat.PropertiesHash.ContainsKey(65))
		{
			text3 = threeDFormat.ViewPointOriginX.ToString(CultureInfo.InvariantCulture);
		}
		if (threeDFormat.PropertiesHash.ContainsKey(66))
		{
			text3 = text3 + "," + threeDFormat.ViewPointOriginY.ToString(CultureInfo.InvariantCulture);
		}
		if (text3 != null)
		{
			m_writer.WriteAttributeString("viewpointorigin", text3.ToString());
		}
		if (threeDFormat.PropertiesHash.ContainsKey(60))
		{
			m_writer.WriteAttributeString("skewangle", ((int)threeDFormat.SkewAngle).ToString(CultureInfo.InvariantCulture));
		}
		if (threeDFormat.PropertiesHash.ContainsKey(59))
		{
			m_writer.WriteAttributeString("skewamt", ((int)threeDFormat.SkewAmount).ToString(CultureInfo.InvariantCulture));
		}
		string text4 = null;
		if (threeDFormat.PropertiesHash.ContainsKey(31))
		{
			text4 = threeDFormat.LightRigRotationX.ToString(CultureInfo.InvariantCulture);
		}
		if (threeDFormat.PropertiesHash.ContainsKey(32))
		{
			text4 = text4 + "," + threeDFormat.LightRigRotationY.ToString(CultureInfo.InvariantCulture);
		}
		if (threeDFormat.PropertiesHash.ContainsKey(33))
		{
			text4 = text4 + "," + threeDFormat.LightRigRotationZ.ToString(CultureInfo.InvariantCulture);
		}
		if (text4 != null)
		{
			m_writer.WriteAttributeString("lightposition", text4.ToString());
		}
		string text5 = null;
		if (threeDFormat.PropertiesHash.ContainsKey(43))
		{
			text5 = threeDFormat.LightRigRotation2X.ToString(CultureInfo.InvariantCulture);
		}
		if (threeDFormat.PropertiesHash.ContainsKey(44))
		{
			text5 = text5 + "," + threeDFormat.LightRigRotation2Y.ToString(CultureInfo.InvariantCulture);
		}
		if (threeDFormat.PropertiesHash.ContainsKey(45))
		{
			text5 = text5 + "," + threeDFormat.LightRigRotation2Z.ToString(CultureInfo.InvariantCulture);
		}
		if (text5 != null)
		{
			m_writer.WriteAttributeString("lightposition2", text5.ToString());
		}
		string text6 = null;
		if (threeDFormat.PropertiesHash.ContainsKey(55))
		{
			text6 = threeDFormat.RotationCenterX.ToString(CultureInfo.InvariantCulture);
		}
		if (threeDFormat.PropertiesHash.ContainsKey(56))
		{
			text6 = text6 + "," + threeDFormat.RotationCenterY.ToString(CultureInfo.InvariantCulture);
		}
		if (threeDFormat.PropertiesHash.ContainsKey(57))
		{
			text6 = text6 + "," + threeDFormat.RotationCenterZ.ToString(CultureInfo.InvariantCulture);
		}
		if (text6 != null)
		{
			m_writer.WriteAttributeString("rotationcenter", text6.ToString());
		}
		string text7 = null;
		if (threeDFormat.PropertiesHash.ContainsKey(46))
		{
			text7 = threeDFormat.RotationX.ToString(CultureInfo.InvariantCulture);
		}
		if (threeDFormat.PropertiesHash.ContainsKey(47))
		{
			text7 = text7 + "," + threeDFormat.RotationY.ToString(CultureInfo.InvariantCulture);
		}
		if (threeDFormat.PropertiesHash.ContainsKey(48))
		{
			text7 = text7 + "," + threeDFormat.RotationZ.ToString(CultureInfo.InvariantCulture);
		}
		if (text7 != null)
		{
			m_writer.WriteAttributeString("orientation", text7.ToString());
		}
		if (threeDFormat.PropertiesHash.ContainsKey(51))
		{
			m_writer.WriteAttributeString("type", threeDFormat.ExtrusionType.ToString().ToLower());
		}
		if (threeDFormat.PropertiesHash.ContainsKey(61))
		{
			if (threeDFormat.Specularity >= 0f && threeDFormat.Specularity <= 1f)
			{
				m_writer.WriteAttributeString("specularity", ((int)threeDFormat.Specularity).ToString(CultureInfo.InvariantCulture));
			}
			else
			{
				m_writer.WriteAttributeString("specularity", Math.Round(threeDFormat.Specularity * 65536f).ToString(CultureInfo.InvariantCulture) + "f");
			}
		}
		if (threeDFormat.PropertiesHash.ContainsKey(58))
		{
			m_writer.WriteAttributeString("shininess", ((int)threeDFormat.Shininess).ToString(CultureInfo.InvariantCulture));
		}
		if (threeDFormat.PropertiesHash.ContainsKey(52))
		{
			m_writer.WriteAttributeString("render", threeDFormat.ExtrusionRenderMode.ToString().ToLower());
		}
		if (threeDFormat.PropertiesHash.ContainsKey(50))
		{
			m_writer.WriteAttributeString("plane", threeDFormat.ExtrusionPlane.ToString().ToLower());
		}
		if (threeDFormat.PropertiesHash.ContainsKey(41))
		{
			if (threeDFormat.LightLevel >= 0f && threeDFormat.LightLevel <= 1f)
			{
				m_writer.WriteAttributeString("lightlevel", threeDFormat.LightLevel.ToString(CultureInfo.InvariantCulture));
			}
			else
			{
				m_writer.WriteAttributeString("lightlevel", Math.Round(threeDFormat.LightLevel * 65536f).ToString(CultureInfo.InvariantCulture) + "f");
			}
		}
		if (threeDFormat.PropertiesHash.ContainsKey(42))
		{
			if (threeDFormat.Specularity >= 0f && threeDFormat.Specularity <= 1f)
			{
				m_writer.WriteAttributeString("lightlevel2", threeDFormat.LightLevel2.ToString(CultureInfo.InvariantCulture));
			}
			else
			{
				m_writer.WriteAttributeString("lightlevel2", Math.Round(threeDFormat.LightLevel2 * 65536f).ToString(CultureInfo.InvariantCulture) + "f");
			}
		}
		if (threeDFormat.PropertiesHash.ContainsKey(34))
		{
			if (threeDFormat.Brightness >= 0f && threeDFormat.Brightness <= 1f)
			{
				m_writer.WriteAttributeString("brightness", threeDFormat.Brightness.ToString(CultureInfo.InvariantCulture));
			}
			else
			{
				m_writer.WriteAttributeString("brightness", Math.Round(threeDFormat.Brightness * 65536f).ToString(CultureInfo.InvariantCulture) + "f");
			}
		}
		if (threeDFormat.PropertiesHash.ContainsKey(69))
		{
			m_writer.WriteAttributeString("lightharsh", threeDFormat.LightHarsh ? "t" : "f");
		}
		if (threeDFormat.PropertiesHash.ContainsKey(70))
		{
			m_writer.WriteAttributeString("lightharsh2", threeDFormat.LightHarsh2 ? "t" : "f");
		}
		if (threeDFormat.PropertiesHash.ContainsKey(68))
		{
			m_writer.WriteAttributeString("lightface", threeDFormat.LightFace ? "t" : "f");
		}
		if (threeDFormat.PropertiesHash.ContainsKey(71))
		{
			m_writer.WriteAttributeString("lockrotationcenter", threeDFormat.LockRotationCenter ? "t" : "f");
		}
		if (threeDFormat.PropertiesHash.ContainsKey(75))
		{
			m_writer.WriteAttributeString("autorotationcenter", threeDFormat.AutoRotationCenter ? "t" : "f");
		}
		if (threeDFormat.PropertiesHash.ContainsKey(39))
		{
			if (threeDFormat.Facet >= 0f && threeDFormat.Facet <= 1f)
			{
				m_writer.WriteAttributeString("facet", threeDFormat.Facet.ToString(CultureInfo.InvariantCulture));
			}
			else
			{
				m_writer.WriteAttributeString("facet", Math.Round(threeDFormat.Facet * 65536f).ToString(CultureInfo.InvariantCulture));
			}
		}
		if (threeDFormat.PropertiesHash.ContainsKey(37))
		{
			if (threeDFormat.Diffusity >= 0f && threeDFormat.Diffusity <= 1f)
			{
				m_writer.WriteAttributeString("diffusity", threeDFormat.Diffusity.ToString(CultureInfo.InvariantCulture));
			}
			else
			{
				m_writer.WriteAttributeString("diffusity", Math.Round(threeDFormat.Diffusity * 65536f).ToString(CultureInfo.InvariantCulture));
			}
		}
		if (threeDFormat.PropertiesHash.ContainsKey(40))
		{
			m_writer.WriteAttributeString("foredepth", ((int)threeDFormat.ForeDepth).ToString(CultureInfo.InvariantCulture) + "pt");
		}
		if (threeDFormat.PropertiesHash.ContainsKey(74))
		{
			m_writer.WriteAttributeString("backdepth", ((int)threeDFormat.BackDepth).ToString(CultureInfo.InvariantCulture) + "pt");
		}
		if (threeDFormat.PropertiesHash.ContainsKey(38))
		{
			m_writer.WriteAttributeString("edge", ((int)threeDFormat.Edge).ToString(CultureInfo.InvariantCulture) + "pt");
		}
		m_writer.WriteEndElement();
	}

	private void SerializeDocx2007ShadowFormat(Shape shape)
	{
		for (int i = 0; i < shape.EffectList.Count; i++)
		{
			if (!shape.EffectList[i].IsShadowEffect)
			{
				continue;
			}
			m_writer.WriteStartElement("shadow", "urn:schemas-microsoft-com:vml");
			if (shape.EffectList[i].ShadowFormat.HasKey(20))
			{
				m_writer.WriteAttributeString("on", shape.EffectList[i].ShadowFormat.Visible ? "t" : "f");
			}
			if (shape.EffectList[i].ShadowFormat.HasKey(19))
			{
				string text = shape.EffectList[i].ShadowFormat.ShadowType.ToString();
				m_writer.WriteAttributeString("type", text.ToLower().ToString());
			}
			if (shape.EffectList[i].ShadowFormat.HasKey(21))
			{
				if (shape.EffectList[i].ShadowFormat.Transparency >= 0f && shape.EffectList[i].ShadowFormat.Transparency <= 1f)
				{
					m_writer.WriteAttributeString("opacity", shape.EffectList[i].ShadowFormat.Transparency.ToString(CultureInfo.InvariantCulture));
				}
				else
				{
					m_writer.WriteAttributeString("opacity", Math.Round(shape.EffectList[i].ShadowFormat.Transparency * 65536f).ToString(CultureInfo.InvariantCulture) + "f");
				}
			}
			if (shape.EffectList[i].ShadowFormat.HasKey(16))
			{
				m_writer.WriteAttributeString("color", "#" + GetRGBCode(shape.EffectList[i].ShadowFormat.Color));
			}
			if (shape.EffectList[i].ShadowFormat.HasKey(17))
			{
				m_writer.WriteAttributeString("color2", "#" + GetRGBCode(shape.EffectList[i].ShadowFormat.Color2));
			}
			if (shape.EffectList[i].ShadowFormat.ShadowPerspectiveMatrix != null)
			{
				m_writer.WriteAttributeString("matrix", shape.EffectList[i].ShadowFormat.ShadowPerspectiveMatrix.ToString());
			}
			string text2 = null;
			if (shape.EffectList[i].ShadowFormat.HasKey(0))
			{
				text2 = shape.EffectList[i].ShadowFormat.ShadowOffsetX.ToString(CultureInfo.InvariantCulture) + "pt";
			}
			if (shape.EffectList[i].ShadowFormat.HasKey(1))
			{
				text2 = text2 + "," + shape.EffectList[i].ShadowFormat.ShadowOffsetY.ToString(CultureInfo.InvariantCulture) + "pt";
			}
			if (text2 != null)
			{
				m_writer.WriteAttributeString("offset", text2.ToString());
			}
			string text3 = null;
			if (shape.EffectList[i].ShadowFormat.HasKey(2))
			{
				text3 = shape.EffectList[i].ShadowFormat.ShadowOffset2X.ToString(CultureInfo.InvariantCulture) + "pt";
			}
			if (shape.EffectList[i].ShadowFormat.HasKey(3))
			{
				text3 = text3 + "," + shape.EffectList[i].ShadowFormat.ShadowOffset2Y.ToString(CultureInfo.InvariantCulture) + "pt";
			}
			if (text3 != null)
			{
				m_writer.WriteAttributeString("offset2", text3.ToString());
			}
			string text4 = null;
			if (shape.EffectList[i].ShadowFormat.HasKey(4))
			{
				text4 = shape.EffectList[i].ShadowFormat.OriginX.ToString(CultureInfo.InvariantCulture);
			}
			if (shape.EffectList[i].ShadowFormat.HasKey(5))
			{
				text4 = text4 + "," + shape.EffectList[i].ShadowFormat.OriginY.ToString(CultureInfo.InvariantCulture);
			}
			if (text4 != null)
			{
				m_writer.WriteAttributeString("origin", text4.ToString());
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeDocx2007ShadowFormat(ChildShape shape)
	{
		for (int i = 0; i < shape.EffectList.Count; i++)
		{
			if (!shape.EffectList[i].IsShadowEffect)
			{
				continue;
			}
			m_writer.WriteStartElement("shadow", "urn:schemas-microsoft-com:vml");
			if (shape.EffectList[i].ShadowFormat.HasKey(20))
			{
				m_writer.WriteAttributeString("on", shape.EffectList[i].ShadowFormat.Visible ? "t" : "f");
			}
			if (shape.EffectList[i].ShadowFormat.HasKey(19))
			{
				string text = shape.EffectList[i].ShadowFormat.ShadowType.ToString();
				m_writer.WriteAttributeString("type", text.ToLower().ToString());
			}
			if (shape.EffectList[i].ShadowFormat.HasKey(21))
			{
				if (shape.EffectList[i].ShadowFormat.Transparency >= 0f && shape.EffectList[i].ShadowFormat.Transparency <= 1f)
				{
					m_writer.WriteAttributeString("opacity", shape.EffectList[i].ShadowFormat.Transparency.ToString(CultureInfo.InvariantCulture));
				}
				else
				{
					m_writer.WriteAttributeString("opacity", Math.Round(shape.EffectList[i].ShadowFormat.Transparency * 65536f).ToString(CultureInfo.InvariantCulture) + "f");
				}
			}
			if (shape.EffectList[i].ShadowFormat.HasKey(16))
			{
				m_writer.WriteAttributeString("color", "#" + GetRGBCode(shape.EffectList[i].ShadowFormat.Color));
			}
			if (shape.EffectList[i].ShadowFormat.HasKey(17))
			{
				m_writer.WriteAttributeString("color2", "#" + GetRGBCode(shape.EffectList[i].ShadowFormat.Color2));
			}
			if (shape.EffectList[i].ShadowFormat.ShadowPerspectiveMatrix != null)
			{
				m_writer.WriteAttributeString("matrix", shape.EffectList[i].ShadowFormat.ShadowPerspectiveMatrix.ToString());
			}
			string text2 = null;
			if (shape.EffectList[i].ShadowFormat.HasKey(0))
			{
				text2 = shape.EffectList[i].ShadowFormat.ShadowOffsetX.ToString(CultureInfo.InvariantCulture) + "pt";
			}
			if (shape.EffectList[i].ShadowFormat.HasKey(1))
			{
				text2 = text2 + "," + shape.EffectList[i].ShadowFormat.ShadowOffsetY.ToString(CultureInfo.InvariantCulture) + "pt";
			}
			if (text2 != null)
			{
				m_writer.WriteAttributeString("offset", text2.ToString());
			}
			string text3 = null;
			if (shape.EffectList[i].ShadowFormat.HasKey(2))
			{
				text3 = shape.EffectList[i].ShadowFormat.ShadowOffset2X.ToString(CultureInfo.InvariantCulture) + "pt";
			}
			if (shape.EffectList[i].ShadowFormat.HasKey(3))
			{
				text3 = text3 + "," + shape.EffectList[i].ShadowFormat.ShadowOffset2Y.ToString(CultureInfo.InvariantCulture) + "pt";
			}
			if (text3 != null)
			{
				m_writer.WriteAttributeString("offset2", text3.ToString());
			}
			string text4 = null;
			if (shape.EffectList[i].ShadowFormat.HasKey(4))
			{
				text4 = shape.EffectList[i].ShadowFormat.OriginX.ToString(CultureInfo.InvariantCulture);
			}
			if (shape.EffectList[i].ShadowFormat.HasKey(5))
			{
				text4 = text4 + "," + shape.EffectList[i].ShadowFormat.OriginY.ToString(CultureInfo.InvariantCulture);
			}
			if (text4 != null)
			{
				m_writer.WriteAttributeString("origin", text4.ToString());
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeHorizontalRule(Shape shape, Dictionary<string, Stream> dictionary)
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.Append("width:");
		stringBuilder.Append(shape.Width.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;height:");
		stringBuilder.Append(shape.Height.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;");
		SerializeFlip(shape, stringBuilder);
		if (shape.DocxStyleProps.Count > 0)
		{
			foreach (string docxStyleProp in shape.DocxStyleProps)
			{
				stringBuilder.Append(";" + docxStyleProp);
			}
		}
		m_writer.WriteAttributeString("style", stringBuilder.ToString());
		SerializeHorizontalRule(shape);
		if (!string.IsNullOrEmpty(shape.Adjustments))
		{
			m_writer.WriteAttributeString("adj", shape.Adjustments);
		}
		if (shape.FillFormat.Fill)
		{
			m_writer.WriteAttributeString("filled", "t");
			if (shape.FillFormat.FillType == FillType.FillSolid && !shape.FillFormat.Color.IsEmpty)
			{
				m_writer.WriteAttributeString("fillcolor", "#" + GetRGBCode(shape.FillFormat.Color));
			}
			else if (!shape.FillFormat.ForeColor.IsEmpty)
			{
				m_writer.WriteAttributeString("fillcolor", "#" + GetRGBCode(shape.FillFormat.ForeColor));
			}
		}
		else
		{
			m_writer.WriteAttributeString("filled", "f");
		}
		if (!shape.LayoutInCell)
		{
			m_writer.WriteAttributeString("allowincell", "urn:schemas-microsoft-com:office:office", "f");
		}
		if (!shape.LineFormat.Line)
		{
			m_writer.WriteAttributeString("stroked", "f");
			if (shape.LineFormat.Color != Color.Empty)
			{
				m_writer.WriteAttributeString("strokecolor", "#" + GetRGBCode(shape.LineFormat.Color));
			}
		}
		else
		{
			string dashStyle = GetDashStyle(shape.LineFormat.DashStyle, is2007: true);
			string lineStyle = GetLineStyle(shape.LineFormat.Style, is2007: true);
			if (dashStyle != null || lineStyle != null)
			{
				m_writer.WriteAttributeString("strokecolor", "#" + GetRGBCode(shape.LineFormat.Color));
				m_writer.WriteAttributeString("strokeweight", shape.LineFormat.Weight.ToString(CultureInfo.InvariantCulture) + "pt");
				m_writer.WriteStartElement("stroke", "urn:schemas-microsoft-com:vml");
				if (dashStyle != null)
				{
					m_writer.WriteAttributeString("dashstyle", dashStyle);
				}
				if (lineStyle != null)
				{
					m_writer.WriteAttributeString("linestyle", lineStyle);
				}
				m_writer.WriteAttributeString("joinstyle", GetLineJoinStyle(shape.LineFormat.LineJoin));
				m_writer.WriteAttributeString("endcap", GetLineCapStyle(shape.LineFormat.LineCap, is2007: true));
				m_writer.WriteEndElement();
			}
		}
		if (shape.WrapFormat.TextWrappingStyle != TextWrappingStyle.InFrontOfText && shape.WrapFormat.TextWrappingStyle != TextWrappingStyle.Behind)
		{
			m_writer.WriteStartElement("wrap", "urn:schemas-microsoft-com:office:word");
			m_writer.WriteAttributeString("type", GetTextWrappingStyleAsString(shape.WrapFormat.TextWrappingStyle));
			m_writer.WriteEndElement();
		}
	}

	private void SerializeHorizontalRule(ChildShape shape, Dictionary<string, Stream> dictionary)
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.Append("width:");
		stringBuilder.Append(shape.Width.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;height:");
		stringBuilder.Append(shape.Height.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;");
		if (shape.DocxStyleProps.Count > 0)
		{
			foreach (string docxStyleProp in shape.DocxStyleProps)
			{
				stringBuilder.Append(";" + docxStyleProp);
			}
		}
		m_writer.WriteAttributeString("style", stringBuilder.ToString());
		if (!string.IsNullOrEmpty(shape.Adjustments))
		{
			m_writer.WriteAttributeString("adj", shape.Adjustments);
		}
		if (shape.FillFormat.Fill && shape.FillFormat.Color != Color.Empty)
		{
			m_writer.WriteAttributeString("filled", "t");
			if (shape.FillFormat.FillType == FillType.FillSolid && !shape.FillFormat.Color.IsEmpty)
			{
				m_writer.WriteAttributeString("fillcolor", "#" + GetRGBCode(shape.FillFormat.Color));
			}
			else if (!shape.FillFormat.ForeColor.IsEmpty)
			{
				m_writer.WriteAttributeString("fillcolor", "#" + GetRGBCode(shape.FillFormat.ForeColor));
			}
		}
		else
		{
			m_writer.WriteAttributeString("filled", "f");
		}
		if (!shape.LayoutInCell)
		{
			m_writer.WriteAttributeString("allowincell", "urn:schemas-microsoft-com:office:office", "f");
		}
		if (!shape.LineFormat.Line)
		{
			m_writer.WriteAttributeString("stroked", "f");
			return;
		}
		string dashStyle = GetDashStyle(shape.LineFormat.DashStyle, is2007: true);
		string lineStyle = GetLineStyle(shape.LineFormat.Style, is2007: true);
		if (dashStyle != null || lineStyle != null)
		{
			if (shape.LineFormat.Is2007StrokeDefined)
			{
				m_writer.WriteAttributeString("stroked", "t");
			}
			m_writer.WriteAttributeString("strokecolor", "#" + GetRGBCode(shape.LineFormat.Color));
			m_writer.WriteAttributeString("strokeweight", shape.LineFormat.Weight.ToString(CultureInfo.InvariantCulture) + "pt");
			m_writer.WriteStartElement("stroke", "urn:schemas-microsoft-com:vml");
			if (dashStyle != null)
			{
				m_writer.WriteAttributeString("dashstyle", dashStyle);
			}
			if (lineStyle != null)
			{
				m_writer.WriteAttributeString("linestyle", lineStyle);
			}
			m_writer.WriteAttributeString("joinstyle", GetLineJoinStyle(shape.LineFormat.LineJoin));
			m_writer.WriteAttributeString("endcap", GetLineCapStyle(shape.LineFormat.LineCap, is2007: true));
			m_writer.WriteEndElement();
		}
	}

	private void SerializeHorizontalRule(Shape shape)
	{
		if (shape.PropertiesHash.ContainsKey(0))
		{
			m_writer.WriteAttributeString("hrpct", "urn:schemas-microsoft-com:office:office", (shape.WidthScale * 10f).ToString());
		}
		string value = "left";
		if (shape.HorizontalAlignment == ShapeHorizontalAlignment.Center)
		{
			value = "center";
		}
		else if (shape.HorizontalAlignment == ShapeHorizontalAlignment.Right)
		{
			value = "right";
		}
		m_writer.WriteAttributeString("hralign", "urn:schemas-microsoft-com:office:office", value);
		m_writer.WriteAttributeString("hr", "urn:schemas-microsoft-com:office:office", "t");
		if (shape.UseStandardColorHR)
		{
			m_writer.WriteAttributeString("hrstd", "urn:schemas-microsoft-com:office:office", "t");
		}
		if (shape.UseNoShadeHR)
		{
			m_writer.WriteAttributeString("hrnoshade", "urn:schemas-microsoft-com:office:office", "t");
		}
	}

	private void SerializeShapeType(XmlWriter m_writer, GroupShape shape, ref string shapeType, ref XmlReader reader)
	{
		string[] array = new StreamReader(GetManifestResourceStream(".ShapeTypes.txt")).ReadToEnd().Split(new char[1] { ControlChar.LineFeedChar }, StringSplitOptions.RemoveEmptyEntries);
		string shapeTypeIDorAttributeToCheck = AutoShapeHelper.GetShapeTypeIDorAttributeToCheck(shape.AutoShapeType);
		for (int i = 0; i < array.Length; i++)
		{
			if (array[i].Contains(shapeTypeIDorAttributeToCheck))
			{
				if (array[i].StartsWith("<v:shapetype"))
				{
					shapeType = array[i].Substring(17, array[i].IndexOfAny(new char[1] { '"' }, 17) - 17);
					m_writer.WriteRaw(array[i]);
					break;
				}
				MemoryStream memoryStream = new MemoryStream();
				StreamWriter streamWriter = new StreamWriter(memoryStream);
				streamWriter.WriteLine("<ShapeTypes xmlns:wpc=\"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\"            xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"            xmlns:o=\"urn:schemas-microsoft-com:office:office\"             xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"             xmlns:v=\"urn:schemas-microsoft-com:vml\"             xmlns:wp14=\"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\"             xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"             xmlns:w10=\"urn:schemas-microsoft-com:office:word\"             xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"             xmlns:w14=\"http://schemas.microsoft.com/office/word/2010/wordml\"             xmlns:w15=\"http://schemas.microsoft.com/office/word/2012/wordml\"             xmlns:wpg=\"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\"             xmlns:wpi=\"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\"             xmlns:wne=\"http://schemas.microsoft.com/office/word/2006/wordml\"             xmlns:wps=\"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\"             mc:Ignorable=\"w14 w15 wp14\">  ");
				streamWriter.WriteLine(array[i]);
				streamWriter.WriteLine("</ShapeTypes>");
				streamWriter.Flush();
				memoryStream.Position = 0L;
				reader = CreateReader(memoryStream);
				memoryStream.Dispose();
				reader.ReadToFollowing("shape", "urn:schemas-microsoft-com:vml");
				break;
			}
		}
	}

	private void SerializeShapeType(XmlWriter m_writer, ChildShape shape, ref string shapeType, ref XmlReader reader)
	{
		string[] array = new StreamReader(GetManifestResourceStream("ShapeTypes.txt")).ReadToEnd().Split(new char[1] { ControlChar.LineFeedChar }, StringSplitOptions.RemoveEmptyEntries);
		string shapeTypeIDorAttributeToCheck = AutoShapeHelper.GetShapeTypeIDorAttributeToCheck(shape.AutoShapeType);
		for (int i = 0; i < array.Length; i++)
		{
			if (array[i].Contains(shapeTypeIDorAttributeToCheck))
			{
				if (array[i].StartsWith("<v:shapetype"))
				{
					shapeType = array[i].Substring(17, array[i].IndexOfAny(new char[1] { '"' }, 17) - 17);
					m_writer.WriteRaw(array[i]);
					break;
				}
				MemoryStream memoryStream = new MemoryStream();
				StreamWriter streamWriter = new StreamWriter(memoryStream);
				streamWriter.WriteLine("<ShapeTypes xmlns:wpc=\"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\"            xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"            xmlns:o=\"urn:schemas-microsoft-com:office:office\"             xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"             xmlns:v=\"urn:schemas-microsoft-com:vml\"             xmlns:wp14=\"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\"             xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"             xmlns:w10=\"urn:schemas-microsoft-com:office:word\"             xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"             xmlns:w14=\"http://schemas.microsoft.com/office/word/2010/wordml\"             xmlns:w15=\"http://schemas.microsoft.com/office/word/2012/wordml\"             xmlns:wpg=\"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\"             xmlns:wpi=\"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\"             xmlns:wne=\"http://schemas.microsoft.com/office/word/2006/wordml\"             xmlns:wps=\"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\"             mc:Ignorable=\"w14 w15 wp14\">  ");
				streamWriter.WriteLine(array[i]);
				streamWriter.WriteLine("</ShapeTypes>");
				streamWriter.Flush();
				memoryStream.Position = 0L;
				reader = CreateReader(memoryStream);
				memoryStream.Dispose();
				reader.ReadToFollowing("shape", "urn:schemas-microsoft-com:vml");
				break;
			}
		}
	}

	private void SerializeShapeType(XmlWriter m_writer, Shape shape, ref string shapeType, ref XmlReader reader)
	{
		string[] array = new StreamReader(GetManifestResourceStream("ShapeTypes.txt")).ReadToEnd().Split(new char[1] { ControlChar.LineFeedChar }, StringSplitOptions.RemoveEmptyEntries);
		string shapeTypeIDorAttributeToCheck = AutoShapeHelper.GetShapeTypeIDorAttributeToCheck(shape.AutoShapeType);
		for (int i = 0; i < array.Length; i++)
		{
			if (array[i].Contains(shapeTypeIDorAttributeToCheck))
			{
				if (array[i].StartsWith("<v:shapetype"))
				{
					shapeType = array[i].Substring(17, array[i].IndexOfAny(new char[1] { '"' }, 17) - 17);
					m_writer.WriteRaw(array[i]);
					break;
				}
				MemoryStream memoryStream = new MemoryStream();
				StreamWriter streamWriter = new StreamWriter(memoryStream);
				streamWriter.WriteLine("<ShapeTypes xmlns:wpc=\"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\"            xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"            xmlns:o=\"urn:schemas-microsoft-com:office:office\"             xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\"             xmlns:v=\"urn:schemas-microsoft-com:vml\"             xmlns:wp14=\"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\"             xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"             xmlns:w10=\"urn:schemas-microsoft-com:office:word\"             xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"             xmlns:w14=\"http://schemas.microsoft.com/office/word/2010/wordml\"             xmlns:w15=\"http://schemas.microsoft.com/office/word/2012/wordml\"             xmlns:wpg=\"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\"             xmlns:wpi=\"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\"             xmlns:wne=\"http://schemas.microsoft.com/office/word/2006/wordml\"             xmlns:wps=\"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\"             mc:Ignorable=\"w14 w15 wp14\">  ");
				streamWriter.WriteLine(array[i]);
				streamWriter.WriteLine("</ShapeTypes>");
				streamWriter.Flush();
				memoryStream.Position = 0L;
				reader = CreateReader(memoryStream);
				memoryStream.Dispose();
				reader.ReadToFollowing("shape", "urn:schemas-microsoft-com:vml");
				break;
			}
		}
	}

	private MemoryStream ReadSingleNodeIntoStream(XmlReader reader)
	{
		MemoryStream memoryStream = new MemoryStream();
		XmlWriter xmlWriter = DocGen.DocIO.DLS.Convertors.UtilityMethods.CreateWriter(memoryStream, Encoding.UTF8);
		xmlWriter.WriteNode(reader, defattr: false);
		xmlWriter.Flush();
		return memoryStream;
	}

	private void SerializeTextBoxFormat(GroupShape shape, Dictionary<string, Stream> docxProps)
	{
		string text = string.Empty;
		string text2 = string.Empty;
		string text3 = string.Empty;
		string text4 = string.Empty;
		string empty = string.Empty;
		StringBuilder stringBuilder = new StringBuilder();
		if (shape.HorizontalOrigin != HorizontalOrigin.Column)
		{
			text = GetHorizOriginAsString(shape.HorizontalOrigin);
		}
		if (shape.VerticalOrigin != VerticalOrigin.Paragraph)
		{
			text3 = GetVerticalOrginAsString(shape.VerticalOrigin, isShapeStyle: true);
		}
		if (shape.HorizontalAlignment != 0)
		{
			text2 = shape.HorizontalAlignment.ToString().ToLower();
		}
		if (shape.VerticalAlignment != 0)
		{
			text4 = shape.VerticalAlignment.ToString().ToLower();
		}
		if (shape.WrapFormat.TextWrappingStyle != 0)
		{
			stringBuilder.Append("position:absolute;");
		}
		if (shape.LeftMargin != 0f)
		{
			stringBuilder.Append("left:");
			stringBuilder.Append(shape.LeftMargin.ToString(CultureInfo.InvariantCulture));
		}
		if (shape.TopMargin != 0f)
		{
			stringBuilder.Append(";top:");
			stringBuilder.Append(shape.TopMargin.ToString(CultureInfo.InvariantCulture));
		}
		stringBuilder.Append(";margin-left:");
		stringBuilder.Append(shape.HorizontalPosition.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;margin-top:");
		stringBuilder.Append(shape.VerticalPosition.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;width:");
		stringBuilder.Append(shape.Width.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;height:");
		stringBuilder.Append(shape.Height.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;");
		if (shape.ZOrderPosition != 0)
		{
			stringBuilder.Append("z-index:" + shape.ZOrderPosition + ";");
		}
		else if (shape.IsBelowText)
		{
			stringBuilder.Append("z-index:-251658752;");
		}
		if (text.Length != 0)
		{
			stringBuilder.Append("mso-position-horizontal-relative:");
			stringBuilder.Append(text);
		}
		if (text3.Length != 0)
		{
			stringBuilder.Append(";mso-position-vertical-relative:");
			stringBuilder.Append(text3);
		}
		if (text2.Length != 0)
		{
			stringBuilder.Append(";mso-position-horizontal:");
			stringBuilder.Append(text2);
		}
		if (text4.Length != 0)
		{
			stringBuilder.Append(";mso-position-vertical:");
			stringBuilder.Append(text4);
		}
		if (shape.Rotation != 0f)
		{
			stringBuilder.Append(";rotation:");
			stringBuilder.Append(((long)GetRotationAngle(shape.Rotation)).ToString(CultureInfo.InvariantCulture));
		}
		if (shape.FlipHorizontal && shape.FlipVertical)
		{
			stringBuilder.Append(";flip:x y");
		}
		else if (shape.FlipHorizontal)
		{
			stringBuilder.Append(";flip:x");
		}
		else if (shape.FlipVertical)
		{
			stringBuilder.Append(";flip:y");
		}
		if (empty.Length != 0)
		{
			stringBuilder.Append(";v-text-anchor:");
			stringBuilder.Append(empty);
		}
		stringBuilder.Append(";mso-wrap-distance-left:");
		stringBuilder.Append(shape.WrapFormat.DistanceLeft.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;mso-wrap-distance-top:");
		stringBuilder.Append(shape.WrapFormat.DistanceTop.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;mso-wrap-distance-right:");
		stringBuilder.Append(shape.WrapFormat.DistanceRight.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;mso-wrap-distance-bottom:");
		stringBuilder.Append(shape.WrapFormat.DistanceBottom.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;");
		m_writer.WriteAttributeString("style", stringBuilder.ToString());
	}

	private void SerializeTextBoxFormat(ChildShape shape, Dictionary<string, Stream> docxProps)
	{
		string empty = string.Empty;
		StringBuilder stringBuilder = new StringBuilder();
		empty = shape.TextFrame.TextVerticalAlignment.ToString().ToLower();
		stringBuilder.Append("position:absolute;");
		if (shape.LeftMargin != 0f)
		{
			stringBuilder.Append("left:");
			stringBuilder.Append(Math.Round(shape.LeftMargin, 2).ToString(CultureInfo.InvariantCulture));
		}
		if (shape.TopMargin != 0f)
		{
			stringBuilder.Append(";top:");
			stringBuilder.Append(Math.Round(shape.TopMargin, 2).ToString(CultureInfo.InvariantCulture));
		}
		if (shape.Width > 0f)
		{
			stringBuilder.Append(";width:");
			stringBuilder.Append(shape.Width.ToString(CultureInfo.InvariantCulture));
		}
		if (shape.Height > 0f)
		{
			stringBuilder.Append(";height:");
			stringBuilder.Append(shape.Height.ToString(CultureInfo.InvariantCulture));
		}
		stringBuilder.Append(";");
		if (shape.Rotation != 0f)
		{
			stringBuilder.Append(";rotation:");
			stringBuilder.Append(((long)GetRotationAngle(shape.Rotation)).ToString(CultureInfo.InvariantCulture));
		}
		if (empty.Length != 0)
		{
			stringBuilder.Append(";v-text-anchor:");
			stringBuilder.Append(empty);
		}
		if (shape.TextFrame.HorizontalRelativePercent != float.MinValue)
		{
			stringBuilder.Append(";mso-left-percent:");
			stringBuilder.Append(shape.TextFrame.HorizontalRelativePercent * 10f);
		}
		if (shape.TextFrame.VerticalRelativePercent != float.MinValue)
		{
			stringBuilder.Append(";mso-top-percent:");
			stringBuilder.Append(shape.TextFrame.VerticalRelativePercent * 10f);
		}
		if (shape.FlipHorizantal && shape.FlipVertical)
		{
			stringBuilder.Append(";flip:x y");
		}
		else if (shape.FlipHorizantal)
		{
			stringBuilder.Append(";flip:x");
		}
		else if (shape.FlipVertical)
		{
			stringBuilder.Append(";flip:y");
		}
		if (shape.DocxStyleProps.Count > 0)
		{
			foreach (string docxStyleProp in shape.DocxStyleProps)
			{
				stringBuilder.Append(";" + docxStyleProp);
			}
		}
		m_writer.WriteAttributeString("style", stringBuilder.ToString());
		if (shape.AutoShapeType == AutoShapeType.Line && shape.HasKey(0) && shape.HasKey(1) && shape.HasKey(2) && shape.HasKey(3))
		{
			float lineFromXPosition = shape.LineFromXPosition;
			string value = string.Concat(str2: Math.Round(shape.LineFromYPosition, 2).ToString(CultureInfo.InvariantCulture), str0: Math.Round(lineFromXPosition, 2).ToString(CultureInfo.InvariantCulture), str1: ",");
			if (!string.IsNullOrEmpty(value))
			{
				m_writer.WriteAttributeString("from", value);
			}
			float lineToXPosition = shape.LineToXPosition;
			string value2 = string.Concat(str2: Math.Round(shape.LineToYPosition, 2).ToString(CultureInfo.InvariantCulture), str0: Math.Round(lineToXPosition, 2).ToString(CultureInfo.InvariantCulture), str1: ",");
			if (!string.IsNullOrEmpty(value2))
			{
				m_writer.WriteAttributeString("to", value2);
			}
		}
		if (!string.IsNullOrEmpty(shape.Adjustments))
		{
			m_writer.WriteAttributeString("adj", shape.Adjustments);
		}
		if (!string.IsNullOrEmpty(shape.Path))
		{
			m_writer.WriteAttributeString("path", shape.Path);
		}
		if (shape.ArcSize > 0.0)
		{
			m_writer.WriteAttributeString("arcsize", shape.ArcSize.ToString(CultureInfo.InvariantCulture) + "f");
		}
		if (shape.FillFormat.Fill && !shape.FillFormat.IsDefaultFill)
		{
			m_writer.WriteAttributeString("filled", "t");
			if (shape.FillFormat.FillType == FillType.FillSolid && !shape.FillFormat.Color.IsEmpty && shape.FillFormat.ForeColor.IsEmpty)
			{
				m_writer.WriteAttributeString("fillcolor", "#" + GetRGBCode(shape.FillFormat.Color));
			}
			else if (!shape.FillFormat.ForeColor.IsEmpty)
			{
				m_writer.WriteAttributeString("fillcolor", "#" + GetRGBCode(shape.FillFormat.ForeColor));
			}
			else if (shape.FillFormat.FillType == FillType.FillGradient && shape.FillFormat.ForeColor.IsEmpty)
			{
				m_writer.WriteAttributeString("fillcolor", "#" + GetRGBCode(shape.FillFormat.Color));
			}
		}
		else if (!shape.FillFormat.IsDefaultFill)
		{
			m_writer.WriteAttributeString("filled", "f");
		}
		if (!shape.LayoutInCell)
		{
			m_writer.WriteAttributeString("allowincell", "urn:schemas-microsoft-com:office:office", "f");
		}
		if (!shape.LineFormat.Line)
		{
			m_writer.WriteAttributeString("stroked", "f");
			if (shape.LineFormat.Color != Color.Empty)
			{
				m_writer.WriteAttributeString("strokecolor", "#" + GetRGBCode(shape.LineFormat.Color));
			}
			return;
		}
		string dashStyle = GetDashStyle(shape.LineFormat.DashStyle, is2007: true);
		string lineStyle = GetLineStyle(shape.LineFormat.Style, is2007: true);
		if (dashStyle != null || lineStyle != null)
		{
			if (shape.LineFormat.Is2007StrokeDefined)
			{
				m_writer.WriteAttributeString("stroked", "t");
			}
			m_writer.WriteAttributeString("strokecolor", "#" + GetRGBCode(shape.LineFormat.Color));
			m_writer.WriteAttributeString("strokeweight", shape.LineFormat.Weight.ToString(CultureInfo.InvariantCulture) + "pt");
			m_writer.WriteStartElement("stroke", "urn:schemas-microsoft-com:vml");
			if (dashStyle != null)
			{
				m_writer.WriteAttributeString("dashstyle", dashStyle);
			}
			if (lineStyle != null)
			{
				m_writer.WriteAttributeString("linestyle", lineStyle);
			}
			m_writer.WriteAttributeString("joinstyle", GetLineJoinStyle(shape.LineFormat.LineJoin));
			m_writer.WriteAttributeString("endcap", GetLineCapStyle(shape.LineFormat.LineCap, is2007: true));
			SerializePatternLine(shape);
			if (IsConnectorShape(shape.AutoShapeType))
			{
				SerializeConnectorLine2007Properties(shape.LineFormat);
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeTextBoxFormat(ChildGroupShape shape, Dictionary<string, Stream> docxProps)
	{
		string empty = string.Empty;
		StringBuilder stringBuilder = new StringBuilder();
		empty = shape.TextFrame.TextVerticalAlignment.ToString().ToLower();
		stringBuilder.Append("position:absolute;");
		if (shape.LeftMargin != 0f)
		{
			stringBuilder.Append("left:");
			stringBuilder.Append(shape.LeftMargin.ToString(CultureInfo.InvariantCulture));
		}
		if (shape.TopMargin != 0f)
		{
			stringBuilder.Append(";top:");
			stringBuilder.Append(shape.TopMargin.ToString(CultureInfo.InvariantCulture));
		}
		stringBuilder.Append(";width:");
		stringBuilder.Append(shape.Width.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append(";height:");
		stringBuilder.Append(shape.Height.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append(";");
		if (shape.Rotation != 0f)
		{
			stringBuilder.Append(";rotation:");
			stringBuilder.Append(((long)GetRotationAngle(shape.Rotation)).ToString(CultureInfo.InvariantCulture));
		}
		if (empty.Length != 0)
		{
			stringBuilder.Append(";v-text-anchor:");
			stringBuilder.Append(empty);
		}
		if (shape.TextFrame.HorizontalRelativePercent != float.MinValue)
		{
			stringBuilder.Append(";mso-left-percent:");
			stringBuilder.Append(shape.TextFrame.HorizontalRelativePercent * 10f);
		}
		if (shape.TextFrame.VerticalRelativePercent != float.MinValue)
		{
			stringBuilder.Append(";mso-top-percent:");
			stringBuilder.Append(shape.TextFrame.VerticalRelativePercent * 10f);
		}
		if (shape.FlipHorizantal && shape.FlipVertical)
		{
			stringBuilder.Append(";flip:x y");
		}
		else if (shape.FlipHorizantal)
		{
			stringBuilder.Append(";flip:x");
		}
		else if (shape.FlipVertical)
		{
			stringBuilder.Append(";flip:y");
		}
		if (shape.DocxStyleProps.Count > 0)
		{
			foreach (string docxStyleProp in shape.DocxStyleProps)
			{
				stringBuilder.Append(";" + docxStyleProp);
			}
		}
		m_writer.WriteAttributeString("style", stringBuilder.ToString());
		if (!string.IsNullOrEmpty(shape.Adjustments))
		{
			m_writer.WriteAttributeString("adj", shape.Adjustments);
		}
		if (shape.ArcSize > 0.0)
		{
			m_writer.WriteAttributeString("arcsize", shape.ArcSize.ToString(CultureInfo.InvariantCulture) + "f");
		}
		if (shape.FillFormat.Fill && !shape.FillFormat.IsDefaultFill)
		{
			m_writer.WriteAttributeString("filled", "t");
			if (shape.FillFormat.FillType == FillType.FillSolid && !shape.FillFormat.Color.IsEmpty && shape.FillFormat.ForeColor.IsEmpty)
			{
				m_writer.WriteAttributeString("fillcolor", "#" + GetRGBCode(shape.FillFormat.Color));
			}
			else if (!shape.FillFormat.ForeColor.IsEmpty)
			{
				m_writer.WriteAttributeString("fillcolor", "#" + GetRGBCode(shape.FillFormat.ForeColor));
			}
			else if (shape.FillFormat.FillType == FillType.FillGradient && shape.FillFormat.ForeColor.IsEmpty)
			{
				m_writer.WriteAttributeString("fillcolor", "#" + GetRGBCode(shape.FillFormat.Color));
			}
		}
		else if (!shape.FillFormat.IsDefaultFill)
		{
			m_writer.WriteAttributeString("filled", "f");
		}
		if (!shape.LayoutInCell)
		{
			m_writer.WriteAttributeString("allowincell", "urn:schemas-microsoft-com:office:office", "f");
		}
		if (!shape.LineFormat.Line)
		{
			m_writer.WriteAttributeString("stroked", "f");
			return;
		}
		string dashStyle = GetDashStyle(shape.LineFormat.DashStyle, is2007: true);
		string lineStyle = GetLineStyle(shape.LineFormat.Style, is2007: true);
		if (dashStyle != null || lineStyle != null)
		{
			if (shape.LineFormat.Is2007StrokeDefined)
			{
				m_writer.WriteAttributeString("stroked", "t");
			}
			m_writer.WriteAttributeString("strokecolor", "#" + GetRGBCode(shape.LineFormat.Color));
			m_writer.WriteAttributeString("strokeweight", shape.LineFormat.Weight.ToString(CultureInfo.InvariantCulture) + "pt");
			m_writer.WriteStartElement("stroke", "urn:schemas-microsoft-com:vml");
			if (dashStyle != null)
			{
				m_writer.WriteAttributeString("dashstyle", dashStyle);
			}
			if (lineStyle != null)
			{
				m_writer.WriteAttributeString("linestyle", lineStyle);
			}
			m_writer.WriteAttributeString("joinstyle", GetLineJoinStyle(shape.LineFormat.LineJoin));
			m_writer.WriteAttributeString("endcap", GetLineCapStyle(shape.LineFormat.LineCap, is2007: true));
			SerializePatternLine(shape);
			if (IsConnectorShape(shape.AutoShapeType))
			{
				SerializeConnectorLine2007Properties(shape.LineFormat);
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeTextBoxFormat(Shape shape, Dictionary<string, Stream> docxProps)
	{
		string text = string.Empty;
		string text2 = string.Empty;
		string text3 = string.Empty;
		string text4 = string.Empty;
		string empty = string.Empty;
		StringBuilder stringBuilder = new StringBuilder();
		if (shape.HorizontalOrigin != HorizontalOrigin.Column)
		{
			text = GetHorizOriginAsString(shape.HorizontalOrigin);
		}
		if (shape.VerticalOrigin != VerticalOrigin.Paragraph)
		{
			text3 = GetVerticalOrginAsString(shape.VerticalOrigin, isShapeStyle: true);
		}
		if (shape.HorizontalAlignment != 0)
		{
			text2 = shape.HorizontalAlignment.ToString().ToLower();
		}
		if (shape.VerticalAlignment != 0)
		{
			text4 = shape.VerticalAlignment.ToString().ToLower();
		}
		empty = shape.TextFrame.TextVerticalAlignment.ToString().ToLower();
		if (shape.WrapFormat.TextWrappingStyle != 0)
		{
			stringBuilder.Append("position:absolute;");
		}
		stringBuilder.Append("margin-left:");
		stringBuilder.Append(shape.HorizontalPosition.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;margin-top:");
		stringBuilder.Append(shape.VerticalPosition.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;width:");
		stringBuilder.Append(shape.Width.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;height:");
		stringBuilder.Append(shape.Height.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;");
		if (shape.ZOrderPosition != 0)
		{
			stringBuilder.Append("z-index:" + shape.ZOrderPosition + ";");
		}
		else if (shape.IsBelowText)
		{
			stringBuilder.Append("z-index:-251658752;");
		}
		if (text.Length != 0)
		{
			stringBuilder.Append("mso-position-horizontal-relative:");
			stringBuilder.Append(text);
		}
		if (text3.Length != 0)
		{
			stringBuilder.Append(";mso-position-vertical-relative:");
			stringBuilder.Append(text3);
		}
		if (text2.Length != 0)
		{
			stringBuilder.Append(";mso-position-horizontal:");
			stringBuilder.Append(text2);
		}
		if (text4.Length != 0)
		{
			stringBuilder.Append(";mso-position-vertical:");
			stringBuilder.Append(text4);
		}
		if (shape.Rotation != 0f)
		{
			stringBuilder.Append(";rotation:");
			stringBuilder.Append(((long)GetRotationAngle(shape.Rotation)).ToString(CultureInfo.InvariantCulture));
		}
		if (empty.Length != 0)
		{
			stringBuilder.Append(";v-text-anchor:");
			stringBuilder.Append(empty);
		}
		if (shape.TextFrame.WidthRelativePercent != 0f)
		{
			stringBuilder.Append(";mso-width-percent:" + (shape.TextFrame.WidthRelativePercent * 10f).ToString(CultureInfo.InvariantCulture));
			stringBuilder.Append(";mso-width-relative:" + GetWidthOrigin(shape.TextFrame.WidthOrigin));
		}
		if (shape.TextFrame.HeightRelativePercent != 0f)
		{
			stringBuilder.Append(";mso-height-percent:" + (shape.TextFrame.HeightRelativePercent * 10f).ToString(CultureInfo.InvariantCulture));
			stringBuilder.Append(";mso-height-relative:" + GetHeightOrigin(shape.TextFrame.HeightOrigin));
		}
		if (shape.TextFrame.HorizontalRelativePercent != float.MinValue)
		{
			stringBuilder.Append(";mso-left-percent:");
			stringBuilder.Append(shape.TextFrame.HorizontalRelativePercent * 10f);
		}
		if (shape.TextFrame.VerticalRelativePercent != float.MinValue)
		{
			stringBuilder.Append(";mso-top-percent:");
			stringBuilder.Append(shape.TextFrame.VerticalRelativePercent * 10f);
		}
		stringBuilder.Append(";mso-wrap-distance-left:");
		stringBuilder.Append(shape.WrapFormat.DistanceLeft.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;mso-wrap-distance-top:");
		stringBuilder.Append(shape.WrapFormat.DistanceTop.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;mso-wrap-distance-right:");
		stringBuilder.Append(shape.WrapFormat.DistanceRight.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;mso-wrap-distance-bottom:");
		stringBuilder.Append(shape.WrapFormat.DistanceBottom.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;");
		SerializeFlip(shape, stringBuilder);
		if (shape.DocxStyleProps.Count > 0)
		{
			foreach (string docxStyleProp in shape.DocxStyleProps)
			{
				stringBuilder.Append(";" + docxStyleProp);
			}
		}
		m_writer.WriteAttributeString("style", stringBuilder.ToString());
		if (!string.IsNullOrEmpty(shape.Adjustments))
		{
			m_writer.WriteAttributeString("adj", shape.Adjustments);
		}
		if (shape.CoordinateXOrigin != 0f && shape.CoordinateYOrigin != 0f)
		{
			string value = shape.CoordinateXOrigin.ToString(CultureInfo.InvariantCulture) + "," + shape.CoordinateYOrigin.ToString(CultureInfo.InvariantCulture);
			if (!string.IsNullOrEmpty(value))
			{
				m_writer.WriteAttributeString("coordorigin", value);
			}
		}
		if (!string.IsNullOrEmpty(shape.CoordinateSize))
		{
			m_writer.WriteAttributeString("coordsize", shape.CoordinateSize);
		}
		if (!string.IsNullOrEmpty(shape.Path))
		{
			m_writer.WriteAttributeString("path", shape.Path);
		}
		if (shape.ArcSize > 0.0)
		{
			m_writer.WriteAttributeString("arcsize", shape.ArcSize.ToString(CultureInfo.InvariantCulture) + "f");
		}
		if (shape.FillFormat.Fill && !shape.FillFormat.IsDefaultFill)
		{
			m_writer.WriteAttributeString("filled", "t");
			if (shape.FillFormat.FillType == FillType.FillSolid && !shape.FillFormat.Color.IsEmpty && shape.FillFormat.ForeColor.IsEmpty)
			{
				m_writer.WriteAttributeString("fillcolor", "#" + GetRGBCode(shape.FillFormat.Color));
			}
			else if (!shape.FillFormat.ForeColor.IsEmpty)
			{
				m_writer.WriteAttributeString("fillcolor", "#" + GetRGBCode(shape.FillFormat.ForeColor));
			}
			else if (shape.FillFormat.FillType == FillType.FillGradient && shape.FillFormat.ForeColor.IsEmpty)
			{
				m_writer.WriteAttributeString("fillcolor", "#" + GetRGBCode(shape.FillFormat.Color));
			}
		}
		else if (!shape.FillFormat.IsDefaultFill)
		{
			m_writer.WriteAttributeString("filled", "f");
		}
		if (!shape.LayoutInCell)
		{
			m_writer.WriteAttributeString("allowincell", "urn:schemas-microsoft-com:office:office", "f");
		}
		if (!shape.LineFormat.Line)
		{
			m_writer.WriteAttributeString("stroked", "f");
		}
		else
		{
			string dashStyle = GetDashStyle(shape.LineFormat.DashStyle, is2007: true);
			string lineStyle = GetLineStyle(shape.LineFormat.Style, is2007: true);
			if (dashStyle != null || lineStyle != null)
			{
				m_writer.WriteAttributeString("strokecolor", "#" + GetRGBCode(shape.LineFormat.Color));
				m_writer.WriteAttributeString("strokeweight", shape.LineFormat.Weight.ToString(CultureInfo.InvariantCulture) + "pt");
				m_writer.WriteStartElement("stroke", "urn:schemas-microsoft-com:vml");
				if (dashStyle != null)
				{
					m_writer.WriteAttributeString("dashstyle", dashStyle);
				}
				if (lineStyle != null)
				{
					m_writer.WriteAttributeString("linestyle", lineStyle);
				}
				m_writer.WriteAttributeString("joinstyle", GetLineJoinStyle(shape.LineFormat.LineJoin));
				m_writer.WriteAttributeString("endcap", GetLineCapStyle(shape.LineFormat.LineCap, is2007: true));
				SerializePatternLine(shape);
				if (IsConnectorShape(shape.AutoShapeType))
				{
					SerializeConnectorLine2007Properties(shape.LineFormat);
				}
				m_writer.WriteEndElement();
			}
		}
		if (shape.WrapFormat.TextWrappingStyle != TextWrappingStyle.InFrontOfText && shape.WrapFormat.TextWrappingStyle != TextWrappingStyle.Behind)
		{
			m_writer.WriteStartElement("wrap", "urn:schemas-microsoft-com:office:word");
			m_writer.WriteAttributeString("type", GetTextWrappingStyleAsString(shape.WrapFormat.TextWrappingStyle));
			m_writer.WriteEndElement();
		}
	}

	private void SerializeFlip(Shape shape, StringBuilder textBoxStyle)
	{
		if (shape.FlipHorizontal || shape.FlipVertical)
		{
			if (shape.FlipHorizontal && shape.FlipVertical)
			{
				textBoxStyle.Append("flip:x y;");
			}
			else if (shape.FlipHorizontal)
			{
				textBoxStyle.Append("flip:x;");
			}
			else
			{
				textBoxStyle.Append("flip:y;");
			}
		}
	}

	private void SerializeConnectorLine2007Properties(LineFormat lineFormat)
	{
		m_writer.WriteAttributeString("startarrow", GetLineEnd(lineFormat.BeginArrowheadStyle, is2007: true));
		m_writer.WriteAttributeString("startarrowwidth", GetLineEndWidth(lineFormat.BeginArrowheadWidth, is2007: true));
		m_writer.WriteAttributeString("startarrowlength", GetLineEndLength(lineFormat.BeginArrowheadLength, is2007: true));
		m_writer.WriteAttributeString("endarrow", GetLineEnd(lineFormat.EndArrowheadStyle, is2007: true));
		m_writer.WriteAttributeString("endarrowwidth", GetLineEndWidth(lineFormat.EndArrowheadWidth, is2007: true));
		m_writer.WriteAttributeString("endarrowlength", GetLineEndLength(lineFormat.EndArrowheadLength, is2007: true));
	}

	private void SerializePatternLine(Shape shape)
	{
		byte[] array = null;
		if (shape.LineFormat.ImageRecord != null)
		{
			array = shape.LineFormat.ImageRecord.ImageBytes;
		}
		if (shape.LineFormat.LineFormatType == LineFormatType.Patterned && shape.LineFormat.Pattern != PatternType.Mixed)
		{
			array = GetPatternImageBytes(shape.LineFormat.Pattern.ToString());
		}
		if (array != null)
		{
			Entity baseEntity = shape.GetBaseEntity(shape);
			string text = string.Empty;
			WPicture wPicture = new WPicture(m_document);
			wPicture.LoadImage(array);
			UpdateImages(wPicture);
			if (baseEntity is WSection)
			{
				text = AddImageRelation(DocumentImages, wPicture.ImageRecord, IsNeedToSkipImageRelation(wPicture));
			}
			else if (baseEntity is HeaderFooter)
			{
				text = UpdateHFImageRels(baseEntity as HeaderFooter, wPicture);
			}
			m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", text.ToString());
			m_writer.WriteAttributeString("title", "urn:schemas-microsoft-com:office:office", string.Empty);
		}
		if (shape.LineFormat.Transparency > 0f)
		{
			uint num = Convert.ToUInt32(65536f * (1f - shape.LineFormat.Transparency / 100f));
			m_writer.WriteAttributeString("opacity", num.ToString(CultureInfo.InvariantCulture) + "f");
		}
		if (!shape.LineFormat.Color.IsEmpty)
		{
			m_writer.WriteAttributeString("color2", "#" + GetRGBCode(shape.LineFormat.Color));
		}
		if (shape.LineFormat.LineFormatType == LineFormatType.Patterned)
		{
			m_writer.WriteAttributeString("filltype", "pattern");
		}
	}

	private void SerializePatternLine(ChildShape shape)
	{
		byte[] array = null;
		if (shape.LineFormat.ImageRecord != null)
		{
			array = shape.LineFormat.ImageRecord.ImageBytes;
		}
		if (shape.LineFormat.LineFormatType == LineFormatType.Patterned && shape.LineFormat.Pattern != PatternType.Mixed)
		{
			array = GetPatternImageBytes(shape.LineFormat.Pattern.ToString());
		}
		if (array != null)
		{
			Entity baseEntity = GetBaseEntity(shape);
			string text = string.Empty;
			WPicture wPicture = new WPicture(m_document);
			wPicture.LoadImage(array);
			UpdateImages(wPicture);
			if (baseEntity is WSection)
			{
				text = AddImageRelation(DocumentImages, wPicture.ImageRecord, IsNeedToSkipImageRelation(wPicture));
			}
			else if (baseEntity is HeaderFooter)
			{
				text = UpdateHFImageRels(baseEntity as HeaderFooter, wPicture);
			}
			m_writer.WriteAttributeString("id", "http://schemas.openxmlformats.org/officeDocument/2006/relationships", text.ToString());
			m_writer.WriteAttributeString("title", "urn:schemas-microsoft-com:office:office", string.Empty);
		}
		if (shape.LineFormat.Transparency > 0f)
		{
			uint num = Convert.ToUInt32(65536f * (1f - shape.LineFormat.Transparency / 100f));
			m_writer.WriteAttributeString("opacity", num.ToString(CultureInfo.InvariantCulture) + "f");
		}
		if (!shape.LineFormat.Color.IsEmpty)
		{
			m_writer.WriteAttributeString("color2", "#" + GetRGBCode(shape.LineFormat.Color));
		}
		if (shape.LineFormat.LineFormatType == LineFormatType.Patterned)
		{
			m_writer.WriteAttributeString("filltype", "pattern");
		}
	}

	private void SerializeDocxStream(Dictionary<string, Stream> docxProps, string localName)
	{
		Stream value = new MemoryStream();
		if (docxProps.TryGetValue(localName, out value) && value != null && value.Length > 0)
		{
			value.Position = 0L;
			XmlReader reader = CreateReader(value);
			m_writer.WriteNode(reader, defattr: false);
		}
	}

	private void SerializeDocxStream(Dictionary<string, Stream> docxProps, string localName, Shape shapeItem)
	{
		Stream value = new MemoryStream();
		if (docxProps.TryGetValue(localName, out value) && value != null && value.Length > 0)
		{
			value.Position = 0L;
			Stream stream = UpdateXMLRelation(shapeItem, value);
			XmlReader reader = CreateReader(stream);
			m_writer.WriteNode(reader, defattr: false);
		}
	}

	private void SerializeDocxStream(Dictionary<string, Stream> docxProps, string localName, ChildShape shapeItem)
	{
		Stream value = new MemoryStream();
		if (docxProps.TryGetValue(localName, out value) && value != null && value.Length > 0)
		{
			value.Position = 0L;
			Stream stream = UpdateXMLRelation(shapeItem, value);
			XmlReader reader = CreateReader(stream);
			m_writer.WriteNode(reader, defattr: false);
		}
	}

	private void SerializeFillEffects(Shape shape, Dictionary<string, Stream> docxProps)
	{
		if (shape.FillFormat.Fill)
		{
			switch (shape.FillFormat.FillType)
			{
			case FillType.FillSolid:
				SerializeSolidFill2007(shape);
				break;
			case FillType.FillPatterned:
			case FillType.FillTextured:
			case FillType.FillPicture:
				SerializeBlipFill2007(shape);
				break;
			case FillType.FillGradient:
				SerializeGridFill2007(shape);
				break;
			default:
				SerializeDocxStream(docxProps, "fill", shape);
				break;
			}
		}
	}

	private void SerializeFillEffects(ChildShape shape, Dictionary<string, Stream> docxProps)
	{
		if (shape.FillFormat.Fill)
		{
			switch (shape.FillFormat.FillType)
			{
			case FillType.FillSolid:
				SerializeSolidFill2007(shape);
				break;
			case FillType.FillPatterned:
			case FillType.FillTextured:
			case FillType.FillPicture:
				SerializeBlipFill2007(shape);
				break;
			case FillType.FillGradient:
				SerializeGridFill2007(shape);
				break;
			default:
				SerializeDocxStream(docxProps, "fill", shape);
				break;
			}
		}
	}

	private void SerializeSolidFill2007(Shape shape)
	{
		m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
		uint num = Convert.ToUInt32(65536f * (1f - shape.FillFormat.Transparency / 100f));
		m_writer.WriteAttributeString("opacity", num.ToString(CultureInfo.InvariantCulture) + "f");
		if (!shape.FillFormat.Color.IsEmpty)
		{
			string rGBCode = GetRGBCode(shape.FillFormat.Color);
			m_writer.WriteAttributeString("color2", "#" + rGBCode);
		}
		m_writer.WriteEndElement();
	}

	private void SerializeSolidFill2007(ChildShape shape)
	{
		m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
		uint num = Convert.ToUInt32(65536f * (1f - shape.FillFormat.Transparency / 100f));
		m_writer.WriteAttributeString("opacity", num.ToString(CultureInfo.InvariantCulture) + "f");
		if (!shape.FillFormat.Color.IsEmpty)
		{
			string rGBCode = GetRGBCode(shape.FillFormat.Color);
			m_writer.WriteAttributeString("color2", "#" + rGBCode);
		}
		m_writer.WriteEndElement();
	}

	private void SerializeGridFill2007(Shape shape)
	{
		m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
		uint num = Convert.ToUInt32(65536f * (1f - shape.FillFormat.Transparency / 100f));
		string value = "gradientRadial";
		m_writer.WriteAttributeString("opacity", num.ToString(CultureInfo.InvariantCulture) + "f");
		if (shape.FillFormat.ForeColor != Color.Empty)
		{
			string rGBCode = GetRGBCode((shape.FillFormat.Color != Color.Empty) ? shape.FillFormat.Color : ((shape.FillFormat.GradientFill.GradientStops.Count > 0) ? shape.FillFormat.GradientFill.GradientStops[shape.FillFormat.GradientFill.GradientStops.Count - 1].Color : shape.FillFormat.Color));
			m_writer.WriteAttributeString("color2", "#" + rGBCode);
		}
		m_writer.WriteAttributeString("rotate", shape.FillFormat.GradientFill.RotateWithShape ? "t" : "f");
		if (shape.FillFormat.GradientFill.LinearGradient != null)
		{
			m_writer.WriteAttributeString("angle", GetAngle(shape.FillFormat.GradientFill.LinearGradient.Angle, shape.FillFormat.GradientFill.LinearGradient.AnglePositive));
			value = "gradient";
		}
		m_writer.WriteAttributeString("colors", GetGradientStopAsColors(shape.FillFormat.GradientFill));
		if (!string.IsNullOrEmpty(shape.FillFormat.GradientFill.Focus))
		{
			m_writer.WriteAttributeString("focus", shape.FillFormat.GradientFill.Focus);
		}
		string value2 = null;
		if (shape.FillFormat.FocusSizeX != 0f)
		{
			value2 = shape.FillFormat.FocusSizeX.ToString(CultureInfo.InvariantCulture) + "pt";
		}
		if (shape.FillFormat.FocusSizeY != 0f)
		{
			value2 = "," + shape.FillFormat.FocusSizeY.ToString(CultureInfo.InvariantCulture) + "pt";
		}
		if (!string.IsNullOrEmpty(value2))
		{
			m_writer.WriteAttributeString("focussize", value2);
		}
		string value3 = null;
		if (shape.FillFormat.PositionX != 0f)
		{
			value3 = shape.FillFormat.FocusPositionX.ToString(CultureInfo.InvariantCulture) + "pt";
		}
		if (shape.FillFormat.PositionY != 0f)
		{
			value3 = "," + shape.FillFormat.PositionY.ToString(CultureInfo.InvariantCulture) + "pt";
		}
		if (!string.IsNullOrEmpty(value3))
		{
			m_writer.WriteAttributeString("position", value3);
		}
		m_writer.WriteAttributeString("type", value);
		if (shape.FillFormat.GradientFill.PathGradient != null)
		{
			string focusPosition = GetFocusPosition(shape);
			if (!string.IsNullOrEmpty(focusPosition))
			{
				m_writer.WriteAttributeString("focusposition", focusPosition);
			}
			if (shape.FillFormat.GradientFill.PathGradient.PathShade == GradientShadeType.Rectangle)
			{
				m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:office:office");
				m_writer.WriteAttributeString("ext", "view");
				m_writer.WriteAttributeString("type", "gradientCenter");
				m_writer.WriteEndElement();
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializeGridFill2007(ChildShape shape)
	{
		m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
		uint num = Convert.ToUInt32(65536f * (1f - shape.FillFormat.Transparency / 100f));
		string value = "gradientRadial";
		m_writer.WriteAttributeString("opacity", num.ToString(CultureInfo.InvariantCulture) + "f");
		if (shape.FillFormat.ForeColor != Color.Empty)
		{
			m_writer.WriteAttributeString("color2", "#" + GetRGBCode((shape.FillFormat.Color != Color.Empty) ? shape.FillFormat.Color : ((shape.FillFormat.GradientFill.GradientStops.Count > 0) ? shape.FillFormat.GradientFill.GradientStops[shape.FillFormat.GradientFill.GradientStops.Count - 1].Color : shape.FillFormat.Color)));
		}
		m_writer.WriteAttributeString("rotate", shape.FillFormat.GradientFill.RotateWithShape ? "t" : "f");
		if (shape.FillFormat.GradientFill.LinearGradient != null)
		{
			if (shape.FillFormat.GradientFill.LinearGradient.IsAngleDefined)
			{
				m_writer.WriteAttributeString("angle", GetAngle(shape.FillFormat.GradientFill.LinearGradient.Angle, shape.FillFormat.GradientFill.LinearGradient.AnglePositive));
			}
			value = "gradient";
		}
		m_writer.WriteAttributeString("colors", GetGradientStopAsColors(shape.FillFormat.GradientFill));
		if (!string.IsNullOrEmpty(shape.FillFormat.GradientFill.Focus))
		{
			m_writer.WriteAttributeString("focus", shape.FillFormat.GradientFill.Focus);
		}
		string value2 = null;
		if (shape.FillFormat.FocusSizeX != 0f)
		{
			value2 = shape.FillFormat.FocusSizeX.ToString(CultureInfo.InvariantCulture) + "pt";
		}
		if (shape.FillFormat.FocusSizeY != 0f)
		{
			value2 = "," + shape.FillFormat.FocusSizeY.ToString(CultureInfo.InvariantCulture) + "pt";
		}
		if (!string.IsNullOrEmpty(value2))
		{
			m_writer.WriteAttributeString("focussize", value2);
		}
		string value3 = null;
		if (shape.FillFormat.PositionX != 0f)
		{
			value3 = shape.FillFormat.FocusPositionX.ToString(CultureInfo.InvariantCulture) + "pt";
		}
		if (shape.FillFormat.PositionY != 0f)
		{
			value3 = "," + shape.FillFormat.PositionY.ToString(CultureInfo.InvariantCulture) + "pt";
		}
		if (!string.IsNullOrEmpty(value3))
		{
			m_writer.WriteAttributeString("position", value3);
		}
		m_writer.WriteAttributeString("type", value);
		if (shape.FillFormat.GradientFill.PathGradient != null)
		{
			string focusPosition = GetFocusPosition(shape);
			if (!string.IsNullOrEmpty(focusPosition))
			{
				m_writer.WriteAttributeString("focusposition", focusPosition);
			}
			if (shape.FillFormat.GradientFill.PathGradient.PathShade == GradientShadeType.Rectangle)
			{
				m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:office:office");
				m_writer.WriteAttributeString("ext", "view");
				m_writer.WriteAttributeString("type", "gradientCenter");
				m_writer.WriteEndElement();
			}
		}
		m_writer.WriteEndElement();
	}

	private string GetFocusPosition(Shape shape)
	{
		GradientFill gradientFill = shape.FillFormat.GradientFill;
		string result = string.Empty;
		if (gradientFill.TileRectangle.TopOffset == -100f && gradientFill.TileRectangle.LeftOffset == -100f && gradientFill.PathGradient.RightOffset == 100 && gradientFill.PathGradient.BottomOffset == 100)
		{
			return null;
		}
		if (gradientFill.TileRectangle.TopOffset == -100f && gradientFill.TileRectangle.LeftOffset == 100f && gradientFill.PathGradient.RightOffset == -100 && gradientFill.PathGradient.BottomOffset == 100)
		{
			result = "1";
		}
		else if (gradientFill.TileRectangle.TopOffset == 100f && gradientFill.TileRectangle.LeftOffset == 100f && gradientFill.PathGradient.RightOffset == -100 && gradientFill.PathGradient.BottomOffset == -100)
		{
			result = "1,1";
		}
		else if (gradientFill.TileRectangle.TopOffset == 100f && gradientFill.TileRectangle.LeftOffset == -100f && gradientFill.PathGradient.RightOffset == 100 && gradientFill.PathGradient.BottomOffset == -100)
		{
			result = ",1";
		}
		else if (gradientFill.TileRectangle.TopOffset == 50f && gradientFill.TileRectangle.LeftOffset == 50f && gradientFill.PathGradient.RightOffset == 50 && gradientFill.PathGradient.BottomOffset == 50)
		{
			result = ".5,.5";
		}
		return result;
	}

	private string GetFocusPosition(ChildShape shape)
	{
		GradientFill gradientFill = shape.FillFormat.GradientFill;
		string result = string.Empty;
		if (gradientFill.TileRectangle.TopOffset == -100f && gradientFill.TileRectangle.LeftOffset == -100f && gradientFill.PathGradient.RightOffset == 100 && gradientFill.PathGradient.BottomOffset == 100)
		{
			return null;
		}
		if (gradientFill.TileRectangle.TopOffset == -100f && gradientFill.TileRectangle.LeftOffset == 100f && gradientFill.PathGradient.RightOffset == -100 && gradientFill.PathGradient.BottomOffset == 100)
		{
			result = "1";
		}
		else if (gradientFill.TileRectangle.TopOffset == 100f && gradientFill.TileRectangle.LeftOffset == 100f && gradientFill.PathGradient.RightOffset == -100 && gradientFill.PathGradient.BottomOffset == -100)
		{
			result = "1,1";
		}
		else if (gradientFill.TileRectangle.TopOffset == 100f && gradientFill.TileRectangle.LeftOffset == -100f && gradientFill.PathGradient.RightOffset == 100 && gradientFill.PathGradient.BottomOffset == -100)
		{
			result = ",1";
		}
		else if (gradientFill.TileRectangle.TopOffset == 50f && gradientFill.TileRectangle.LeftOffset == 50f && gradientFill.PathGradient.RightOffset == 50 && gradientFill.PathGradient.BottomOffset == 50)
		{
			result = ".5,.5";
		}
		return result;
	}

	private string GetShadingVariant(GradientShadingVariant gradientShadingVariant)
	{
		string result = string.Empty;
		switch (gradientShadingVariant)
		{
		case GradientShadingVariant.ShadingUp:
			result = "100%";
			break;
		case GradientShadingVariant.ShadingMiddle:
			result = "50%";
			break;
		case GradientShadingVariant.ShadingDown:
			result = "0%";
			break;
		case GradientShadingVariant.ShadingOut:
			result = "25%";
			break;
		}
		return result;
	}

	private string GetGradientStopAsColors(GradientFill gradientFill)
	{
		string text = string.Empty;
		SortGradientStops(gradientFill);
		for (int i = 0; i < gradientFill.GradientStops.Count; i++)
		{
			text = text + gradientFill.GradientStops[i].Position * 65536 / 100 + "f";
			text = text + " #" + GetRGBCode(gradientFill.GradientStops[i].Color);
			if (i != gradientFill.GradientStops.Count - 1)
			{
				text += ";";
			}
		}
		return text;
	}

	private void SortGradientStops(GradientFill gradientFill)
	{
		for (int i = 0; i < gradientFill.GradientStops.Count - 1; i++)
		{
			for (int j = i + 1; j < gradientFill.GradientStops.Count - 1; j++)
			{
				if (gradientFill.GradientStops[i].Position > gradientFill.GradientStops[j].Position)
				{
					GradientStop value = gradientFill.GradientStops[i];
					gradientFill.GradientStops[i] = gradientFill.GradientStops[j];
					gradientFill.GradientStops[j] = value;
				}
			}
		}
	}

	private string GetAngle(short angle, bool isAnglePositive)
	{
		int num = Convert.ToInt32(angle);
		int num2 = int.MaxValue;
		if (isAnglePositive)
		{
			if (num >= 0 && num <= 90)
			{
				num2 = 90 - num;
			}
			else if (num > 90 && num <= 180)
			{
				num2 = 270 + (180 - num);
			}
			else if (num > 180 && num <= 270)
			{
				num2 = 180 + (270 - num);
			}
			else if (num > 270 && num <= 360)
			{
				num2 = 90 + (360 - num);
			}
			num2 = ((num2 != 360) ? num2 : 0);
		}
		else
		{
			if (num >= 0 && num <= 90)
			{
				num2 = 90 + num;
			}
			else if (num > 90 && num <= 180)
			{
				num2 = 180 + (num - 90);
			}
			else if (num > 180 && num <= 270)
			{
				num2 = 270 + (num - 180);
			}
			else if (num > 270 && num <= 360)
			{
				num2 = num - 270;
			}
			num2 = ((num2 != 360) ? (-num2) : 0);
		}
		return num2.ToString();
	}

	private void SerializeBlipFill2007(Shape shape)
	{
		m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
		byte[] array = null;
		if (shape.FillFormat.ImageRecord != null)
		{
			array = shape.FillFormat.ImageRecord.ImageBytes;
		}
		if (shape.FillFormat.FillType == FillType.FillPatterned && shape.FillFormat.Pattern != PatternType.Mixed)
		{
			array = GetPatternImageBytes(shape.FillFormat.Pattern.ToString());
		}
		if (array != null)
		{
			Entity baseEntity = shape.GetBaseEntity(shape);
			string text = string.Empty;
			WPicture wPicture = new WPicture(m_document);
			wPicture.LoadImage(array);
			UpdateImages(wPicture);
			if (baseEntity is WSection)
			{
				text = AddImageRelation(DocumentImages, wPicture.ImageRecord, IsNeedToSkipImageRelation(wPicture));
			}
			else if (baseEntity is HeaderFooter)
			{
				text = UpdateHFImageRels(baseEntity as HeaderFooter, wPicture);
			}
			else if (baseEntity is ChildShape)
			{
				text = AddImageRelation(DocumentImages, wPicture.ImageRecord, IsNeedToSkipImageRelation(wPicture));
			}
			m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", text.ToString());
		}
		uint num = Convert.ToUInt32(65536f * (1f - shape.FillFormat.Transparency / 100f));
		m_writer.WriteAttributeString("opacity", num.ToString(CultureInfo.InvariantCulture) + "f");
		if (!shape.FillFormat.Color.IsEmpty)
		{
			m_writer.WriteAttributeString("color2", "#" + GetRGBCode(shape.FillFormat.Color));
		}
		m_writer.WriteAttributeString("rotate", shape.FillFormat.RotateWithObject ? "t" : "f");
		if (shape.FillFormat.FillType == FillType.FillPatterned)
		{
			m_writer.WriteAttributeString("type", "pattern");
		}
		else if (shape.FillFormat.FillType == FillType.FillPicture)
		{
			m_writer.WriteAttributeString("type", "frame");
		}
		else
		{
			m_writer.WriteAttributeString("type", "tile");
		}
		m_writer.WriteEndElement();
	}

	private void SerializeBlipFill2007(ChildShape shape)
	{
		m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
		byte[] array = null;
		if (shape.FillFormat.ImageRecord != null)
		{
			array = shape.FillFormat.ImageRecord.ImageBytes;
		}
		if (shape.FillFormat.FillType == FillType.FillPatterned && shape.FillFormat.Pattern != PatternType.Mixed)
		{
			array = GetPatternImageBytes(shape.FillFormat.Pattern.ToString());
		}
		if (array != null)
		{
			Entity baseEntity = GetBaseEntity(shape);
			string text = string.Empty;
			WPicture wPicture = new WPicture(m_document);
			wPicture.LoadImage(array);
			UpdateImages(wPicture);
			if (baseEntity is WSection)
			{
				text = AddImageRelation(DocumentImages, wPicture.ImageRecord, IsNeedToSkipImageRelation(wPicture));
			}
			else if (baseEntity is HeaderFooter)
			{
				text = UpdateHFImageRels(baseEntity as HeaderFooter, wPicture);
			}
			m_writer.WriteAttributeString("id", "http://schemas.openxmlformats.org/officeDocument/2006/relationships", text.ToString());
		}
		uint num = Convert.ToUInt32(65536f * (1f - shape.FillFormat.Transparency / 100f));
		m_writer.WriteAttributeString("opacity", num.ToString(CultureInfo.InvariantCulture) + "f");
		if (!shape.FillFormat.Color.IsEmpty)
		{
			m_writer.WriteAttributeString("color2", "#" + GetRGBCode(shape.FillFormat.Color));
		}
		m_writer.WriteAttributeString("rotate", shape.FillFormat.RotateWithObject ? "t" : "f");
		if (shape.FillFormat.FillType == FillType.FillPatterned)
		{
			m_writer.WriteAttributeString("type", "pattern");
		}
		else if (shape.FillFormat.FillType == FillType.FillPicture)
		{
			m_writer.WriteAttributeString("type", "frame");
		}
		else
		{
			m_writer.WriteAttributeString("type", "tile");
		}
		m_writer.WriteEndElement();
	}

	private Stream GetManifestResourceStream(string fileName)
	{
		Assembly assembly = typeof(DocxSerializator).GetTypeInfo().Assembly;
		string[] manifestResourceNames = assembly.GetManifestResourceNames();
		foreach (string text in manifestResourceNames)
		{
			if (text.EndsWith("." + fileName))
			{
				fileName = text;
				break;
			}
		}
		return assembly.GetManifestResourceStream(fileName);
	}

	private byte[] GetPatternImageBytes(string patternType)
	{
		XmlReader xmlReader = XmlReader.Create(GetManifestResourceStream("PatternFillResources.xml"));
		byte[] result = null;
		while (!xmlReader.EOF)
		{
			xmlReader.ReadToFollowing("name");
			if (!xmlReader.EOF)
			{
				xmlReader.Read();
				SkipWhitespaces(xmlReader);
				if (xmlReader.Value == patternType)
				{
					xmlReader.ReadToFollowing("patternBytes");
					if (!xmlReader.EOF)
					{
						xmlReader.Read();
						SkipWhitespaces(xmlReader);
						return Convert.FromBase64String(xmlReader.Value);
					}
				}
			}
			SkipWhitespaces(xmlReader);
		}
		return result;
	}

	private void SkipWhitespaces(XmlReader reader)
	{
		if (reader.NodeType != XmlNodeType.Element)
		{
			while (reader.NodeType == XmlNodeType.Whitespace)
			{
				reader.Read();
			}
		}
	}

	private string GetEmuFromPoint(double pointValue)
	{
		return Math.Round(pointValue * 12700.0).ToString(CultureInfo.InvariantCulture);
	}

	private void SerializeAbsolutePicture(ParagraphItem item)
	{
		ShapeBase shapeBase = ((!(item is WChart)) ? ((item is WTextBox) ? (item as WTextBox).Shape : (item as ShapeBase)) : (item as WChart));
		m_writer.WriteStartElement("anchor", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		m_writer.WriteAttributeString("distT", GetEmuFromPoint(shapeBase.WrapFormat.DistanceTop));
		m_writer.WriteAttributeString("distB", GetEmuFromPoint(shapeBase.WrapFormat.DistanceBottom));
		m_writer.WriteAttributeString("distL", GetEmuFromPoint(shapeBase.WrapFormat.DistanceLeft));
		m_writer.WriteAttributeString("distR", GetEmuFromPoint(shapeBase.WrapFormat.DistanceRight));
		m_writer.WriteAttributeString("simplePos", "0");
		m_writer.WriteAttributeString("relativeHeight", shapeBase.ZOrderPosition.ToString());
		string value = (shapeBase.IsBelowText ? "1" : "0");
		m_writer.WriteAttributeString("behindDoc", value);
		string value2 = (shapeBase.LockAnchor ? "1" : "0");
		m_writer.WriteAttributeString("locked", value2);
		if (shapeBase.LayoutInCell)
		{
			m_writer.WriteAttributeString("layoutInCell", "1");
		}
		else
		{
			m_writer.WriteAttributeString("layoutInCell", "0");
		}
		string value3 = (shapeBase.WrapFormat.AllowOverlap ? "1" : "0");
		m_writer.WriteAttributeString("allowOverlap", value3);
		m_writer.WriteStartElement("simplePos", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		m_writer.WriteAttributeString("x", "0");
		m_writer.WriteAttributeString("y", "0");
		m_writer.WriteEndElement();
		if (shapeBase.IsRelativeHorizontalPosition)
		{
			m_writer.WriteStartElement("AlternateContent", "http://schemas.openxmlformats.org/markup-compatibility/2006");
			m_writer.WriteStartElement("Choice", "http://schemas.openxmlformats.org/markup-compatibility/2006");
			m_writer.WriteAttributeString("Requires", "wp14");
			m_writer.WriteStartElement("positionH", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteAttributeString("relativeFrom", GetShapeHorzOrigin(shapeBase.RelativeHorizontalOrigin));
			m_writer.WriteStartElement("pctPosHOffset", "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
			int num = (int)Math.Round(shapeBase.RelativeHorizontalPosition * 1000f);
			m_writer.WriteString(num.ToString());
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			m_writer.WriteStartElement("Fallback", "http://schemas.openxmlformats.org/markup-compatibility/2006");
			m_writer.WriteStartElement("positionH", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteAttributeString("relativeFrom", GetShapeHorzOrigin(shapeBase.HorizontalOrigin));
			if (shapeBase.HorizontalAlignment == ShapeHorizontalAlignment.None)
			{
				m_writer.WriteStartElement("posOffset", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
				int num2 = (int)Math.Round(shapeBase.HorizontalPosition * 12700f);
				m_writer.WriteString(num2.ToString());
				m_writer.WriteEndElement();
			}
			else
			{
				m_writer.WriteStartElement("align", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
				string text = shapeBase.HorizontalAlignment.ToString().ToLower();
				m_writer.WriteString(text);
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		else
		{
			m_writer.WriteStartElement("positionH", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteAttributeString("relativeFrom", GetShapeHorzOrigin(shapeBase.HorizontalOrigin));
			if (shapeBase.HorizontalAlignment == ShapeHorizontalAlignment.None)
			{
				m_writer.WriteStartElement("posOffset", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
				int num3 = (int)Math.Round(shapeBase.HorizontalPosition * 12700f);
				m_writer.WriteString(num3.ToString());
				m_writer.WriteEndElement();
			}
			else
			{
				m_writer.WriteStartElement("align", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
				string text2 = shapeBase.HorizontalAlignment.ToString().ToLower();
				m_writer.WriteString(text2);
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		if (shapeBase.IsRelativeVerticalPosition)
		{
			m_writer.WriteStartElement("AlternateContent", "http://schemas.openxmlformats.org/markup-compatibility/2006");
			m_writer.WriteStartElement("Choice", "http://schemas.openxmlformats.org/markup-compatibility/2006");
			m_writer.WriteAttributeString("Requires", "wp14");
			m_writer.WriteStartElement("positionV", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteAttributeString("relativeFrom", GetVerticalOrginAsString(shapeBase.RelativeVerticalOrigin, isShapeStyle: false));
			m_writer.WriteStartElement("pctPosVOffset", "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
			int num4 = (int)Math.Round(shapeBase.RelativeVerticalPosition * 1000f);
			m_writer.WriteString(num4.ToString());
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			m_writer.WriteStartElement("Fallback", "http://schemas.openxmlformats.org/markup-compatibility/2006");
			m_writer.WriteStartElement("positionV", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteAttributeString("relativeFrom", GetVerticalOrginAsString(shapeBase.VerticalOrigin, isShapeStyle: false));
			if (shapeBase.VerticalAlignment == ShapeVerticalAlignment.None)
			{
				m_writer.WriteStartElement("posOffset", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
				int num5 = (int)Math.Round(shapeBase.VerticalPosition * 12700f);
				m_writer.WriteString(num5.ToString());
				m_writer.WriteEndElement();
			}
			else
			{
				m_writer.WriteStartElement("align", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
				string text3 = shapeBase.VerticalAlignment.ToString().ToLower();
				m_writer.WriteString(text3);
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		else
		{
			m_writer.WriteStartElement("positionV", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteAttributeString("relativeFrom", GetVerticalOrginAsString(shapeBase.VerticalOrigin, isShapeStyle: false));
			if (shapeBase.VerticalAlignment == ShapeVerticalAlignment.None || shapeBase.VerticalAlignment == ShapeVerticalAlignment.Inline)
			{
				m_writer.WriteStartElement("posOffset", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
				int num6 = (int)Math.Round(shapeBase.VerticalPosition * 12700f);
				m_writer.WriteString(num6.ToString());
				m_writer.WriteEndElement();
			}
			else
			{
				m_writer.WriteStartElement("align", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
				string text4 = shapeBase.VerticalAlignment.ToString().ToLower();
				m_writer.WriteString(text4);
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteStartElement("extent", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		int num7 = (int)Math.Round(shapeBase.Width * 12700f);
		m_writer.WriteAttributeString("cx", num7.ToString());
		int num8 = (int)Math.Round(shapeBase.Height * 12700f);
		m_writer.WriteAttributeString("cy", num8.ToString());
		m_writer.WriteEndElement();
		if (item is ShapeBase)
		{
			ShapeBase shapeBase2 = item as ShapeBase;
			if (shapeBase2.DocxProps.ContainsKey("effectExtent"))
			{
				SerializeDocxProps(shapeBase2.DocxProps, "effectExtent");
			}
		}
		switch (shapeBase.WrapFormat.TextWrappingStyle)
		{
		case TextWrappingStyle.Square:
			m_writer.WriteStartElement("wrapSquare", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteAttributeString("wrapText", GetPictureWrappingTypeAsString(shapeBase.WrapFormat.TextWrappingType));
			m_writer.WriteEndElement();
			break;
		case TextWrappingStyle.Through:
			m_writer.WriteStartElement("wrapThrough", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteAttributeString("wrapText", GetPictureWrappingTypeAsString(shapeBase.WrapFormat.TextWrappingType));
			SerializeWrapPolygon(shapeBase, shapeBase.WrapFormat.WrapPolygon);
			m_writer.WriteEndElement();
			break;
		case TextWrappingStyle.Tight:
			m_writer.WriteStartElement("wrapTight", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteAttributeString("wrapText", GetPictureWrappingTypeAsString(shapeBase.WrapFormat.TextWrappingType));
			SerializeWrapPolygon(shapeBase, shapeBase.WrapFormat.WrapPolygon);
			m_writer.WriteEndElement();
			break;
		case TextWrappingStyle.TopAndBottom:
			m_writer.WriteStartElement("wrapTopAndBottom", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteEndElement();
			break;
		default:
			m_writer.WriteStartElement("wrapNone", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteEndElement();
			break;
		}
		if (item is WChart)
		{
			SerializeChartGraphicData(item as WChart);
		}
		else
		{
			SerializeShapeDrawingGraphics(item);
		}
		if (shapeBase.IsRelativeWidth)
		{
			m_writer.WriteStartElement("sizeRelH", "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
			m_writer.WriteAttributeString("relativeFrom", GetShapeHorzOrigin(shapeBase.RelativeWidthHorizontalOrigin));
			m_writer.WriteStartElement("pctWidth", "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
			int num9 = (int)Math.Round(shapeBase.RelativeWidth * 1000f);
			m_writer.WriteString(num9.ToString());
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shapeBase.IsRelativeHeight)
		{
			m_writer.WriteStartElement("sizeRelV", "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
			m_writer.WriteAttributeString("relativeFrom", GetVerticalOrginAsString(shapeBase.RelativeHeightVerticalOrigin, isShapeStyle: false));
			m_writer.WriteStartElement("pctHeight", "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
			int num10 = (int)Math.Round(shapeBase.RelativeHeight * 1000f);
			m_writer.WriteString(num10.ToString());
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (!(item is GroupShape))
		{
			m_writer.WriteEndElement();
		}
	}

	private string GetShapeHorzOrigin(HorizontalOrigin horzOrigin)
	{
		return horzOrigin switch
		{
			HorizontalOrigin.LeftMargin => "leftMargin", 
			HorizontalOrigin.RightMargin => "rightMargin", 
			HorizontalOrigin.InsideMargin => "insideMargin", 
			HorizontalOrigin.OutsideMargin => "outsideMargin", 
			_ => horzOrigin.ToString().ToLower(), 
		};
	}

	private string GetHorizOriginAsString(HorizontalOrigin horzOrigin)
	{
		return horzOrigin switch
		{
			HorizontalOrigin.LeftMargin => "left-margin-area", 
			HorizontalOrigin.RightMargin => "right-margin-area", 
			HorizontalOrigin.InsideMargin => "inner-margin-area", 
			HorizontalOrigin.OutsideMargin => "outer-margin-area", 
			HorizontalOrigin.Character => "char", 
			_ => horzOrigin.ToString().ToLower(), 
		};
	}

	private void SerializeInlinePicture(ParagraphItem item)
	{
		ShapeCommon shapeCommon = ((!(item is WChart)) ? ((item is WTextBox) ? (item as WTextBox).Shape : (item as ShapeCommon)) : (item as WChart));
		m_writer.WriteStartElement("inline", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		m_writer.WriteStartElement("extent", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		int num = (int)Math.Round(shapeCommon.Width * shapeCommon.WidthScale / 100f * 12700f);
		m_writer.WriteAttributeString("cx", num.ToString());
		int num2 = (int)Math.Round(shapeCommon.Height * shapeCommon.HeightScale / 100f * 12700f);
		m_writer.WriteAttributeString("cy", num2.ToString());
		m_writer.WriteEndElement();
		if (item is ShapeBase)
		{
			ShapeBase shapeBase = item as ShapeBase;
			if (shapeBase.DocxProps.ContainsKey("effectExtent"))
			{
				SerializeDocxProps(shapeBase.DocxProps, "effectExtent");
			}
		}
		if (item is WChart)
		{
			SerializeChartGraphicData(item as WChart);
		}
		else
		{
			SerializeShapeDrawingGraphics(item);
		}
		m_writer.WriteEndElement();
	}

	private void SerializeShapeDrawingGraphics(ParagraphItem item)
	{
		ShapeBase shapeBase = ((item is WTextBox) ? (item as WTextBox).Shape : (item as ShapeBase));
		m_writer.WriteStartElement("wp", "docPr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		if (shapeBase.ShapeID == 0L)
		{
			shapeBase.ShapeID = GetNextDocPrID();
		}
		long shapeID = shapeBase.ShapeID;
		m_writer.WriteAttributeString("id", shapeID.ToString());
		string value = "";
		if (shapeBase.Name != null && shapeBase.Name.Length > 0)
		{
			value = shapeBase.Name;
		}
		else if (shapeBase is Shape)
		{
			value = (shapeBase as Shape).AutoShapeType.ToString();
		}
		else if (shapeBase is GroupShape)
		{
			string text2 = (shapeBase.Name = "Group " + shapeID);
			value = text2;
		}
		m_writer.WriteAttributeString("name", value);
		m_writer.WriteAttributeString("title", shapeBase.Title);
		if (shapeBase.AlternativeText != null)
		{
			m_writer.WriteAttributeString("descr", shapeBase.AlternativeText);
		}
		if ((item is WTextBox && !(item as WTextBox).Visible) || !shapeBase.Visible)
		{
			m_writer.WriteAttributeString("hidden", "1");
		}
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "graphic", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("a", "graphicData", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (item is GroupShape)
		{
			m_writer.WriteAttributeString("uri", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
			m_writer.WriteStartElement("wpg", "wgp", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
			m_writer.WriteStartElement("wpg", "cNvGrpSpPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
			m_writer.WriteEndElement();
			m_writer.WriteStartElement("wpg", "grpSpPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
			m_writer.WriteStartElement("a", "xfrm", "http://schemas.openxmlformats.org/drawingml/2006/main");
			if ((shapeBase as GroupShape).FlipHorizontal)
			{
				m_writer.WriteAttributeString("flipH", "1");
			}
			if ((shapeBase as GroupShape).FlipVertical)
			{
				m_writer.WriteAttributeString("flipV", "1");
			}
			if ((shapeBase as GroupShape).Rotation != 0f)
			{
				long num = (long)(GetRotationAngle((shapeBase as GroupShape).Rotation) * 60000f);
				m_writer.WriteAttributeString("rot", num.ToString());
			}
			m_writer.WriteStartElement("a", "off", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("x", "0");
			m_writer.WriteAttributeString("y", "0");
			m_writer.WriteEndElement();
			m_writer.WriteStartElement("a", "ext", "http://schemas.openxmlformats.org/drawingml/2006/main");
			int num2 = (int)Math.Round(shapeBase.Width * shapeBase.WidthScale / 100f * 12700f);
			m_writer.WriteAttributeString("cx", num2.ToString());
			int num3 = (int)Math.Round(shapeBase.Height * shapeBase.HeightScale / 100f * 12700f);
			m_writer.WriteAttributeString("cy", num3.ToString());
			m_writer.WriteEndElement();
			m_writer.WriteStartElement("a", "chOff", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("x", ((int)Math.Round((shapeBase as GroupShape).X * 12700f)).ToString());
			m_writer.WriteAttributeString("y", ((int)Math.Round((shapeBase as GroupShape).Y * 12700f)).ToString());
			m_writer.WriteEndElement();
			m_writer.WriteStartElement("a", "chExt", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("cx", ((int)Math.Round((shapeBase as GroupShape).ExtentXValue * 12700f)).ToString());
			m_writer.WriteAttributeString("cy", ((int)Math.Round((shapeBase as GroupShape).ExtentYValue * 12700f)).ToString());
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			if (shapeBase is GroupShape)
			{
				GroupShape groupShape = shapeBase as GroupShape;
				if (groupShape.IsFillStyleInline)
				{
					if (groupShape.FillFormat.Fill)
					{
						switch (groupShape.FillFormat.FillType)
						{
						case FillType.FillTextured:
						case FillType.FillPicture:
						{
							Entity baseEntity = GetBaseEntity(groupShape);
							SerializeBlipFill(groupShape.FillFormat, baseEntity);
							break;
						}
						case FillType.FillGradient:
							SerializeGradientFill(groupShape.FillFormat.GradientFill);
							break;
						case FillType.FillPatterned:
							SerializePatternFill(groupShape.FillFormat);
							break;
						default:
							SerializeSolidFill(groupShape.FillFormat.Color, groupShape.FillFormat.Transparency);
							break;
						}
					}
					else
					{
						m_writer.WriteStartElement("noFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
						m_writer.WriteEndElement();
					}
				}
				if (groupShape.IsLineStyleInline)
				{
					m_writer.WriteStartElement("ln", "http://schemas.openxmlformats.org/drawingml/2006/main");
					if (groupShape.LineFormat.InsetPen)
					{
						m_writer.WriteAttributeString("algn", "in");
					}
					m_writer.WriteAttributeString("cap", GetLineCapStyle(groupShape.LineFormat.LineCap, is2007: false));
					m_writer.WriteAttributeString("cmpd", GetLineStyle(groupShape.LineFormat.Style, is2007: false));
					float num4 = (float)Math.Round(groupShape.LineFormat.Weight * 12700f);
					m_writer.WriteAttributeString("w", num4.ToString(CultureInfo.InvariantCulture));
					if (groupShape.LineFormat.HasKey(12))
					{
						if (groupShape.LineFormat.Line)
						{
							if (groupShape.LineFormat.LineFormatType == LineFormatType.Gradient)
							{
								SerializeGradientFill(groupShape.LineFormat.GradientFill);
							}
							else if (groupShape.LineFormat.LineFormatType == LineFormatType.Patterned)
							{
								SerializePatternFill(groupShape.LineFormat);
							}
							else if (!groupShape.LineFormat.Color.IsEmpty)
							{
								SerializeSolidFill(groupShape.LineFormat.Color, groupShape.LineFormat.Transparency);
							}
						}
						else
						{
							m_writer.WriteStartElement("noFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
							m_writer.WriteEndElement();
						}
					}
					m_writer.WriteEndElement();
				}
				if (groupShape.EffectList.Count > 0)
				{
					bool flag = true;
					for (int i = 0; i < groupShape.EffectList.Count; i++)
					{
						if (groupShape.EffectList[i] != null)
						{
							if (flag && groupShape.EffectList[i].IsEffectListItem)
							{
								SerializeEffectList(groupShape.EffectList);
								flag = false;
							}
							if (groupShape.EffectList[i].IsSceneProperties && groupShape.IsScenePropertiesInline)
							{
								SerializeThreeDSceneEffects(groupShape.EffectList[i].ThreeDFormat);
							}
							if (groupShape.EffectList[i].IsShapeProperties && groupShape.IsShapePropertiesInline)
							{
								SerializeThreeDShapeEffects(groupShape.EffectList[i].ThreeDFormat);
							}
						}
					}
				}
			}
			m_writer.WriteEndElement();
		}
		if (shapeBase is Shape)
		{
			SerializeShape(shapeBase, item);
		}
		else
		{
			if (!(shapeBase is GroupShape))
			{
				return;
			}
			foreach (ParagraphItem childShape2 in (shapeBase as GroupShape).ChildShapes)
			{
				if (childShape2 is ChildGroupShape)
				{
					m_writer.WriteStartElement("wpg", "grpSp", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
					SerializeNestedGroupShape(childShape2 as ChildGroupShape);
					if ((childShape2 as ChildGroupShape).ChildShapes.Count > 0)
					{
						foreach (ChildShape childShape3 in (childShape2 as ChildGroupShape).ChildShapes)
						{
							if (childShape3 is ChildGroupShape)
							{
								m_writer.WriteStartElement("wpg", "grpSp", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
								SerializeNestedGroupShape(childShape3 as ChildGroupShape);
								SerializeChildGroupShape(childShape3 as ChildGroupShape, item);
								m_writer.WriteEndElement();
							}
							else if (childShape3 != null)
							{
								SerializeChildShape(childShape3, item);
							}
						}
					}
					m_writer.WriteEndElement();
				}
				else if (childShape2 is ChildShape)
				{
					SerializeChildShape(childShape2 as ChildShape, item);
				}
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
	}

	private void SerializeChildGroupShape(ChildGroupShape innerChildShape, ParagraphItem item)
	{
		foreach (ChildShape childShape in innerChildShape.ChildShapes)
		{
			if (childShape.IsPicture)
			{
				SerializeChildGroupPicture(childShape);
			}
			else if (childShape.Chart != null)
			{
				m_hasChart = true;
				SerializeChildGroupChart(childShape.Chart, childShape);
			}
			else if (childShape.XmlParagraphItem != null)
			{
				SerializeXmlParagraphItem(childShape.XmlParagraphItem, isInGroupShape: true);
			}
			else if (childShape is ChildGroupShape)
			{
				m_writer.WriteStartElement("wpg", "grpSp", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
				SerializeNestedGroupShape(childShape as ChildGroupShape);
				SerializeChildGroupShape(childShape as ChildGroupShape, item);
				m_writer.WriteEndElement();
			}
			else
			{
				SerializeChildShape(childShape, item);
			}
		}
	}

	private void SerializeChildShape(ChildShape childShape, ParagraphItem item)
	{
		if (childShape.IsPicture)
		{
			SerializeChildGroupPicture(childShape);
		}
		else if (childShape.Chart != null)
		{
			m_hasChart = true;
			SerializeChildGroupChart(childShape.Chart, childShape);
		}
		else if (childShape.XmlParagraphItem != null)
		{
			SerializeXmlParagraphItem(childShape.XmlParagraphItem, isInGroupShape: true);
		}
		else
		{
			SerializeShape(childShape, item);
		}
	}

	private void SerializeChildGroupChart(WChart chart, ChildShape childShape)
	{
		m_writer.WriteStartElement("wpg", "graphicFrame", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
		m_writer.WriteStartElement("wpg", "cNvPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
		m_writer.WriteAttributeString("id", childShape.ShapeID.ToString());
		string text = "";
		text = ((childShape.Name == null || childShape.Name.Length <= 0) ? childShape.EntityType.ToString() : childShape.Name);
		m_writer.WriteAttributeString("name", text);
		if (!string.IsNullOrEmpty(childShape.Title))
		{
			m_writer.WriteAttributeString("title", childShape.Title);
		}
		else
		{
			m_writer.WriteAttributeString("title", string.Empty);
		}
		if (childShape.AlternativeText != null)
		{
			m_writer.WriteAttributeString("descr", childShape.AlternativeText);
		}
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("wpg", "cNvFrPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("wpg", "xfrm", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
		m_writer.WriteStartElement("a", "off", "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("x", (childShape.X * 12700f).ToString(CultureInfo.InvariantCulture));
		m_writer.WriteAttributeString("y", (childShape.Y * 12700f).ToString(CultureInfo.InvariantCulture));
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "ext", "http://schemas.openxmlformats.org/drawingml/2006/main");
		int num = (int)Math.Round(childShape.Width * childShape.WidthScale / 100f * 12700f);
		m_writer.WriteAttributeString("cx", num.ToString());
		int num2 = (int)Math.Round(childShape.Height * childShape.HeightScale / 100f * 12700f);
		m_writer.WriteAttributeString("cy", num2.ToString());
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		string nextRelationShipID = GetNextRelationShipID();
		Entity chartBaseEntity = GetChartBaseEntity(chart);
		if (chartBaseEntity is HeaderFooter && !HFChartCollection.ContainsKey(nextRelationShipID))
		{
			HFChartCollection.Add(nextRelationShipID, chart);
		}
		if (chartBaseEntity is WFootnote)
		{
			if ((chartBaseEntity as WFootnote).FootnoteType == FootnoteType.Footnote && !FootnoteChartCollection.ContainsKey(nextRelationShipID))
			{
				FootnoteChartCollection.Add(nextRelationShipID, chart);
			}
			else if ((chartBaseEntity as WFootnote).FootnoteType == FootnoteType.Endnote && !EndnoteChartCollection.ContainsKey(nextRelationShipID))
			{
				EndnoteChartCollection.Add(nextRelationShipID, chart);
			}
		}
		if (chartBaseEntity is WComment && !CommentsChartCollection.ContainsKey(nextRelationShipID))
		{
			CommentsChartCollection.Add(nextRelationShipID, chart);
		}
		if (!(chartBaseEntity is HeaderFooter) && !(chartBaseEntity is WFootnote) && !(chartBaseEntity is WComment))
		{
			DocumentChartCollection.Add(nextRelationShipID, chart);
		}
		if (!IsWord2003ML)
		{
			SerializeChartElements(chart, nextRelationShipID);
		}
		m_writer.WriteStartElement("a", "graphic", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("a", "graphicData", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (chart.Is2016Chart)
		{
			m_writer.WriteAttributeString("uri", "http://schemas.microsoft.com/office/drawing/2014/chartex");
			m_writer.WriteStartElement("cx", "chart", "http://schemas.microsoft.com/office/drawing/2014/chartex");
		}
		else
		{
			m_writer.WriteAttributeString("uri", "http://schemas.openxmlformats.org/drawingml/2006/chart");
			m_writer.WriteStartElement("c", "chart", "http://schemas.openxmlformats.org/drawingml/2006/chart");
		}
		m_writer.WriteAttributeString("xmlns", "r", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
		m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", nextRelationShipID);
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		if (!ChartRelationId.ContainsKey(nextRelationShipID))
		{
			ChartRelationId.Add(nextRelationShipID, chart);
		}
	}

	private void SerializeChildGroupPicture(ChildShape picture)
	{
		string empty = string.Empty;
		empty = UpdateShapeId(picture);
		picture.ShapeID = GetNextDocPrID();
		m_writer.WriteStartElement("pic", "pic", "http://schemas.openxmlformats.org/drawingml/2006/picture");
		m_writer.WriteStartElement("pic", "nvPicPr", "http://schemas.openxmlformats.org/drawingml/2006/picture");
		m_writer.WriteStartElement("pic", "cNvPr", "http://schemas.openxmlformats.org/drawingml/2006/picture");
		m_writer.WriteAttributeString("id", picture.ShapeID.ToString());
		m_writer.WriteAttributeString("name", picture.Name.ToString());
		m_writer.WriteAttributeString("descr", "");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("pic", "cNvPicPr", "http://schemas.openxmlformats.org/drawingml/2006/picture");
		m_writer.WriteStartElement("a", "picLocks", "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("noChangeAspect", "1");
		m_writer.WriteAttributeString("noChangeArrowheads", "1");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("pic", "blipFill", "http://schemas.openxmlformats.org/drawingml/2006/picture");
		m_writer.WriteStartElement("a", "blip", "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("r", "embed", "http://schemas.openxmlformats.org/officeDocument/2006/relationships", empty);
		if (picture.FillFormat.FillType == FillType.FillPicture)
		{
			Entity baseEntity = picture.GetBaseEntity(picture);
			SerializeBlipFill(picture.FillFormat, baseEntity, null, picture);
		}
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "srcRect", "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (picture.FillFormat.SourceRectangle != null)
		{
			SerializeTileRectange(picture.FillFormat.SourceRectangle);
		}
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "stretch", "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("a", "fillRect", "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("pic", "spPr", "http://schemas.openxmlformats.org/drawingml/2006/picture");
		m_writer.WriteAttributeString("bwMode", "auto");
		m_writer.WriteStartElement("a", "xfrm", "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (picture.Rotation != 0f)
		{
			long num = (long)(GetRotationAngle(picture.Rotation) * 60000f);
			m_writer.WriteAttributeString("rot", num.ToString());
		}
		m_writer.WriteStartElement("a", "off", "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("x", Math.Round(picture.X * 12700f).ToString(CultureInfo.InvariantCulture));
		m_writer.WriteAttributeString("y", Math.Round(picture.Y * 12700f).ToString(CultureInfo.InvariantCulture));
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "ext", "http://schemas.openxmlformats.org/drawingml/2006/main");
		int num2 = (int)Math.Round(picture.Width * 12700f);
		m_writer.WriteAttributeString("cx", num2.ToString());
		int num3 = (int)Math.Round(picture.Height * 12700f);
		m_writer.WriteAttributeString("cy", num3.ToString());
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "prstGeom", "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("prst", "rect");
		m_writer.WriteStartElement("a", "avLst", "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		if (picture.DocxPictureVisualProps.Count > 0)
		{
			SerializeDocxProps(picture.DocxPictureVisualProps, "ln");
			SerializeDocxProps(picture.DocxPictureVisualProps, "effectLst");
			SerializeDocxProps(picture.DocxPictureVisualProps, "scene3d");
			SerializeDocxProps(picture.DocxPictureVisualProps, "sp3d");
			SerializeDocxProps(picture.DocxPictureVisualProps, "extLst");
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeNestedGroupShape(ChildGroupShape childGroupShape)
	{
		m_writer.WriteStartElement("wpg", "cNvPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
		if (childGroupShape.ShapeID == 0L)
		{
			childGroupShape.ShapeID = GetNextDocPrID();
		}
		long shapeID = childGroupShape.ShapeID;
		m_writer.WriteAttributeString("id", shapeID.ToString());
		if (childGroupShape.Name != null)
		{
			m_writer.WriteAttributeString("name", childGroupShape.Name.ToString());
		}
		else
		{
			childGroupShape.Name = "Group " + shapeID;
			m_writer.WriteAttributeString("name", childGroupShape.Name.ToString());
		}
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("wpg", "cNvGrpSpPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("wpg", "grpSpPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
		m_writer.WriteStartElement("a", "xfrm", "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (childGroupShape.FlipHorizantal)
		{
			m_writer.WriteAttributeString("flipH", "1");
		}
		if (childGroupShape.FlipVertical)
		{
			m_writer.WriteAttributeString("flipV", "1");
		}
		if (childGroupShape.Rotation != 0f)
		{
			long num = (long)(GetRotationAngle(childGroupShape.Rotation) * 60000f);
			m_writer.WriteAttributeString("rot", num.ToString());
		}
		m_writer.WriteStartElement("a", "off", "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("x", ((int)Math.Round(childGroupShape.OffsetXValue * 12700f)).ToString());
		m_writer.WriteAttributeString("y", ((int)Math.Round(childGroupShape.OffsetYValue * 12700f)).ToString());
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "ext", "http://schemas.openxmlformats.org/drawingml/2006/main");
		int num2 = (int)Math.Round(childGroupShape.Width * childGroupShape.WidthScale / 100f * 12700f);
		m_writer.WriteAttributeString("cx", num2.ToString());
		int num3 = (int)Math.Round(childGroupShape.Height * childGroupShape.HeightScale / 100f * 12700f);
		m_writer.WriteAttributeString("cy", num3.ToString());
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "chOff", "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("x", ((int)Math.Round(childGroupShape.X * 12700f)).ToString());
		m_writer.WriteAttributeString("y", ((int)Math.Round(childGroupShape.Y * 12700f)).ToString());
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "chExt", "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("cx", ((int)Math.Round(childGroupShape.ExtentXValue * 12700f)).ToString());
		m_writer.WriteAttributeString("cy", ((int)Math.Round(childGroupShape.ExtentYValue * 12700f)).ToString());
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		if (childGroupShape.IsFillStyleInline)
		{
			if (childGroupShape.FillFormat.Fill)
			{
				switch (childGroupShape.FillFormat.FillType)
				{
				case FillType.FillTextured:
				case FillType.FillPicture:
				{
					Entity baseEntity = GetBaseEntity(childGroupShape);
					SerializeBlipFill(childGroupShape.FillFormat, baseEntity);
					break;
				}
				case FillType.FillGradient:
					SerializeGradientFill(childGroupShape.FillFormat.GradientFill);
					break;
				case FillType.FillPatterned:
					SerializePatternFill(childGroupShape.FillFormat);
					break;
				default:
					SerializeSolidFill(childGroupShape.FillFormat.Color, childGroupShape.FillFormat.Transparency);
					break;
				}
			}
			else
			{
				m_writer.WriteStartElement("noFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteEndElement();
			}
			if (childGroupShape.DocxProps.ContainsKey("grpFill"))
			{
				SerializeDocxStream(childGroupShape.DocxProps, "grpFill");
			}
			if (childGroupShape.IsLineStyleInline)
			{
				m_writer.WriteStartElement("ln", "http://schemas.openxmlformats.org/drawingml/2006/main");
				if (childGroupShape.LineFormat.InsetPen)
				{
					m_writer.WriteAttributeString("algn", "in");
				}
				m_writer.WriteAttributeString("cap", GetLineCapStyle(childGroupShape.LineFormat.LineCap, is2007: false));
				m_writer.WriteAttributeString("cmpd", GetLineStyle(childGroupShape.LineFormat.Style, is2007: false));
				float num4 = (float)Math.Round(childGroupShape.LineFormat.Weight * 12700f);
				m_writer.WriteAttributeString("w", num4.ToString(CultureInfo.InvariantCulture));
				if (childGroupShape.LineFormat.HasKey(12))
				{
					if (childGroupShape.LineFormat.Line)
					{
						if (childGroupShape.LineFormat.LineFormatType == LineFormatType.Gradient)
						{
							SerializeGradientFill(childGroupShape.LineFormat.GradientFill);
						}
						else if (childGroupShape.LineFormat.LineFormatType == LineFormatType.Patterned)
						{
							SerializePatternFill(childGroupShape.LineFormat);
						}
						else if (!childGroupShape.LineFormat.Color.IsEmpty)
						{
							SerializeSolidFill(childGroupShape.LineFormat.Color, childGroupShape.LineFormat.Transparency);
						}
					}
					else
					{
						m_writer.WriteStartElement("noFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
						m_writer.WriteEndElement();
					}
				}
				m_writer.WriteEndElement();
			}
			if (childGroupShape.EffectList.Count > 0)
			{
				bool flag = true;
				for (int i = 0; i < childGroupShape.EffectList.Count; i++)
				{
					if (childGroupShape.EffectList[i] != null)
					{
						if (flag && childGroupShape.EffectList[i].IsEffectListItem)
						{
							SerializeEffectList(childGroupShape.EffectList);
							flag = false;
						}
						if (childGroupShape.EffectList[i].IsSceneProperties && childGroupShape.IsScenePropertiesInline)
						{
							SerializeThreeDSceneEffects(childGroupShape.EffectList[i].ThreeDFormat);
						}
						if (childGroupShape.EffectList[i].IsShapeProperties && childGroupShape.IsShapePropertiesInline)
						{
							SerializeThreeDShapeEffects(childGroupShape.EffectList[i].ThreeDFormat);
						}
					}
				}
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializeShape(ShapeCommon shapeBase, ParagraphItem item)
	{
		m_writer.WriteAttributeString("uri", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		m_writer.WriteStartElement("wps", "wsp", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		if (shapeBase is Shape && (shapeBase as Shape).TextFrame.TextDirection == TextDirection.HorizontalFarEast)
		{
			m_writer.WriteAttributeString("normalEastAsianFlow", "1");
		}
		m_writer.WriteStartElement("wps", "cNvSpPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("wps", "spPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		m_writer.WriteStartElement("a", "xfrm", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (shapeBase is Shape)
		{
			if ((shapeBase as Shape).FlipHorizontal)
			{
				m_writer.WriteAttributeString("flipH", "1");
			}
			if ((shapeBase as Shape).FlipVertical)
			{
				m_writer.WriteAttributeString("flipV", "1");
			}
			if ((shapeBase as Shape).Rotation != 0f)
			{
				long num = (long)(GetRotationAngle((shapeBase as Shape).Rotation) * 60000f);
				m_writer.WriteAttributeString("rot", num.ToString());
			}
		}
		else if (shapeBase is GroupShape)
		{
			if ((shapeBase as GroupShape).FlipHorizontal)
			{
				m_writer.WriteAttributeString("flipH", "1");
			}
			if ((shapeBase as GroupShape).FlipVertical)
			{
				m_writer.WriteAttributeString("flipV", "1");
			}
			if ((shapeBase as GroupShape).Rotation != 0f)
			{
				long num2 = (long)(GetRotationAngle((shapeBase as GroupShape).Rotation) * 60000f);
				m_writer.WriteAttributeString("rot", num2.ToString());
			}
		}
		m_writer.WriteStartElement("a", "off", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		int num3 = (int)Math.Round(shapeBase.Width * shapeBase.WidthScale / 100f * 12700f);
		int num4 = (int)Math.Round(shapeBase.Height * shapeBase.HeightScale / 100f * 12700f);
		m_writer.WriteAttributeString("x", "0");
		m_writer.WriteAttributeString("y", "0");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "ext", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("cx", num3.ToString());
		m_writer.WriteAttributeString("cy", num4.ToString());
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		if ((shapeBase as Shape).Path2DList == null)
		{
			m_writer.WriteStartElement("a", "prstGeom", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (shapeBase is Shape)
			{
				AutoShapeType autoShapeType = (shapeBase as Shape).AutoShapeType;
				AutoShapeConstant autoShapeConstant = AutoShapeHelper.GetAutoShapeConstant(autoShapeType);
				string autoShapeString = AutoShapeHelper.GetAutoShapeString(autoShapeConstant);
				m_writer.WriteAttributeString("prst", autoShapeString);
				m_writer.WriteStartElement("a", "avLst", "http://schemas.openxmlformats.org/drawingml/2006/main");
				foreach (KeyValuePair<string, string> item2 in (shapeBase as Shape).ShapeGuide)
				{
					m_writer.WriteStartElement("a", "gd", "http://schemas.openxmlformats.org/drawingml/2006/main");
					m_writer.WriteAttributeString("name", item2.Key);
					m_writer.WriteAttributeString("fmla", item2.Value);
					m_writer.WriteEndElement();
				}
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		else
		{
			SerializeCustomGeometry(shapeBase as Shape);
		}
		if (shapeBase is Shape && (shapeBase as Shape).DocxProps.ContainsKey("grpFill"))
		{
			SerializeDocxStream((shapeBase as Shape).DocxProps, "grpFill");
		}
		if (shapeBase is Shape && (shapeBase as Shape).IsFillStyleInline)
		{
			Shape shape = shapeBase as Shape;
			if (shape.FillFormat.Fill)
			{
				switch (shape.FillFormat.FillType)
				{
				case FillType.FillTextured:
				case FillType.FillPicture:
				{
					Entity baseEntity = GetBaseEntity(shape);
					SerializeBlipFill(shape.FillFormat, baseEntity);
					break;
				}
				case FillType.FillGradient:
					SerializeGradientFill(shape.FillFormat.GradientFill);
					break;
				case FillType.FillPatterned:
					SerializePatternFill(shape.FillFormat);
					break;
				default:
					SerializeSolidFill(shape.FillFormat.Color, shape.FillFormat.Transparency);
					break;
				}
			}
			else
			{
				m_writer.WriteStartElement("noFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteEndElement();
			}
		}
		else if (shapeBase is GroupShape && (shapeBase as GroupShape).IsFillStyleInline)
		{
			GroupShape groupShape = shapeBase as GroupShape;
			if ((shapeBase as GroupShape).FillFormat.Fill)
			{
				switch ((shapeBase as GroupShape).FillFormat.FillType)
				{
				case FillType.FillTextured:
				case FillType.FillPicture:
				{
					Entity baseEntity2 = GetBaseEntity(groupShape);
					SerializeBlipFill(groupShape.FillFormat, baseEntity2);
					break;
				}
				case FillType.FillGradient:
					SerializeGradientFill(groupShape.FillFormat.GradientFill);
					break;
				case FillType.FillPatterned:
					SerializePatternFill(groupShape.FillFormat);
					break;
				default:
					SerializeSolidFill(groupShape.FillFormat.Color, groupShape.FillFormat.Transparency);
					break;
				}
			}
			else
			{
				m_writer.WriteStartElement("noFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteEndElement();
			}
		}
		if (shapeBase is Shape && (shapeBase as Shape).DocxProps.ContainsKey("grpFill"))
		{
			SerializeDocxStream((shapeBase as Shape).DocxProps, "grpFill");
		}
		if (shapeBase is Shape && (shapeBase as Shape).IsLineStyleInline)
		{
			m_writer.WriteStartElement("ln", "http://schemas.openxmlformats.org/drawingml/2006/main");
			if ((shapeBase as Shape).LineFormat.InsetPen)
			{
				m_writer.WriteAttributeString("algn", "in");
			}
			m_writer.WriteAttributeString("cap", GetLineCapStyle((shapeBase as Shape).LineFormat.LineCap, is2007: false));
			m_writer.WriteAttributeString("cmpd", GetLineStyle((shapeBase as Shape).LineFormat.Style, is2007: false));
			float num5 = (float)Math.Round((shapeBase as Shape).LineFormat.Weight * 12700f);
			if (!(shapeBase as Shape).LineFormat.IsInlineLineWeightNull)
			{
				m_writer.WriteAttributeString("w", num5.ToString(CultureInfo.InvariantCulture));
			}
			if ((shapeBase as Shape).LineFormat.HasKey(12))
			{
				if ((shapeBase as Shape).LineFormat.Line)
				{
					if ((shapeBase as Shape).LineFormat.LineFormatType == LineFormatType.Gradient)
					{
						SerializeGradientFill((shapeBase as Shape).LineFormat.GradientFill);
					}
					else if ((shapeBase as Shape).LineFormat.LineFormatType == LineFormatType.Patterned)
					{
						SerializePatternFill((shapeBase as Shape).LineFormat);
					}
					else if (!(shapeBase as Shape).LineFormat.Color.IsEmpty)
					{
						SerializeSolidFill((shapeBase as Shape).LineFormat.Color, (shapeBase as Shape).LineFormat.Transparency);
					}
				}
				else
				{
					m_writer.WriteStartElement("noFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
					m_writer.WriteEndElement();
				}
			}
			if ((shapeBase as Shape).LineFormat.DocxProps.ContainsKey("custDash"))
			{
				SerializeDocxStream((shapeBase as Shape).LineFormat.DocxProps, "custDash");
			}
			else
			{
				m_writer.WriteStartElement("prstDash", "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetDashStyle((shapeBase as Shape).LineFormat.DashStyle, is2007: false));
				m_writer.WriteEndElement();
			}
			if ((shapeBase as Shape).LineFormat.LineJoin == DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineJoin.Miter && !string.IsNullOrEmpty((shapeBase as Shape).LineFormat.MiterJoinLimit))
			{
				m_writer.WriteStartElement(GetLineJoinStyle((shapeBase as Shape).LineFormat.LineJoin), "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("lim", (shapeBase as Shape).LineFormat.MiterJoinLimit);
				m_writer.WriteEndElement();
			}
			else if ((shapeBase as Shape).LineFormat.LineJoin != DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineJoin.Miter)
			{
				m_writer.WriteStartElement(GetLineJoinStyle((shapeBase as Shape).LineFormat.LineJoin), "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteEndElement();
			}
			if (IsConnectorShape((shapeBase as Shape).AutoShapeType))
			{
				SerializeConnectorLineProperties((shapeBase as Shape).LineFormat);
			}
			if ((shapeBase as Shape).LineFormat.DocxProps.ContainsKey("extLst"))
			{
				SerializeDocxStream((shapeBase as Shape).LineFormat.DocxProps, "extLst");
			}
			m_writer.WriteEndElement();
		}
		else if (shapeBase is GroupShape && (shapeBase as GroupShape).IsLineStyleInline)
		{
			m_writer.WriteStartElement("ln", "http://schemas.openxmlformats.org/drawingml/2006/main");
			if ((shapeBase as GroupShape).LineFormat.InsetPen)
			{
				m_writer.WriteAttributeString("algn", "in");
			}
			m_writer.WriteAttributeString("cap", GetLineCapStyle((shapeBase as GroupShape).LineFormat.LineCap, is2007: false));
			m_writer.WriteAttributeString("cmpd", GetLineStyle((shapeBase as GroupShape).LineFormat.Style, is2007: false));
			float num6 = (float)Math.Round((shapeBase as GroupShape).LineFormat.Weight * 12700f);
			m_writer.WriteAttributeString("w", num6.ToString(CultureInfo.InvariantCulture));
			if ((shapeBase as GroupShape).LineFormat.HasKey(12))
			{
				if ((shapeBase as GroupShape).LineFormat.Line)
				{
					if ((shapeBase as GroupShape).LineFormat.LineFormatType == LineFormatType.Gradient)
					{
						SerializeGradientFill((shapeBase as GroupShape).LineFormat.GradientFill);
					}
					else if ((shapeBase as GroupShape).LineFormat.LineFormatType == LineFormatType.Patterned)
					{
						SerializePatternFill((shapeBase as GroupShape).LineFormat);
					}
					else if (!(shapeBase as GroupShape).LineFormat.Color.IsEmpty)
					{
						SerializeSolidFill((shapeBase as GroupShape).LineFormat.Color, (shapeBase as GroupShape).LineFormat.Transparency);
					}
				}
				else
				{
					m_writer.WriteStartElement("noFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
					m_writer.WriteEndElement();
				}
			}
			if ((shapeBase as GroupShape).LineFormat.DocxProps.ContainsKey("custDash"))
			{
				SerializeDocxStream((shapeBase as GroupShape).LineFormat.DocxProps, "custDash");
			}
			else
			{
				m_writer.WriteStartElement("prstDash", "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetDashStyle((shapeBase as GroupShape).LineFormat.DashStyle, is2007: false));
				m_writer.WriteEndElement();
			}
			if ((shapeBase as GroupShape).LineFormat.LineJoin == DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineJoin.Miter && !string.IsNullOrEmpty((shapeBase as GroupShape).LineFormat.MiterJoinLimit))
			{
				m_writer.WriteStartElement(GetLineJoinStyle((shapeBase as GroupShape).LineFormat.LineJoin), "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("lim", (shapeBase as GroupShape).LineFormat.MiterJoinLimit);
				m_writer.WriteEndElement();
			}
			else if ((shapeBase as GroupShape).LineFormat.LineJoin != DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineJoin.Miter)
			{
				m_writer.WriteStartElement(GetLineJoinStyle((shapeBase as GroupShape).LineFormat.LineJoin), "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteEndElement();
			}
			if ((shapeBase as GroupShape).LineFormat.DocxProps.ContainsKey("extLst"))
			{
				SerializeDocxStream((shapeBase as GroupShape).LineFormat.DocxProps, "extLst");
			}
			m_writer.WriteEndElement();
		}
		if (shapeBase is Shape && (shapeBase as Shape).EffectList.Count > 0)
		{
			bool flag = true;
			for (int i = 0; i < (shapeBase as Shape).EffectList.Count; i++)
			{
				if ((shapeBase as Shape).EffectList[i] != null)
				{
					if (flag && (shapeBase as Shape).EffectList[i].IsEffectListItem)
					{
						SerializeEffectList((shapeBase as Shape).EffectList);
						flag = false;
					}
					if ((shapeBase as Shape).EffectList[i].IsSceneProperties && (shapeBase as Shape).IsScenePropertiesInline)
					{
						SerializeThreeDSceneEffects((shapeBase as Shape).EffectList[i].ThreeDFormat);
					}
					if ((shapeBase as Shape).EffectList[i].IsShapeProperties && (shapeBase as Shape).IsShapePropertiesInline)
					{
						SerializeThreeDShapeEffects((shapeBase as Shape).EffectList[i].ThreeDFormat);
					}
				}
			}
		}
		else if (shapeBase is GroupShape && (shapeBase as GroupShape).EffectList.Count > 0)
		{
			bool flag2 = true;
			for (int j = 0; j < (shapeBase as GroupShape).EffectList.Count; j++)
			{
				if ((shapeBase as GroupShape).EffectList[j] != null)
				{
					if (flag2 && (shapeBase as GroupShape).EffectList[j].IsEffectListItem)
					{
						SerializeEffectList((shapeBase as GroupShape).EffectList);
						flag2 = false;
					}
					if ((shapeBase as GroupShape).EffectList[j].IsSceneProperties && (shapeBase as GroupShape).IsScenePropertiesInline)
					{
						SerializeThreeDSceneEffects((shapeBase as GroupShape).EffectList[j].ThreeDFormat);
					}
					if ((shapeBase as GroupShape).EffectList[j].IsShapeProperties && (shapeBase as GroupShape).IsShapePropertiesInline)
					{
						SerializeThreeDShapeEffects((shapeBase as GroupShape).EffectList[j].ThreeDFormat);
					}
				}
			}
		}
		if (shapeBase.DocxProps.ContainsKey("extLst"))
		{
			SerializeDocxStream(shapeBase.DocxProps, "extLst");
		}
		m_writer.WriteEndElement();
		if (shapeBase is Shape && (shapeBase as Shape).ShapeStyleReferences != null && (shapeBase as Shape).ShapeStyleReferences.Count > 0)
		{
			SerializeAutoShapeStyles(shapeBase as Shape);
		}
		else if (shapeBase is GroupShape && (shapeBase as GroupShape).ShapeStyleReferences != null && (shapeBase as GroupShape).ShapeStyleReferences.Count > 0)
		{
			SerializeAutoShapeStyles(shapeBase as GroupShape);
		}
		WTextBody wTextBody = ((item is WTextBox) ? (item as WTextBox).TextBoxBody : (item as Shape).TextBody);
		if (wTextBody.Items.Count > 0)
		{
			SerializeTextBoxContent(wTextBody);
		}
		SerializeBodyProperties(shapeBase as Shape);
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeCustomGeometry(ShapeCommon shapeCommon)
	{
		m_writer.WriteStartElement("a", "custGeom", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("a", "avLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeAVList(shapeCommon);
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "gdLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeGuideList(shapeCommon);
		m_writer.WriteEndElement();
		if (shapeCommon.DocxProps != null && shapeCommon.DocxProps.Count != 0)
		{
			if (shapeCommon.DocxProps.ContainsKey("ahLst"))
			{
				SerializeDocxStream(shapeCommon.DocxProps, "ahLst");
			}
			if (shapeCommon.DocxProps.ContainsKey("cxnLst"))
			{
				SerializeDocxStream(shapeCommon.DocxProps, "cxnLst");
			}
			if (shapeCommon.DocxProps.ContainsKey("rect"))
			{
				SerializeDocxStream(shapeCommon.DocxProps, "rect");
			}
		}
		m_writer.WriteStartElement("a", "pathLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		foreach (Path2D item in (shapeCommon is Shape) ? (shapeCommon as Shape).Path2DList : (shapeCommon as ChildShape).Path2DList)
		{
			m_writer.WriteStartElement("a", "path", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("w", item.Width.ToString(CultureInfo.InvariantCulture));
			m_writer.WriteAttributeString("h", item.Height.ToString(CultureInfo.InvariantCulture));
			SerializePathElements(item.PathElements);
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializePathElements(List<string> pathElements)
	{
		for (int i = 0; i < pathElements.Count; i++)
		{
			switch (int.Parse(pathElements[i]))
			{
			case 1:
				m_writer.WriteStartElement("a", "close", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteEndElement();
				i++;
				break;
			case 6:
				m_writer.WriteStartElement("a", "cubicBezTo", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				SerializePoint(pathElements, i + 2);
				SerializePoint(pathElements, i + 4);
				SerializePoint(pathElements, i + 6);
				m_writer.WriteEndElement();
				i += 7;
				break;
			case 3:
				m_writer.WriteStartElement("a", "lnTo", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				SerializePoint(pathElements, i + 2);
				m_writer.WriteEndElement();
				i += 3;
				break;
			case 2:
				m_writer.WriteStartElement("a", "moveTo", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				SerializePoint(pathElements, i + 2);
				m_writer.WriteEndElement();
				i += 3;
				break;
			case 4:
				m_writer.WriteStartElement("a", "arcTo", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				i += 2;
				m_writer.WriteAttributeString("wR", pathElements[i]);
				m_writer.WriteAttributeString("hR", pathElements[i + 1]);
				m_writer.WriteAttributeString("stAng", pathElements[i + 2]);
				m_writer.WriteAttributeString("swAng", pathElements[i + 3]);
				m_writer.WriteEndElement();
				i += 3;
				break;
			case 5:
				m_writer.WriteStartElement("a", "quadBezTo", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				SerializePoint(pathElements, i + 2);
				SerializePoint(pathElements, i + 4);
				SerializePoint(pathElements, i + 6);
				m_writer.WriteEndElement();
				i += 5;
				break;
			}
		}
	}

	private void SerializeAVList(ShapeCommon shapeCommon)
	{
		foreach (KeyValuePair<string, string> item in (shapeCommon is Shape) ? (shapeCommon as Shape).GetAvList() : (shapeCommon as ChildShape).GetAvList())
		{
			m_writer.WriteStartElement("a", "gd", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("name", item.Key);
			m_writer.WriteAttributeString("fmla", item.Value);
			m_writer.WriteEndElement();
		}
	}

	private void SerializeGuideList(ShapeCommon shapeCommon)
	{
		foreach (KeyValuePair<string, string> item in (shapeCommon is Shape) ? (shapeCommon as Shape).GetGuideList() : (shapeCommon as ChildShape).GetGuideList())
		{
			m_writer.WriteStartElement("a", "gd", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("name", item.Key);
			m_writer.WriteAttributeString("fmla", item.Value);
			m_writer.WriteEndElement();
		}
	}

	private void SerializePoint(List<string> pathElements, int k)
	{
		m_writer.WriteStartElement("a", "pt", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("x", pathElements[k]);
		m_writer.WriteAttributeString("y", pathElements[k + 1]);
		m_writer.WriteEndElement();
	}

	private void SerializeShape(ChildShape shape, ParagraphItem item)
	{
		m_writer.WriteStartElement("wps", "wsp", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		if (shape.TextFrame.TextDirection == TextDirection.HorizontalFarEast)
		{
			m_writer.WriteAttributeString("normalEastAsianFlow", "1");
		}
		m_writer.WriteStartElement("wps", "cNvPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		shape.ShapeID = GetNextShapeID();
		m_writer.WriteAttributeString("id", shape.ShapeID.ToString());
		string empty = string.Empty;
		empty = ((shape.Name == null || shape.Name.Length <= 0) ? (shape.AutoShapeType.ToString() + " " + shape.ShapeID) : shape.Name);
		m_writer.WriteAttributeString("name", empty);
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("wps", "cNvCnPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("wps", "spPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		m_writer.WriteStartElement("a", "xfrm", "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (shape.FlipHorizantal)
		{
			m_writer.WriteAttributeString("flipH", "1");
		}
		if (shape.FlipVertical)
		{
			m_writer.WriteAttributeString("flipV", "1");
		}
		if (shape.Rotation != 0f)
		{
			long num = (long)(GetRotationAngle(shape.Rotation) * 60000f);
			m_writer.WriteAttributeString("rot", num.ToString());
		}
		int num2 = (int)Math.Round(shape.Width * shape.WidthScale / 100f * 12700f);
		int num3 = (int)Math.Round(shape.Height * shape.HeightScale / 100f * 12700f);
		m_writer.WriteStartElement("a", "off", "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("x", ((int)Math.Round(shape.X * 12700f)).ToString());
		m_writer.WriteAttributeString("y", ((int)Math.Round(shape.Y * 12700f)).ToString());
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "ext", "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("cx", num2.ToString());
		m_writer.WriteAttributeString("cy", num3.ToString());
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		if (shape.Path2DList == null)
		{
			m_writer.WriteStartElement("a", "prstGeom", "http://schemas.openxmlformats.org/drawingml/2006/main");
			AutoShapeType autoShapeType = shape.AutoShapeType;
			AutoShapeConstant autoShapeConstant = AutoShapeHelper.GetAutoShapeConstant(autoShapeType);
			string autoShapeString = AutoShapeHelper.GetAutoShapeString(autoShapeConstant);
			m_writer.WriteAttributeString("prst", autoShapeString);
			m_writer.WriteStartElement("a", "avLst", "http://schemas.openxmlformats.org/drawingml/2006/main");
			foreach (KeyValuePair<string, string> item2 in shape.ShapeGuide)
			{
				m_writer.WriteStartElement("a", "gd", "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("name", item2.Key);
				m_writer.WriteAttributeString("fmla", item2.Value);
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		else
		{
			SerializeCustomGeometry(shape);
		}
		if (shape.DocxProps.ContainsKey("grpFill"))
		{
			SerializeDocxStream(shape.DocxProps, "grpFill");
		}
		if (shape.IsFillStyleInline)
		{
			if (shape.FillFormat.Fill)
			{
				switch (shape.FillFormat.FillType)
				{
				case FillType.FillTextured:
				case FillType.FillPicture:
				{
					Entity baseEntity = GetBaseEntity(shape);
					SerializeBlipFill(shape.FillFormat, baseEntity);
					break;
				}
				case FillType.FillGradient:
					SerializeGradientFill(shape.FillFormat.GradientFill);
					break;
				case FillType.FillPatterned:
					SerializePatternFill(shape.FillFormat);
					break;
				default:
					SerializeSolidFill(shape.FillFormat.Color, shape.FillFormat.Transparency);
					break;
				}
			}
			else
			{
				m_writer.WriteStartElement("noFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteEndElement();
			}
		}
		if (shape.IsLineStyleInline)
		{
			m_writer.WriteStartElement("ln", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (shape.LineFormat.InsetPen)
			{
				m_writer.WriteAttributeString("algn", "in");
			}
			m_writer.WriteAttributeString("cap", GetLineCapStyle(shape.LineFormat.LineCap, is2007: false));
			m_writer.WriteAttributeString("cmpd", GetLineStyle(shape.LineFormat.Style, is2007: false));
			float num4 = (float)Math.Round(shape.LineFormat.Weight * 12700f);
			m_writer.WriteAttributeString("w", num4.ToString(CultureInfo.InvariantCulture));
			if (shape.LineFormat.HasKey(12) && shape.LineFormat.LineFormatType != LineFormatType.None)
			{
				if (shape.LineFormat.Line)
				{
					if (shape.LineFormat.LineFormatType == LineFormatType.Gradient)
					{
						SerializeGradientFill(shape.LineFormat.GradientFill);
					}
					else if (shape.LineFormat.LineFormatType == LineFormatType.Patterned)
					{
						SerializePatternFill(shape.LineFormat);
					}
					else if (!shape.LineFormat.Color.IsEmpty)
					{
						SerializeSolidFill(shape.LineFormat.Color, shape.LineFormat.Transparency);
					}
				}
				else
				{
					m_writer.WriteStartElement("noFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					m_writer.WriteEndElement();
				}
			}
			else
			{
				m_writer.WriteStartElement("noFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteEndElement();
			}
			if (shape.LineFormat.DocxProps.ContainsKey("custDash"))
			{
				SerializeDocxStream(shape.LineFormat.DocxProps, "custDash");
			}
			else
			{
				m_writer.WriteStartElement("prstDash", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetDashStyle(shape.LineFormat.DashStyle, is2007: false));
				m_writer.WriteEndElement();
			}
			if (shape.LineFormat.LineJoin == DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineJoin.Miter && !string.IsNullOrEmpty(shape.LineFormat.MiterJoinLimit))
			{
				m_writer.WriteStartElement(GetLineJoinStyle(shape.LineFormat.LineJoin));
				m_writer.WriteAttributeString("lim", shape.LineFormat.MiterJoinLimit);
				m_writer.WriteEndElement();
			}
			else if (shape.LineFormat.LineJoin != DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineJoin.Miter)
			{
				m_writer.WriteStartElement(GetLineJoinStyle(shape.LineFormat.LineJoin));
				m_writer.WriteEndElement();
			}
			if (IsConnectorShape(shape.AutoShapeType) || (shape.AutoShapeType == (AutoShapeType)0 && (shape.LineFormat.EndArrowheadStyle != 0 || shape.LineFormat.BeginArrowheadStyle != 0)))
			{
				SerializeConnectorLineProperties(shape.LineFormat);
			}
			if (shape.LineFormat.DocxProps.ContainsKey("extLst"))
			{
				SerializeDocxStream(shape.LineFormat.DocxProps, "extLst");
			}
			m_writer.WriteEndElement();
		}
		if (shape.EffectList.Count > 0)
		{
			bool flag = true;
			for (int i = 0; i < shape.EffectList.Count; i++)
			{
				if (shape.EffectList[i] != null)
				{
					if (flag && shape.EffectList[i].IsEffectListItem)
					{
						SerializeEffectList(shape.EffectList);
						flag = false;
					}
					if (shape.EffectList[i].IsSceneProperties && shape.IsScenePropertiesInline)
					{
						SerializeThreeDSceneEffects(shape.EffectList[i].ThreeDFormat);
					}
					if (shape.EffectList[i].IsShapeProperties && shape.IsShapePropertiesInline)
					{
						SerializeThreeDShapeEffects(shape.EffectList[i].ThreeDFormat);
					}
				}
			}
		}
		if (shape.DocxProps.ContainsKey("extLst"))
		{
			SerializeDocxStream(shape.DocxProps, "extLst");
		}
		m_writer.WriteEndElement();
		if (shape.ShapeStyleReferences != null && shape.ShapeStyleReferences.Count > 0)
		{
			SerializeAutoShapeStyles(shape);
		}
		WTextBody textBody = shape.TextBody;
		if (textBody != null && textBody.Items.Count > 0)
		{
			SerializeTextBoxContent(textBody);
		}
		SerializeBodyProperties(shape);
		m_writer.WriteEndElement();
	}

	private void SerializeEffectList(List<EffectFormat> effectList)
	{
		m_writer.WriteStartElement("a", "effectLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		for (int i = 0; i < effectList.Count; i++)
		{
			if (effectList[i].IsShadowEffect)
			{
				SerializeShadowEffect(effectList[i].ShadowFormat);
			}
			if (effectList[i].IsReflection)
			{
				SerializeReflectionEffect(effectList[i].ReflectionFormat);
			}
			if (effectList[i].IsGlowEffect)
			{
				m_writer.WriteStartElement("a", "glow", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				if (effectList[i].GlowFormat.IsInlineRadius)
				{
					int num = (int)Math.Round(effectList[i].GlowFormat.Radius * 12700f);
					m_writer.WriteAttributeString("rad", num.ToString());
				}
				if (effectList[i].GlowFormat.IsInlineColor)
				{
					m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					m_writer.WriteAttributeString("val", GetRGBCode(effectList[i].GlowFormat.Color));
					if (effectList[i].GlowFormat.IsInlineTransparency)
					{
						m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
						double num2 = Math.Round(effectList[i].GlowFormat.Transparency * 100f * 1000f);
						m_writer.WriteAttributeString("val", num2.ToString(CultureInfo.InvariantCulture));
						m_writer.WriteEndElement();
					}
					m_writer.WriteEndElement();
				}
				m_writer.WriteEndElement();
			}
			if (effectList[i].IsSoftEdge)
			{
				m_writer.WriteStartElement("a", "softEdge", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				if (!effectList[i].NoSoftEdges)
				{
					int num3 = (int)Math.Round(effectList[i].SoftEdgeRadius * 12700f);
					m_writer.WriteAttributeString("rad", num3.ToString());
				}
				m_writer.WriteEndElement();
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializeThreeDSceneEffects(ThreeDFormat threeDFormat)
	{
		m_writer.WriteStartElement("a", "scene3d", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (threeDFormat.HasBackdropEffect)
		{
			SerializeBackdropEffect(threeDFormat);
		}
		if (threeDFormat.HasCameraEffect)
		{
			SerializeCameraEffect(threeDFormat);
		}
		if (threeDFormat.HasLightRigEffect)
		{
			SerializeLightRig(threeDFormat);
		}
		if (threeDFormat.DocxProps.ContainsKey("extLst"))
		{
			SerializeDocxStream(m_document.Themes.DocxProps, "extLst");
		}
		m_writer.WriteEndElement();
	}

	private void SerializeBackdropEffect(ThreeDFormat threeDFormat)
	{
		m_writer.WriteStartElement("a", "backdrop", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (threeDFormat.PropertiesHash.ContainsKey(14) || threeDFormat.PropertiesHash.ContainsKey(15) || threeDFormat.PropertiesHash.ContainsKey(16))
		{
			m_writer.WriteStartElement("a", "anchor", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (threeDFormat.PropertiesHash.ContainsKey(14))
			{
				m_writer.WriteAttributeString("x", ((int)Math.Round(threeDFormat.BackdropAnchorX * 12700f)).ToString(CultureInfo.InvariantCulture));
			}
			if (threeDFormat.PropertiesHash.ContainsKey(15))
			{
				m_writer.WriteAttributeString("y", ((int)Math.Round(threeDFormat.BackdropAnchorY * 12700f)).ToString(CultureInfo.InvariantCulture));
			}
			if (threeDFormat.PropertiesHash.ContainsKey(16))
			{
				m_writer.WriteAttributeString("z", ((int)Math.Round(threeDFormat.BackdropAnchorZ * 12700f)).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
		}
		if (threeDFormat.PropertiesHash.ContainsKey(17) || threeDFormat.PropertiesHash.ContainsKey(18) || threeDFormat.PropertiesHash.ContainsKey(19))
		{
			m_writer.WriteStartElement("a", "norm", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (threeDFormat.PropertiesHash.ContainsKey(17))
			{
				m_writer.WriteAttributeString("dx", ((int)Math.Round(threeDFormat.BackdropNormalX * 12700f)).ToString(CultureInfo.InvariantCulture));
			}
			if (threeDFormat.PropertiesHash.ContainsKey(18))
			{
				m_writer.WriteAttributeString("dy", ((int)Math.Round(threeDFormat.BackdropNormalY * 12700f)).ToString(CultureInfo.InvariantCulture));
			}
			if (threeDFormat.PropertiesHash.ContainsKey(19))
			{
				m_writer.WriteAttributeString("dz", ((int)Math.Round(threeDFormat.BackdropNormalZ * 12700f)).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
		}
		if (threeDFormat.PropertiesHash.ContainsKey(20) || threeDFormat.PropertiesHash.ContainsKey(21) || threeDFormat.PropertiesHash.ContainsKey(22))
		{
			m_writer.WriteStartElement("a", "up", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (threeDFormat.PropertiesHash.ContainsKey(20))
			{
				m_writer.WriteAttributeString("dx", ((int)Math.Round(threeDFormat.BackdropUpX * 12700f)).ToString(CultureInfo.InvariantCulture));
			}
			if (threeDFormat.PropertiesHash.ContainsKey(21))
			{
				m_writer.WriteAttributeString("dy", ((int)Math.Round(threeDFormat.BackdropUpY * 12700f)).ToString(CultureInfo.InvariantCulture));
			}
			if (threeDFormat.PropertiesHash.ContainsKey(22))
			{
				m_writer.WriteAttributeString("dz", ((int)Math.Round(threeDFormat.BackdropUpZ * 12700f)).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeCameraEffect(ThreeDFormat threeDFormat)
	{
		m_writer.WriteStartElement("a", "camera", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (threeDFormat.PropertiesHash.ContainsKey(24))
		{
			string text = char.ToLower(threeDFormat.CameraPresetType.ToString()[0]) + threeDFormat.CameraPresetType.ToString().Substring(1);
			m_writer.WriteAttributeString("prst", text.ToString());
		}
		if (threeDFormat.PropertiesHash.ContainsKey(23))
		{
			m_writer.WriteAttributeString("fov", ((int)Math.Round(threeDFormat.FieldOfView * 12700f)).ToString(CultureInfo.InvariantCulture));
		}
		if (threeDFormat.PropertiesHash.ContainsKey(25))
		{
			m_writer.WriteAttributeString("zoom", ((int)Math.Round(threeDFormat.Zoom)).ToString(CultureInfo.InvariantCulture));
		}
		if (threeDFormat.PropertiesHash.ContainsKey(26) || threeDFormat.PropertiesHash.ContainsKey(27) || threeDFormat.PropertiesHash.ContainsKey(28))
		{
			m_writer.WriteStartElement("a", "rot", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (threeDFormat.PropertiesHash.ContainsKey(26))
			{
				_ = threeDFormat.CameraRotationX;
				m_writer.WriteAttributeString("lat", ((int)(threeDFormat.CameraRotationX * 60000f)).ToString(CultureInfo.InvariantCulture));
			}
			if (threeDFormat.PropertiesHash.ContainsKey(27))
			{
				m_writer.WriteAttributeString("lon", ((int)(threeDFormat.CameraRotationY * 60000f)).ToString(CultureInfo.InvariantCulture));
			}
			if (threeDFormat.PropertiesHash.ContainsKey(28))
			{
				m_writer.WriteAttributeString("rev", ((int)(threeDFormat.CameraRotationZ * 60000f)).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeLightRig(ThreeDFormat threeDFormat)
	{
		m_writer.WriteStartElement("a", "lightRig", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (threeDFormat.PropertiesHash.ContainsKey(29))
		{
			string text = char.ToLower(threeDFormat.LightRigType.ToString()[0]) + threeDFormat.LightRigType.ToString().Substring(1);
			m_writer.WriteAttributeString("rig", text.ToString());
		}
		if (threeDFormat.PropertiesHash.ContainsKey(30))
		{
			m_writer.WriteAttributeString("dir", threeDFormat.LightRigDirection.ToString().ToLower());
		}
		if (threeDFormat.PropertiesHash.ContainsKey(31) || threeDFormat.PropertiesHash.ContainsKey(32) || threeDFormat.PropertiesHash.ContainsKey(33))
		{
			m_writer.WriteStartElement("a", "rot", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (threeDFormat.PropertiesHash.ContainsKey(31))
			{
				m_writer.WriteAttributeString("lat", ((int)(threeDFormat.LightRigRotationX * 60000f)).ToString(CultureInfo.InvariantCulture));
			}
			if (threeDFormat.PropertiesHash.ContainsKey(32))
			{
				m_writer.WriteAttributeString("lon", ((int)(threeDFormat.LightRigRotationY * 60000f)).ToString(CultureInfo.InvariantCulture));
			}
			if (threeDFormat.PropertiesHash.ContainsKey(33))
			{
				m_writer.WriteAttributeString("rev", ((int)(threeDFormat.LightRigRotationZ * 60000f)).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeThreeDShapeEffects(ThreeDFormat threeDFormat)
	{
		m_writer.WriteStartElement("a", "sp3d", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (threeDFormat.PropertiesHash.ContainsKey(1))
		{
			m_writer.WriteAttributeString("extrusionH", ((int)Math.Round(threeDFormat.ExtrusionHeight * 12700f)).ToString());
		}
		if (threeDFormat.PropertiesHash.ContainsKey(0))
		{
			m_writer.WriteAttributeString("contourW", ((int)Math.Round(threeDFormat.ContourWidth * 12700f)).ToString());
		}
		if (threeDFormat.PropertiesHash.ContainsKey(3))
		{
			m_writer.WriteAttributeString("z", ((int)Math.Round(threeDFormat.DistanceFromGround * 12700f)).ToString());
		}
		if (threeDFormat.PropertiesHash.ContainsKey(2))
		{
			SerializePresetMaterialType(threeDFormat);
		}
		if (threeDFormat.HasBevelTop)
		{
			m_writer.WriteStartElement("a", "bevelT", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (threeDFormat.PropertiesHash.ContainsKey(7))
			{
				m_writer.WriteAttributeString("h", ((int)Math.Round(threeDFormat.BevelTopHeight * 12700f)).ToString());
			}
			if (threeDFormat.PropertiesHash.ContainsKey(8))
			{
				m_writer.WriteAttributeString("w", ((int)Math.Round(threeDFormat.BevelTopWidth * 12700f)).ToString());
			}
			if (threeDFormat.PropertiesHash.ContainsKey(9))
			{
				string text = char.ToLower(threeDFormat.BevelTPresetType.ToString()[0]) + threeDFormat.BevelTPresetType.ToString().Substring(1);
				m_writer.WriteAttributeString("prst", text.ToString());
			}
			m_writer.WriteEndElement();
		}
		if (threeDFormat.HasBevelBottom)
		{
			m_writer.WriteStartElement("a", "bevelB", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (threeDFormat.PropertiesHash.ContainsKey(4))
			{
				m_writer.WriteAttributeString("h", ((int)Math.Round(threeDFormat.BevelBottomHeight * 12700f)).ToString());
			}
			if (threeDFormat.PropertiesHash.ContainsKey(5))
			{
				m_writer.WriteAttributeString("w", ((int)Math.Round(threeDFormat.BevelBottomWidth * 12700f)).ToString());
			}
			if (threeDFormat.PropertiesHash.ContainsKey(6))
			{
				string text2 = char.ToLower(threeDFormat.BevelBPresetType.ToString()[0]) + threeDFormat.BevelBPresetType.ToString().Substring(1);
				m_writer.WriteAttributeString("prst", text2.ToString());
			}
			m_writer.WriteEndElement();
		}
		if (threeDFormat.HasContourColor)
		{
			m_writer.WriteStartElement("a", "contourClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (threeDFormat.PropertiesHash.ContainsKey(10))
			{
				m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(threeDFormat.ContourColor));
				if (threeDFormat.PropertiesHash.ContainsKey(11))
				{
					m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					double num = Math.Round(threeDFormat.ContourOpacity * 100f * 1000f);
					m_writer.WriteAttributeString("val", num.ToString(CultureInfo.InvariantCulture));
					m_writer.WriteEndElement();
				}
				m_writer.WriteEndElement();
			}
			if (threeDFormat.DocxProps.ContainsKey("extLst"))
			{
				SerializeDocxStream(m_document.Themes.DocxProps, "extLst");
			}
			m_writer.WriteEndElement();
		}
		if (threeDFormat.HasExtrusionColor)
		{
			m_writer.WriteStartElement("a", "extrusionClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (threeDFormat.PropertiesHash.ContainsKey(12))
			{
				m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(threeDFormat.ExtrusionColor));
				if (threeDFormat.PropertiesHash.ContainsKey(13))
				{
					m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					double num2 = Math.Round(threeDFormat.ExtrusionOpacity * 100f * 1000f);
					m_writer.WriteAttributeString("val", num2.ToString(CultureInfo.InvariantCulture));
					m_writer.WriteEndElement();
				}
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializePresetMaterialType(ThreeDFormat threeDFormat)
	{
		string text = char.ToLower(threeDFormat.PresetMaterialType.ToString()[0]) + threeDFormat.PresetMaterialType.ToString().Substring(1);
		if (text == "darkEdge")
		{
			text = "dkEdge";
		}
		else if (text == "softMetal")
		{
			text = "softmetal";
		}
		m_writer.WriteAttributeString("prstMaterial", text.ToString());
	}

	private void SerializeReflectionEffect(Reflection reflection)
	{
		m_writer.WriteStartElement("reflection", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (reflection.HasKey(0))
		{
			m_writer.WriteAttributeString("blurRad", GetEmuFromPoint(reflection.Blur));
		}
		if (reflection.HasKey(1))
		{
			m_writer.WriteAttributeString("dir", (reflection.Direction * 60000).ToString());
		}
		if (reflection.HasKey(2))
		{
			m_writer.WriteAttributeString("dist", GetEmuFromPoint(reflection.Offset));
		}
		if (reflection.HasKey(3))
		{
			m_writer.WriteAttributeString("stA", ((100f - reflection.Transparency) * 1000f).ToString());
		}
		if (reflection.HasKey(4))
		{
			m_writer.WriteAttributeString("stPos", (reflection.StartPosition * 1000f).ToString());
		}
		if (reflection.HasKey(5))
		{
			m_writer.WriteAttributeString("endA", (reflection.EndOpacity * 1000f).ToString());
		}
		if (reflection.HasKey(6))
		{
			m_writer.WriteAttributeString("endPos", (reflection.Size * 1000f).ToString());
		}
		if (reflection.HasKey(7))
		{
			m_writer.WriteAttributeString("fadeDir", (reflection.FadeDirection * 60000).ToString());
		}
		if (reflection.HasKey(8))
		{
			m_writer.WriteAttributeString("kx", (reflection.HorizontalSkew * 60000).ToString());
		}
		if (reflection.HasKey(9))
		{
			m_writer.WriteAttributeString("ky", (reflection.VerticalSkew * 60000).ToString());
		}
		if (reflection.HasKey(10))
		{
			m_writer.WriteAttributeString("sx", (reflection.HorizontalRatio * 100000f).ToString());
		}
		if (reflection.HasKey(11))
		{
			m_writer.WriteAttributeString("sy", (reflection.VerticalRatio * 100000f).ToString());
		}
		if (reflection.HasKey(12))
		{
			m_writer.WriteAttributeString("rotWithShape", (reflection.RotateWithShape ? 1 : 0).ToString());
		}
		if (reflection.HasKey(13))
		{
			m_writer.WriteAttributeString("algn", GetBlipAlignment(reflection.Alignment));
		}
		m_writer.WriteEndElement();
	}

	private void SerializeShadowEffect(ShadowFormat shadowFormat)
	{
		m_writer.WriteStartElement("a", shadowFormat.m_type, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (shadowFormat.HasKey(14))
		{
			int num = (int)Math.Round(shadowFormat.Blur * 12700.0);
			m_writer.WriteAttributeString("blurRad", num.ToString());
		}
		if (shadowFormat.HasKey(13))
		{
			int num2 = (int)Math.Round(shadowFormat.Distance * 12700.0);
			m_writer.WriteAttributeString("dist", num2.ToString());
		}
		if (shadowFormat.HasKey(15))
		{
			m_writer.WriteAttributeString("algn", shadowFormat.Alignment.ToString());
		}
		if (shadowFormat.HasKey(12))
		{
			m_writer.WriteAttributeString("dir", (shadowFormat.Direction * 60000.0).ToString(CultureInfo.InvariantCulture));
		}
		if (shadowFormat.HasKey(7))
		{
			m_writer.WriteAttributeString("kx", (shadowFormat.HorizontalSkewAngle * 60000).ToString(CultureInfo.InvariantCulture));
		}
		if (shadowFormat.HasKey(8))
		{
			m_writer.WriteAttributeString("ky", (shadowFormat.VerticalSkewAngle * 60000).ToString(CultureInfo.InvariantCulture));
		}
		if (shadowFormat.HasKey(9))
		{
			m_writer.WriteAttributeString("sx", (shadowFormat.HorizontalScalingFactor * 1000.0).ToString(CultureInfo.InvariantCulture));
		}
		if (shadowFormat.HasKey(10))
		{
			m_writer.WriteAttributeString("sy", (shadowFormat.VerticalScalingFactor * 1000.0).ToString(CultureInfo.InvariantCulture));
		}
		if (shadowFormat.HasKey(11))
		{
			m_writer.WriteAttributeString("rotWithShape", shadowFormat.RotateWithShape ? "1" : "0");
		}
		if (shadowFormat.HasKey(16))
		{
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", GetRGBCode(shadowFormat.Color));
			if (shadowFormat.HasKey(21))
			{
				m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				double num3 = Math.Round(shadowFormat.Transparency * 100f * 1000f);
				m_writer.WriteAttributeString("val", num3.ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeConnectorLineProperties(LineFormat lineFormat)
	{
		m_writer.WriteStartElement("headEnd", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("type", GetLineEnd(lineFormat.BeginArrowheadStyle, is2007: false));
		m_writer.WriteAttributeString("w", GetLineEndWidth(lineFormat.BeginArrowheadWidth, is2007: false));
		m_writer.WriteAttributeString("len", GetLineEndLength(lineFormat.BeginArrowheadLength, is2007: false));
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("tailEnd", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("type", GetLineEnd(lineFormat.EndArrowheadStyle, is2007: false));
		m_writer.WriteAttributeString("w", GetLineEndWidth(lineFormat.EndArrowheadWidth, is2007: false));
		m_writer.WriteAttributeString("len", GetLineEndLength(lineFormat.EndArrowheadLength, is2007: false));
		m_writer.WriteEndElement();
	}

	private void SerializePatternFill(LineFormat lineFormat)
	{
		m_writer.WriteStartElement("pattFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("prst", GetPatternFillType(lineFormat.Pattern));
		m_writer.WriteStartElement("fgClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("val", GetRGBCode(lineFormat.ForeColor));
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("bgClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("val", GetRGBCode(lineFormat.Color));
		uint num = (uint)Math.Round((1f - lineFormat.Transparency / 100f) * 100f);
		num *= 1000;
		m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("val", num.ToString(CultureInfo.InvariantCulture));
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private bool IsConnectorShape(AutoShapeType autoShapeType)
	{
		if (autoShapeType == AutoShapeType.Line || (uint)(autoShapeType - 227) <= 8u)
		{
			return true;
		}
		return false;
	}

	private void SerializeBlipFill(Shape shape)
	{
		FillFormat fillFormat = shape.FillFormat;
		m_writer.WriteStartElement("blipFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("rotWithShape", fillFormat.RotateWithObject ? "1" : "0");
		m_writer.WriteAttributeString("dpi", "0");
		m_writer.WriteStartElement("blip", "http://schemas.openxmlformats.org/drawingml/2006/main");
		Entity baseEntity = GetBaseEntity(shape);
		string value = string.Empty;
		WPicture wPicture = new WPicture(m_document);
		if (shape.FillFormat.ImageRecord != null && shape.FillFormat.ImageRecord.ImageBytes != null)
		{
			wPicture.LoadImage(shape.FillFormat.ImageRecord.ImageBytes);
		}
		UpdateImages(wPicture);
		if (baseEntity is WSection)
		{
			value = AddImageRelation(DocumentImages, wPicture.ImageRecord, IsNeedToSkipImageRelation(wPicture));
		}
		else if (baseEntity is HeaderFooter)
		{
			value = UpdateHFImageRels(baseEntity as HeaderFooter, wPicture);
		}
		m_writer.WriteAttributeString("embed", "http://schemas.openxmlformats.org/officeDocument/2006/relationships", value);
		if (fillFormat.BlipCompressionMode != 0)
		{
			string value2 = char.ToLower(fillFormat.BlipCompressionMode.ToString()[0]) + fillFormat.BlipCompressionMode.ToString().Substring(1);
			m_writer.WriteAttributeString("cstate", value2);
		}
		if (fillFormat.BlipFormat.Threshold != 0f)
		{
			m_writer.WriteStartElement("alphaBiLevel", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("thresh", (1000f * (100f - fillFormat.BlipFormat.Threshold)).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.InverseColor != Color.Empty)
		{
			m_writer.WriteStartElement("alphaInv", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", GetRGBCode(fillFormat.BlipFormat.InverseColor));
			if (fillFormat.BlipFormat.InverseOpacity != 0f)
			{
				m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
				double num = Math.Round(fillFormat.BlipFormat.InverseOpacity * 100f * 1000f);
				m_writer.WriteAttributeString("val", num.ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.AlphaReplaceAmount > 0f)
		{
			m_writer.WriteStartElement("alphaRepl", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("a", (1000f * (100f - fillFormat.BlipFormat.AlphaReplaceAmount)).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.BilevelThreshold > 0f)
		{
			m_writer.WriteStartElement("biLevel", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("thresh", (1000f * (100f - fillFormat.BlipFormat.BilevelThreshold)).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.BlurRadius > 0f || fillFormat.BlipFormat.Grow)
		{
			m_writer.WriteStartElement("blur", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("grow", fillFormat.BlipFormat.Grow ? "1" : "0");
			m_writer.WriteAttributeString("rad", (1000f * (100f - fillFormat.BlipFormat.BlurRadius)).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.ColorFrom != Color.Empty || fillFormat.BlipFormat.ColorTo != Color.Empty)
		{
			m_writer.WriteStartElement("clrChange", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("useA", fillFormat.BlipFormat.HasAlpha ? "1" : "0");
			if (fillFormat.BlipFormat.ColorFrom != Color.Empty)
			{
				m_writer.WriteStartElement("clrFrom", "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteStartElement("srgbClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(fillFormat.BlipFormat.ColorFrom));
				if (fillFormat.BlipFormat.ColorFromOpacity != 0f)
				{
					m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
					double num2 = Math.Round(fillFormat.BlipFormat.ColorFromOpacity * 100f * 1000f);
					m_writer.WriteAttributeString("val", num2.ToString(CultureInfo.InvariantCulture));
					m_writer.WriteEndElement();
				}
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
			if (fillFormat.BlipFormat.ColorTo != Color.Empty)
			{
				m_writer.WriteStartElement("clrTo", "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteStartElement("srgbClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(fillFormat.BlipFormat.ColorTo));
				if (fillFormat.BlipFormat.ColorToOpacity != 0f)
				{
					m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
					double num3 = Math.Round(fillFormat.BlipFormat.ColorToOpacity * 100f * 1000f);
					m_writer.WriteAttributeString("val", num3.ToString(CultureInfo.InvariantCulture));
					m_writer.WriteEndElement();
				}
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.Hue > 0f || fillFormat.BlipFormat.Saturation > 0f || fillFormat.BlipFormat.Luminance > 0f)
		{
			m_writer.WriteStartElement("hsl", "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (fillFormat.BlipFormat.Hue > 0f)
			{
				m_writer.WriteAttributeString("hue", (1000f * (100f - fillFormat.BlipFormat.Hue)).ToString(CultureInfo.InvariantCulture));
			}
			if (fillFormat.BlipFormat.Saturation > 0f)
			{
				m_writer.WriteAttributeString("sat", (1000f * (100f - fillFormat.BlipFormat.Saturation)).ToString(CultureInfo.InvariantCulture));
			}
			if (fillFormat.BlipFormat.Luminance > 0f)
			{
				m_writer.WriteAttributeString("lum", (1000f * (100f - fillFormat.BlipFormat.Luminance)).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.Brightness > 0f || fillFormat.BlipFormat.Contrast > 0f)
		{
			m_writer.WriteStartElement("lum", "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (fillFormat.BlipFormat.Brightness > 0f)
			{
				m_writer.WriteAttributeString("bright", (1000f * (100f - fillFormat.BlipFormat.Brightness)).ToString(CultureInfo.InvariantCulture));
			}
			if (fillFormat.BlipFormat.Contrast > 0f)
			{
				m_writer.WriteAttributeString("contrast", (1000f * (100f - fillFormat.BlipFormat.Contrast)).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.TintAmount > 0f || fillFormat.BlipFormat.TintHue > 0f)
		{
			m_writer.WriteStartElement("tint", "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (fillFormat.BlipFormat.TintAmount > 0f)
			{
				m_writer.WriteAttributeString("amt", (1000f * (100f - fillFormat.BlipFormat.TintAmount)).ToString(CultureInfo.InvariantCulture));
			}
			if (fillFormat.BlipFormat.TintHue > 0f)
			{
				m_writer.WriteAttributeString("hue", (1000f * (100f - fillFormat.BlipFormat.TintHue)).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.DuotoneColor != Color.Empty)
		{
			m_writer.WriteStartElement("duotone", "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (!fillFormat.BlipFormat.IsPresetColorAtFirst)
			{
				m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(fillFormat.BlipFormat.DuotoneColor));
				m_writer.WriteEndElement();
				if (fillFormat.BlipFormat.DuotonePresetColor != Color.Empty)
				{
					m_writer.WriteStartElement("prstClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					string value3 = char.ToLower(fillFormat.BlipFormat.DuotonePresetColor.Name.ToString()[0]) + fillFormat.BlipFormat.DuotonePresetColor.Name.ToString().Substring(1);
					m_writer.WriteAttributeString("val", value3);
					m_writer.WriteEndElement();
				}
				else
				{
					m_writer.WriteStartElement("prstClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					m_writer.WriteAttributeString("val", "black");
					m_writer.WriteEndElement();
				}
			}
			else
			{
				if (fillFormat.BlipFormat.DuotonePresetColor != Color.Empty)
				{
					m_writer.WriteStartElement("prstClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					string value4 = char.ToLower(fillFormat.BlipFormat.DuotonePresetColor.Name.ToString()[0]) + fillFormat.BlipFormat.DuotonePresetColor.Name.ToString().Substring(1);
					m_writer.WriteAttributeString("val", value4);
					m_writer.WriteEndElement();
				}
				else
				{
					m_writer.WriteStartElement("prstClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					m_writer.WriteAttributeString("val", "black");
					m_writer.WriteEndElement();
				}
				m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(fillFormat.BlipFormat.DuotoneColor));
				m_writer.WriteEndElement();
			}
			if (fillFormat.BlipFormat.DuotoneOpacity != 0f)
			{
				m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
				double num4 = Math.Round(fillFormat.BlipFormat.DuotoneOpacity * 100f * 1000f);
				m_writer.WriteAttributeString("val", num4.ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			else if (fillFormat.BlipFormat.Transparency != 0f)
			{
				m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
				double num5 = Math.Round((100f - fillFormat.BlipFormat.Transparency) * 1000f);
				m_writer.WriteAttributeString("val", num5.ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.DocxProps.ContainsKey("alphaCeiling"))
		{
			SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "alphaCeiling");
		}
		if (fillFormat.BlipFormat.DocxProps.ContainsKey("alphaFloor"))
		{
			SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "alphaFloor");
		}
		if (fillFormat.BlipFormat.DocxProps.ContainsKey("grayScl"))
		{
			SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "grayScl");
		}
		if (fillFormat.BlipFormat.DocxProps.ContainsKey("fillOverlay"))
		{
			SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "fillOverlay");
		}
		if (fillFormat.BlipFormat.DocxProps.ContainsKey("alphaMod"))
		{
			SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "alphaMod");
		}
		if (fillFormat.BlipFormat.Transparency != 0f)
		{
			m_writer.WriteStartElement("alphaModFix", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("amt", (1000f * (100f - fillFormat.BlipFormat.Transparency)).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.ExtensionURI.Count > 0)
		{
			SerializeBlipExtensions(shape);
		}
		m_writer.WriteEndElement();
		if (fillFormat.SourceRectangle != null && (fillFormat.SourceRectangle.BottomOffset != 0f || fillFormat.SourceRectangle.LeftOffset != 0f || fillFormat.SourceRectangle.RightOffset != 0f || fillFormat.SourceRectangle.TopOffset != 0f))
		{
			m_writer.WriteStartElement("srcRect", "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (fillFormat.SourceRectangle != null)
			{
				SerializeTileRectange(fillFormat.SourceRectangle);
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeBlipExtensions(FillFormat fillFormat, Entity baseEntity)
	{
		m_writer.WriteStartElement("extLst", "http://schemas.openxmlformats.org/drawingml/2006/main");
		for (int i = 0; i < fillFormat.BlipFormat.ExtensionURI.Count; i += 2)
		{
			m_writer.WriteStartElement("ext", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("uri", fillFormat.BlipFormat.ExtensionURI[i].ToString());
			if (fillFormat.BlipFormat.ExtensionURI[i + 1] == "imgProps")
			{
				SerializeImageProperties(fillFormat, baseEntity);
			}
			else
			{
				m_writer.WriteStartElement("a14", "useLocalDpi", "http://schemas.microsoft.com/office/drawing/2010/main");
				m_writer.WriteAttributeString("val", fillFormat.BlipFormat.HasCompression ? "1" : "0");
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeBlipFill(FillFormat fillFormat, Entity baseEntity, WPicture picture, ChildShape childShape)
	{
		BlipFormat blipFormat = fillFormat.BlipFormat;
		bool num = picture == null;
		if (num && childShape == null)
		{
			m_writer.WriteStartElement("blipFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("rotWithShape", fillFormat.RotateWithObject ? "1" : "0");
			m_writer.WriteAttributeString("dpi", "0");
			m_writer.WriteStartElement("blip", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			string value = string.Empty;
			WPicture wPicture = new WPicture(m_document);
			if (fillFormat.ImageRecord != null && fillFormat.ImageRecord.ImageBytes != null)
			{
				wPicture.LoadImage(fillFormat.ImageRecord.ImageBytes);
			}
			UpdateImages(wPicture);
			if (baseEntity is WSection)
			{
				value = AddImageRelation(DocumentImages, wPicture.ImageRecord, IsNeedToSkipImageRelation(wPicture));
			}
			else if (baseEntity is HeaderFooter)
			{
				value = UpdateHFImageRels(baseEntity as HeaderFooter, wPicture);
			}
			m_writer.WriteAttributeString("embed", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", value);
		}
		if (fillFormat.BlipCompressionMode != 0)
		{
			string value2 = char.ToLower(fillFormat.BlipCompressionMode.ToString()[0]) + fillFormat.BlipCompressionMode.ToString().Substring(1);
			m_writer.WriteAttributeString("cstate", value2);
		}
		if (blipFormat.Threshold != 0f)
		{
			m_writer.WriteStartElement("alphaBiLevel", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("thresh", (1000f * (100f - blipFormat.Threshold)).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		if (blipFormat.InverseColor != Color.Empty)
		{
			m_writer.WriteStartElement("alphaInv", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", GetRGBCode(blipFormat.InverseColor));
			if (blipFormat.InverseOpacity != 0f)
			{
				m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				double num2 = Math.Round(blipFormat.InverseOpacity * 100f * 1000f);
				m_writer.WriteAttributeString("val", num2.ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (blipFormat.AlphaReplaceAmount > 0f)
		{
			m_writer.WriteStartElement("alphaRepl", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("a", (1000f * (100f - blipFormat.AlphaReplaceAmount)).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		if (blipFormat.BilevelThreshold > 0f)
		{
			m_writer.WriteStartElement("biLevel", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("thresh", (1000f * (100f - blipFormat.BilevelThreshold)).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		if (blipFormat.BlurRadius > 0f || blipFormat.Grow)
		{
			m_writer.WriteStartElement("blur", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("grow", blipFormat.Grow ? "1" : "0");
			m_writer.WriteAttributeString("rad", (1000f * (100f - blipFormat.BlurRadius)).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		if (blipFormat.ColorFrom != Color.Empty || blipFormat.ColorTo != Color.Empty)
		{
			m_writer.WriteStartElement("clrChange", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (blipFormat.HasKey(1))
			{
				m_writer.WriteAttributeString("useA", blipFormat.HasAlpha ? "1" : "0");
			}
			if (blipFormat.ColorFrom != Color.Empty)
			{
				m_writer.WriteStartElement("clrFrom", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(blipFormat.ColorFrom));
				if (blipFormat.HasKey(5))
				{
					m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					double num3 = Math.Round(blipFormat.ColorFromOpacity * 100f * 1000f);
					m_writer.WriteAttributeString("val", num3.ToString(CultureInfo.InvariantCulture));
					m_writer.WriteEndElement();
				}
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
			if (blipFormat.ColorTo != Color.Empty)
			{
				m_writer.WriteStartElement("clrTo", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(blipFormat.ColorTo));
				if (blipFormat.HasKey(6))
				{
					m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					double num4 = Math.Round(blipFormat.ColorToOpacity * 100f * 1000f);
					m_writer.WriteAttributeString("val", num4.ToString(CultureInfo.InvariantCulture));
					m_writer.WriteEndElement();
				}
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		if (blipFormat.Hue > 0f || blipFormat.Saturation > 0f || blipFormat.Luminance > 0f)
		{
			m_writer.WriteStartElement("hsl", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (blipFormat.Hue > 0f)
			{
				m_writer.WriteAttributeString("hue", (1000f * (100f - blipFormat.Hue)).ToString(CultureInfo.InvariantCulture));
			}
			if (blipFormat.Saturation > 0f)
			{
				m_writer.WriteAttributeString("sat", (1000f * (100f - blipFormat.Saturation)).ToString(CultureInfo.InvariantCulture));
			}
			if (blipFormat.Luminance > 0f)
			{
				m_writer.WriteAttributeString("lum", (1000f * (100f - blipFormat.Luminance)).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
		}
		if (blipFormat.Brightness > 0f || blipFormat.Contrast > 0f)
		{
			m_writer.WriteStartElement("lum", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (blipFormat.Brightness > 0f)
			{
				m_writer.WriteAttributeString("bright", (1000f * (100f - blipFormat.Brightness)).ToString(CultureInfo.InvariantCulture));
			}
			if (blipFormat.Contrast > 0f)
			{
				m_writer.WriteAttributeString("contrast", (1000f * (100f - blipFormat.Contrast)).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
		}
		if (blipFormat.TintAmount > 0f || blipFormat.TintHue > 0f)
		{
			m_writer.WriteStartElement("tint", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (blipFormat.TintAmount > 0f)
			{
				m_writer.WriteAttributeString("amt", (1000f * (100f - blipFormat.TintAmount)).ToString(CultureInfo.InvariantCulture));
			}
			if (blipFormat.TintHue > 0f)
			{
				m_writer.WriteAttributeString("hue", (1000f * (100f - blipFormat.TintHue)).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
		}
		if (blipFormat.DuotoneColor != Color.Empty)
		{
			m_writer.WriteStartElement("duotone", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (!blipFormat.IsPresetColorAtFirst)
			{
				m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(blipFormat.DuotoneColor));
				m_writer.WriteEndElement();
				if (blipFormat.DuotonePresetColor != Color.Empty)
				{
					m_writer.WriteStartElement("prstClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					string value3 = char.ToLower(blipFormat.DuotonePresetColor.Name.ToString()[0]) + blipFormat.DuotonePresetColor.Name.ToString().Substring(1);
					m_writer.WriteAttributeString("val", value3);
					m_writer.WriteEndElement();
				}
				else
				{
					m_writer.WriteStartElement("prstClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					m_writer.WriteAttributeString("val", "black");
					m_writer.WriteEndElement();
				}
			}
			else
			{
				if (blipFormat.DuotonePresetColor != Color.Empty)
				{
					m_writer.WriteStartElement("prstClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					string value4 = char.ToLower(blipFormat.DuotonePresetColor.Name.ToString()[0]) + blipFormat.DuotonePresetColor.Name.ToString().Substring(1);
					m_writer.WriteAttributeString("val", value4);
					m_writer.WriteEndElement();
				}
				else
				{
					m_writer.WriteStartElement("prstClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					m_writer.WriteAttributeString("val", "black");
					m_writer.WriteEndElement();
				}
				m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(blipFormat.DuotoneColor));
				m_writer.WriteEndElement();
			}
			if (blipFormat.DuotoneOpacity != 0f)
			{
				m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				double num5 = Math.Round(blipFormat.DuotoneOpacity * 100f * 1000f);
				m_writer.WriteAttributeString("val", num5.ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			else if (blipFormat.Transparency != 0f)
			{
				m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				double num6 = Math.Round((100f - blipFormat.Transparency) * 1000f);
				m_writer.WriteAttributeString("val", num6.ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		if (blipFormat.BlipTransparency == BlipTransparency.AlphaCeiling)
		{
			m_writer.WriteStartElement("alphaCeiling", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
		}
		else if (blipFormat.BlipTransparency == BlipTransparency.AlphaFloor)
		{
			m_writer.WriteStartElement("alphaFloor", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
		}
		else if (blipFormat.BlipTransparency == BlipTransparency.GrayScale)
		{
			m_writer.WriteStartElement("grayscl", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
		}
		else if (blipFormat.BlipTransparency == BlipTransparency.FillOverlay)
		{
			m_writer.WriteStartElement("fillOverlay", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
		}
		else if (blipFormat.BlipTransparency == BlipTransparency.AlphaMod)
		{
			m_writer.WriteStartElement("alphaMod", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (blipFormat.Transparency != 0f)
		{
			m_writer.WriteStartElement("alphaModFix", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("amt", (1000f * (100f - blipFormat.Transparency)).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		if (blipFormat.ExtensionURI.Count > 0)
		{
			SerializeBlipExtensions(fillFormat, baseEntity, picture, childShape);
		}
		if (!num || childShape != null)
		{
			return;
		}
		m_writer.WriteEndElement();
		if (fillFormat.SourceRectangle != null && (fillFormat.SourceRectangle.BottomOffset != 0f || fillFormat.SourceRectangle.LeftOffset != 0f || fillFormat.SourceRectangle.RightOffset != 0f || fillFormat.SourceRectangle.TopOffset != 0f))
		{
			m_writer.WriteStartElement("srcRect", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (fillFormat.SourceRectangle != null)
			{
				SerializeTileRectange(fillFormat.SourceRectangle);
			}
			m_writer.WriteEndElement();
		}
		if (fillFormat.TextureTile)
		{
			m_writer.WriteStartElement("tile", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("tx", (fillFormat.TextureOffsetX * 12700.0).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteAttributeString("ty", (fillFormat.TextureOffsetY * 12700.0).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteAttributeString("sx", (fillFormat.TextureHorizontalScale * 1000.0).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteAttributeString("sy", (fillFormat.TextureVerticalScale * 1000.0).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteAttributeString("flip", GetFlipOrientation(fillFormat.FlipOrientation));
			m_writer.WriteAttributeString("algn", GetBlipAlignment(fillFormat.TextureAlignment));
			m_writer.WriteEndElement();
		}
		else if (fillFormat.FillRectangle != null && !fillFormat.FillRectangle.HasAttributes)
		{
			m_writer.WriteStartElement("stretch", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("fillRect", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		else if (fillFormat.FillRectangle != null && (fillFormat.FillRectangle.BottomOffset != 0f || fillFormat.FillRectangle.LeftOffset != 0f || fillFormat.FillRectangle.RightOffset != 0f || fillFormat.FillRectangle.TopOffset != 0f))
		{
			m_writer.WriteStartElement("stretch", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("fillRect", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			SerializeTileRectange(fillFormat.FillRectangle);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeBlipExtensions(FillFormat fillFormat, Entity baseEntity, WPicture picture, ChildShape childShape)
	{
		m_writer.WriteStartElement("extLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		for (int i = 0; i < fillFormat.BlipFormat.ExtensionURI.Count; i += 2)
		{
			m_writer.WriteStartElement("ext", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("uri", fillFormat.BlipFormat.ExtensionURI[i].ToString());
			if (i + 1 < fillFormat.BlipFormat.ExtensionURI.Count && fillFormat.BlipFormat.ExtensionURI[i + 1] == "imgProps")
			{
				SerializeImageProperties(fillFormat, baseEntity);
			}
			else if (i + 1 < fillFormat.BlipFormat.ExtensionURI.Count && fillFormat.BlipFormat.ExtensionURI[i + 1] == "svgBlip" && picture != null && picture.SvgData != null)
			{
				m_writer.WriteStartElement("asvg", "svgBlip", "http://schemas.microsoft.com/office/drawing/2016/SVG/main");
				string text = null;
				if (picture.OPictureHRef != null && SvgDataHash.ContainsKey(picture.OPictureHRef))
				{
					text = SvgDataHash[picture.OPictureHRef];
				}
				else
				{
					text = GetNextRelationShipID();
					if (picture.OPictureHRef != null)
					{
						SvgDataHash.Add(picture.OPictureHRef, text);
					}
				}
				if (string.IsNullOrEmpty(picture.SvgExternalLink))
				{
					m_writer.WriteAttributeString("r", "embed", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", text);
					Stream stream = new MemoryStream(picture.SvgData);
					if (baseEntity is HeaderFooter)
					{
						UpdateHFSvgImageRels(text, baseEntity as HeaderFooter, stream);
					}
					else if (!SvgDataCollection.ContainsKey(text))
					{
						SvgDataCollection.Add(text, stream);
					}
				}
				else
				{
					m_writer.WriteAttributeString("link", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", text);
					ExternalLinkImages.Add(text, picture.SvgExternalLink);
				}
				m_writer.WriteEndElement();
			}
			else if (i + 1 < fillFormat.BlipFormat.ExtensionURI.Count && fillFormat.BlipFormat.ExtensionURI[i + 1] == "svgBlip" && childShape != null && childShape.SvgData != null)
			{
				m_writer.WriteStartElement("asvg", "svgBlip", "http://schemas.microsoft.com/office/drawing/2016/SVG/main");
				string text2 = null;
				if (childShape.OPictureHRef != null && SvgDataHash.ContainsKey(childShape.OPictureHRef))
				{
					text2 = SvgDataHash[childShape.OPictureHRef];
				}
				else
				{
					text2 = GetNextRelationShipID();
					if (childShape.OPictureHRef != null)
					{
						SvgDataHash.Add(childShape.OPictureHRef, text2);
					}
				}
				if (string.IsNullOrEmpty(childShape.SvgExternalLink))
				{
					m_writer.WriteAttributeString("r", "embed", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", text2);
					Stream stream2 = new MemoryStream(childShape.SvgData);
					if (baseEntity is HeaderFooter)
					{
						UpdateHFSvgImageRels(text2, baseEntity as HeaderFooter, stream2);
					}
					else if (!SvgDataCollection.ContainsKey(text2))
					{
						SvgDataCollection.Add(text2, stream2);
					}
				}
				else
				{
					m_writer.WriteAttributeString("link", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", text2);
					ExternalLinkImages.Add(text2, childShape.SvgExternalLink);
				}
				m_writer.WriteEndElement();
			}
			else if (i + 1 < fillFormat.BlipFormat.ExtensionURI.Count && fillFormat.BlipFormat.ExtensionURI[i + 1] == "useLocalDpi")
			{
				m_writer.WriteStartElement("a14", "useLocalDpi", "http://schemas.microsoft.com/office/drawing/2010/main");
				m_writer.WriteAttributeString("val", fillFormat.BlipFormat.HasCompression ? "1" : "0");
				m_writer.WriteEndElement();
			}
			else if (i + 1 < fillFormat.BlipFormat.ExtensionURI.Count)
			{
				MemoryStream memoryStream = new MemoryStream(Encoding.UTF8.GetBytes(fillFormat.BlipFormat.ExtensionURI[i + 1]));
				XmlReader xmlReader = CreateReader(memoryStream);
				m_writer.WriteNode(xmlReader, defattr: false);
				memoryStream.Dispose();
				xmlReader.Dispose();
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeBlipFill(FillFormat fillFormat, Entity baseEntity)
	{
		m_writer.WriteStartElement("blipFill", "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("rotWithShape", fillFormat.RotateWithObject ? "1" : "0");
		m_writer.WriteAttributeString("dpi", "0");
		m_writer.WriteStartElement("blip", "http://schemas.openxmlformats.org/drawingml/2006/main");
		string value = string.Empty;
		WPicture wPicture = new WPicture(m_document);
		if (fillFormat.ImageRecord != null && fillFormat.ImageRecord.ImageBytes != null)
		{
			wPicture.LoadImage(fillFormat.ImageRecord.ImageBytes);
		}
		UpdateImages(wPicture);
		if (baseEntity is WSection)
		{
			value = AddImageRelation(DocumentImages, wPicture.ImageRecord, IsNeedToSkipImageRelation(wPicture));
		}
		else if (baseEntity is HeaderFooter)
		{
			value = UpdateHFImageRels(baseEntity as HeaderFooter, wPicture);
		}
		m_writer.WriteAttributeString("embed", "http://schemas.openxmlformats.org/officeDocument/2006/relationships", value);
		if (fillFormat.BlipCompressionMode != 0)
		{
			string value2 = char.ToLower(fillFormat.BlipCompressionMode.ToString()[0]) + fillFormat.BlipCompressionMode.ToString().Substring(1);
			m_writer.WriteAttributeString("cstate", value2);
		}
		if (fillFormat.BlipFormat.Threshold != 0f)
		{
			m_writer.WriteStartElement("alphaBiLevel", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("thresh", (1000f * (100f - fillFormat.BlipFormat.Threshold)).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.InverseColor != Color.Empty)
		{
			m_writer.WriteStartElement("alphaInv", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", GetRGBCode(fillFormat.BlipFormat.InverseColor));
			if (fillFormat.BlipFormat.InverseOpacity != 0f)
			{
				m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
				double num = Math.Round(fillFormat.BlipFormat.InverseOpacity * 100f * 1000f);
				m_writer.WriteAttributeString("val", num.ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.AlphaReplaceAmount > 0f)
		{
			m_writer.WriteStartElement("alphaRepl", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("a", (1000f * (100f - fillFormat.BlipFormat.AlphaReplaceAmount)).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.BilevelThreshold > 0f)
		{
			m_writer.WriteStartElement("biLevel", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("thresh", (1000f * (100f - fillFormat.BlipFormat.BilevelThreshold)).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.BlurRadius > 0f || fillFormat.BlipFormat.Grow)
		{
			m_writer.WriteStartElement("blur", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("grow", fillFormat.BlipFormat.Grow ? "1" : "0");
			m_writer.WriteAttributeString("rad", (1000f * (100f - fillFormat.BlipFormat.BlurRadius)).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.ColorFrom != Color.Empty || fillFormat.BlipFormat.ColorTo != Color.Empty)
		{
			m_writer.WriteStartElement("clrChange", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("useA", fillFormat.BlipFormat.HasAlpha ? "1" : "0");
			if (fillFormat.BlipFormat.ColorFrom != Color.Empty)
			{
				m_writer.WriteStartElement("clrFrom", "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteStartElement("srgbClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(fillFormat.BlipFormat.ColorFrom));
				if (fillFormat.BlipFormat.ColorFromOpacity != 0f)
				{
					m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
					double num2 = Math.Round(fillFormat.BlipFormat.ColorFromOpacity * 100f * 1000f);
					m_writer.WriteAttributeString("val", num2.ToString(CultureInfo.InvariantCulture));
					m_writer.WriteEndElement();
				}
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
			if (fillFormat.BlipFormat.ColorTo != Color.Empty)
			{
				m_writer.WriteStartElement("clrTo", "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteStartElement("srgbClr", "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(fillFormat.BlipFormat.ColorTo));
				if (fillFormat.BlipFormat.ColorToOpacity != 0f)
				{
					m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
					double num3 = Math.Round(fillFormat.BlipFormat.ColorToOpacity * 100f * 1000f);
					m_writer.WriteAttributeString("val", num3.ToString(CultureInfo.InvariantCulture));
					m_writer.WriteEndElement();
				}
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.Hue > 0f || fillFormat.BlipFormat.Saturation > 0f || fillFormat.BlipFormat.Luminance > 0f)
		{
			m_writer.WriteStartElement("hsl", "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (fillFormat.BlipFormat.Hue > 0f)
			{
				m_writer.WriteAttributeString("hue", (1000f * (100f - fillFormat.BlipFormat.Hue)).ToString(CultureInfo.InvariantCulture));
			}
			if (fillFormat.BlipFormat.Saturation > 0f)
			{
				m_writer.WriteAttributeString("sat", (1000f * (100f - fillFormat.BlipFormat.Saturation)).ToString(CultureInfo.InvariantCulture));
			}
			if (fillFormat.BlipFormat.Luminance > 0f)
			{
				m_writer.WriteAttributeString("lum", (1000f * (100f - fillFormat.BlipFormat.Luminance)).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.Brightness > 0f || fillFormat.BlipFormat.Contrast > 0f)
		{
			m_writer.WriteStartElement("lum", "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (fillFormat.BlipFormat.Brightness > 0f)
			{
				m_writer.WriteAttributeString("bright", (1000f * (100f - fillFormat.BlipFormat.Brightness)).ToString(CultureInfo.InvariantCulture));
			}
			if (fillFormat.BlipFormat.Contrast > 0f)
			{
				m_writer.WriteAttributeString("contrast", (1000f * (100f - fillFormat.BlipFormat.Contrast)).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.TintAmount > 0f || fillFormat.BlipFormat.TintHue > 0f)
		{
			m_writer.WriteStartElement("tint", "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (fillFormat.BlipFormat.TintAmount > 0f)
			{
				m_writer.WriteAttributeString("amt", (1000f * (100f - fillFormat.BlipFormat.TintAmount)).ToString(CultureInfo.InvariantCulture));
			}
			if (fillFormat.BlipFormat.TintHue > 0f)
			{
				m_writer.WriteAttributeString("hue", (1000f * (100f - fillFormat.BlipFormat.TintHue)).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.DuotoneColor != Color.Empty)
		{
			m_writer.WriteStartElement("duotone", "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (!fillFormat.BlipFormat.IsPresetColorAtFirst)
			{
				m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(fillFormat.BlipFormat.DuotoneColor));
				m_writer.WriteEndElement();
				if (fillFormat.BlipFormat.DuotonePresetColor != Color.Empty)
				{
					m_writer.WriteStartElement("prstClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					string value3 = char.ToLower(fillFormat.BlipFormat.DuotonePresetColor.Name.ToString()[0]) + fillFormat.BlipFormat.DuotonePresetColor.Name.ToString().Substring(1);
					m_writer.WriteAttributeString("val", value3);
					m_writer.WriteEndElement();
				}
				else
				{
					m_writer.WriteStartElement("prstClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					m_writer.WriteAttributeString("val", "black");
					m_writer.WriteEndElement();
				}
			}
			else
			{
				if (fillFormat.BlipFormat.DuotonePresetColor != Color.Empty)
				{
					m_writer.WriteStartElement("prstClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					string value4 = char.ToLower(fillFormat.BlipFormat.DuotonePresetColor.Name.ToString()[0]) + fillFormat.BlipFormat.DuotonePresetColor.Name.ToString().Substring(1);
					m_writer.WriteAttributeString("val", value4);
					m_writer.WriteEndElement();
				}
				else
				{
					m_writer.WriteStartElement("prstClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					m_writer.WriteAttributeString("val", "black");
					m_writer.WriteEndElement();
				}
				m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(fillFormat.BlipFormat.DuotoneColor));
				m_writer.WriteEndElement();
			}
			if (fillFormat.BlipFormat.DuotoneOpacity != 0f)
			{
				m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
				double num4 = Math.Round(fillFormat.BlipFormat.DuotoneOpacity * 100f * 1000f);
				m_writer.WriteAttributeString("val", num4.ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			else if (fillFormat.Transparency != 0f)
			{
				m_writer.WriteStartElement("alpha", "http://schemas.openxmlformats.org/drawingml/2006/main");
				double num5 = Math.Round((100f - fillFormat.Transparency) * 1000f);
				m_writer.WriteAttributeString("val", num5.ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.DocxProps.ContainsKey("alphaCeiling"))
		{
			SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "alphaCeiling");
		}
		if (fillFormat.BlipFormat.DocxProps.ContainsKey("alphaFloor"))
		{
			SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "alphaFloor");
		}
		if (fillFormat.BlipFormat.DocxProps.ContainsKey("grayScl"))
		{
			SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "grayScl");
		}
		if (fillFormat.BlipFormat.DocxProps.ContainsKey("fillOverlay"))
		{
			SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "fillOverlay");
		}
		if (fillFormat.BlipFormat.DocxProps.ContainsKey("alphaMod"))
		{
			SerializeDocxStream(fillFormat.BlipFormat.DocxProps, "alphaMod");
		}
		if (fillFormat.BlipFormat.Transparency != 0f)
		{
			m_writer.WriteStartElement("alphaModFix", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("amt", (1000f * (100f - fillFormat.BlipFormat.Transparency)).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		if (fillFormat.BlipFormat.ExtensionURI.Count > 0)
		{
			SerializeBlipExtensions(fillFormat, baseEntity);
		}
		m_writer.WriteEndElement();
		if (fillFormat.SourceRectangle != null && (fillFormat.SourceRectangle.BottomOffset != 0f || fillFormat.SourceRectangle.LeftOffset != 0f || fillFormat.SourceRectangle.RightOffset != 0f || fillFormat.SourceRectangle.TopOffset != 0f))
		{
			m_writer.WriteStartElement("srcRect", "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (fillFormat.SourceRectangle != null)
			{
				SerializeTileRectange(fillFormat.SourceRectangle);
			}
			m_writer.WriteEndElement();
		}
		if (fillFormat.TextureTile)
		{
			m_writer.WriteStartElement("tile", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("tx", (fillFormat.TextureOffsetX * 12700.0).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteAttributeString("ty", (fillFormat.TextureOffsetY * 12700.0).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteAttributeString("sx", (fillFormat.TextureHorizontalScale * 1000.0).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteAttributeString("sy", (fillFormat.TextureVerticalScale * 1000.0).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteAttributeString("flip", GetFlipOrientation(fillFormat.FlipOrientation));
			m_writer.WriteAttributeString("algn", GetBlipAlignment(fillFormat.TextureAlignment));
			m_writer.WriteEndElement();
		}
		else if (fillFormat.FillRectangle != null && !fillFormat.FillRectangle.HasAttributes)
		{
			m_writer.WriteStartElement("stretch", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("fillRect", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		else if (fillFormat.FillRectangle != null && (fillFormat.FillRectangle.BottomOffset != 0f || fillFormat.FillRectangle.LeftOffset != 0f || fillFormat.FillRectangle.RightOffset != 0f || fillFormat.FillRectangle.TopOffset != 0f))
		{
			m_writer.WriteStartElement("stretch", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("fillRect", "http://schemas.openxmlformats.org/drawingml/2006/main");
			SerializeTileRectange(fillFormat.FillRectangle);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeBlipExtensions(Shape shape)
	{
		m_writer.WriteStartElement("extLst", "http://schemas.openxmlformats.org/drawingml/2006/main");
		for (int i = 0; i < shape.FillFormat.BlipFormat.ExtensionURI.Count; i += 2)
		{
			m_writer.WriteStartElement("ext", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("uri", shape.FillFormat.BlipFormat.ExtensionURI[i].ToString());
			if (shape.FillFormat.BlipFormat.ExtensionURI[i + 1] == "imgProps")
			{
				Entity baseEntity = GetBaseEntity(shape);
				SerializeImageProperties(shape.FillFormat, baseEntity);
			}
			else
			{
				m_writer.WriteStartElement("a14", "useLocalDpi", "http://schemas.microsoft.com/office/drawing/2010/main");
				m_writer.WriteAttributeString("val", shape.FillFormat.BlipFormat.HasCompression ? "1" : "0");
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeImageProperties(FillFormat fillFormat, Entity baseEntity)
	{
		ImageEffect imageEffect = fillFormat.BlipFormat.ImageEffect;
		m_writer.WriteStartElement("a14", "imgProps", "http://schemas.microsoft.com/office/drawing/2010/main");
		m_writer.WriteStartElement("imgLayer", "http://schemas.microsoft.com/office/drawing/2010/main");
		string value = string.Empty;
		WPicture wPicture = new WPicture(m_document);
		if (fillFormat.ImageRecord.ImageBytes != null)
		{
			wPicture.LoadImage(fillFormat.ImageRecord.ImageBytes);
		}
		UpdateImages(wPicture);
		if (baseEntity is WSection)
		{
			value = AddImageRelation(DocumentImages, wPicture.ImageRecord, IsNeedToSkipImageRelation(wPicture));
		}
		else if (baseEntity is HeaderFooter)
		{
			value = UpdateHFImageRels(baseEntity as HeaderFooter, wPicture);
		}
		m_writer.WriteAttributeString("embed", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", value);
		if (imageEffect.PropertiesHash.ContainsKey(0))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("sharpenSoften", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteAttributeString("amount", ((int)imageEffect.SharpenAmount).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(1))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("colorTemperature", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteAttributeString("colorTemp", ((int)imageEffect.ColorTemprature).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(2))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("saturation", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteAttributeString("sat", ((int)imageEffect.Saturation).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(3) || imageEffect.PropertiesHash.ContainsKey(4))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("brightnessContrast", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(3) && (float)imageEffect.PropertiesHash[3] != 0f)
			{
				m_writer.WriteAttributeString("bright", ((int)imageEffect.Brightness).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(4) && (float)imageEffect.PropertiesHash[4] != 0f)
			{
				m_writer.WriteAttributeString("contrast", ((int)imageEffect.Contrast).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(7))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticBlur", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteAttributeString("radius", ((int)imageEffect.BlurRadius).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(9) || imageEffect.PropertiesHash.ContainsKey(8))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticCement", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(8))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.CementTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(9))
			{
				m_writer.WriteAttributeString("crackSpacing", ((int)imageEffect.CementCracking).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(13) || imageEffect.PropertiesHash.ContainsKey(12))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticCrisscrossEtching", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(12))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.CrisscrossEtchingTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(13))
			{
				m_writer.WriteAttributeString("pressure", ((int)imageEffect.CrisscrossEtchingPressure).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(14) || imageEffect.PropertiesHash.ContainsKey(15))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticCutout", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(15))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.CutoutTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(14))
			{
				m_writer.WriteAttributeString("numberOfShades", ((int)imageEffect.CutoutShades).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(17) || imageEffect.PropertiesHash.ContainsKey(16))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticFilmGrain", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(16))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.GrainTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(17))
			{
				m_writer.WriteAttributeString("grainSize", ((int)imageEffect.GrainSize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(18) || imageEffect.PropertiesHash.ContainsKey(19))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticGlass", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(18))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.GlassTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(19))
			{
				m_writer.WriteAttributeString("scaling", ((int)imageEffect.GlassScaling).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(21) || imageEffect.PropertiesHash.ContainsKey(20))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticGlowDiffused", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(20))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.GlowDiffusedTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(21))
			{
				m_writer.WriteAttributeString("intensity", ((int)imageEffect.GlowDiffusedIntensity).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(23) || imageEffect.PropertiesHash.ContainsKey(22))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticGlowEdges", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(22))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.GlowEdgesTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(23))
			{
				m_writer.WriteAttributeString("smoothness", ((int)imageEffect.GlowEdgesSmoothness).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(25) || imageEffect.PropertiesHash.ContainsKey(24))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticLightScreen", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(24))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.LightScreenTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(25))
			{
				m_writer.WriteAttributeString("gridSize", ((int)imageEffect.LightScreenGrid).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(27) || imageEffect.PropertiesHash.ContainsKey(26))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticLineDrawing", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(26))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.LineDrawingTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(27))
			{
				m_writer.WriteAttributeString("pencilSize", ((int)imageEffect.LineDrawingPensilSize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(29) || imageEffect.PropertiesHash.ContainsKey(28))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticMarker", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(28))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.MarkerTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(29))
			{
				m_writer.WriteAttributeString("size", ((int)imageEffect.MarkerSize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(31) || imageEffect.PropertiesHash.ContainsKey(30))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticMosiaicBubbles", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(30))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.MosiaicBubbleTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(31))
			{
				m_writer.WriteAttributeString("intensity", ((int)imageEffect.MosiaicBubblePressure).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(33) || imageEffect.PropertiesHash.ContainsKey(32))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticPaintStrokes", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(32))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.StrokeTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(33))
			{
				m_writer.WriteAttributeString("intensity", ((int)imageEffect.StrokeIntensity).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(35) || imageEffect.PropertiesHash.ContainsKey(34))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticPaintBrush", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(34))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.BrushTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(35))
			{
				m_writer.WriteAttributeString("brushSize", ((int)imageEffect.BrushSize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(37) || imageEffect.PropertiesHash.ContainsKey(36))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticPastelsSmooth", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(36))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.PastelTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(37))
			{
				m_writer.WriteAttributeString("brushSize", ((int)imageEffect.PastelSize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(39) || imageEffect.PropertiesHash.ContainsKey(38))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticPencilGrayscale", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(39))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.PencilGrayScaleTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if ((float)imageEffect.PropertiesHash[39] != 0f)
			{
				m_writer.WriteAttributeString("pencilSize", ((int)imageEffect.PencilGraySize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(41) || imageEffect.PropertiesHash.ContainsKey(40))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticPencilSketch", "http://schemas.microsoft.com/office/drawing/2010/main");
			if ((float)imageEffect.PropertiesHash[40] != 0f)
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.PencilSketchTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(41))
			{
				m_writer.WriteAttributeString("pencilSize", ((int)imageEffect.PencilSketchSize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(43) || imageEffect.PropertiesHash.ContainsKey(42))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticPhotocopy", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(42))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.PhotocopyTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(43))
			{
				m_writer.WriteAttributeString("detail", ((int)imageEffect.PhotocopySize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(45) || imageEffect.PropertiesHash.ContainsKey(44))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticPlasticWrap", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(44))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.PlasticWrapTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(45))
			{
				m_writer.WriteAttributeString("smoothness", ((int)imageEffect.PlasticWrapSmoothness).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(47) || imageEffect.PropertiesHash.ContainsKey(46))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticTexturizer", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(46))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.TexturizerTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(47))
			{
				m_writer.WriteAttributeString("scaling", ((int)imageEffect.TexturizerSize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.PropertiesHash.ContainsKey(49) || imageEffect.PropertiesHash.ContainsKey(48))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticWatercolorSponge", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.PropertiesHash.ContainsKey(48))
			{
				m_writer.WriteAttributeString("trans", ((int)imageEffect.SpongeTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (imageEffect.PropertiesHash.ContainsKey(49))
			{
				m_writer.WriteAttributeString("brushSize", ((int)imageEffect.SpongeBrushSize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (imageEffect.HasBackgroundRemovalEffect)
		{
			m_writer.WriteStartElement("backgroundRemoval", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (imageEffect.BackgroundRemovalRectangle.BottomOffset != 0f || imageEffect.BackgroundRemovalRectangle.LeftOffset != 0f || imageEffect.BackgroundRemovalRectangle.RightOffset != 0f || imageEffect.BackgroundRemovalRectangle.TopOffset != 0f)
			{
				SerializeTileRectange(imageEffect.BackgroundRemovalRectangle);
			}
			if (imageEffect.ForegroundVertices != null && imageEffect.ForegroundVertices.Count > 0)
			{
				for (int i = 0; i < imageEffect.ForegroundVertices.Count; i += 2)
				{
					m_writer.WriteStartElement("foregroundMark", "http://schemas.microsoft.com/office/drawing/2010/main");
					m_writer.WriteAttributeString("x1", ((int)imageEffect.ForegroundVertices[i].X).ToString(CultureInfo.InvariantCulture));
					m_writer.WriteAttributeString("y1", ((int)imageEffect.ForegroundVertices[i].Y).ToString(CultureInfo.InvariantCulture));
					m_writer.WriteAttributeString("x2", ((int)imageEffect.ForegroundVertices[i + 1].X).ToString(CultureInfo.InvariantCulture));
					m_writer.WriteAttributeString("y2", ((int)imageEffect.ForegroundVertices[i + 1].Y).ToString(CultureInfo.InvariantCulture));
					m_writer.WriteEndElement();
				}
			}
			if (imageEffect.BackgroundVertices != null && imageEffect.BackgroundVertices.Count > 0)
			{
				for (int j = 0; j < imageEffect.BackgroundVertices.Count; j += 2)
				{
					m_writer.WriteStartElement("backgroundMark", "http://schemas.microsoft.com/office/drawing/2010/main");
					m_writer.WriteAttributeString("x1", ((int)imageEffect.BackgroundVertices[j].X).ToString(CultureInfo.InvariantCulture));
					m_writer.WriteAttributeString("y1", ((int)imageEffect.BackgroundVertices[j].Y).ToString(CultureInfo.InvariantCulture));
					m_writer.WriteAttributeString("x2", ((int)imageEffect.BackgroundVertices[j + 1].X).ToString(CultureInfo.InvariantCulture));
					m_writer.WriteAttributeString("y2", ((int)imageEffect.BackgroundVertices[j + 1].Y).ToString(CultureInfo.InvariantCulture));
					m_writer.WriteEndElement();
				}
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeImageProperties(GroupShape shape)
	{
		m_writer.WriteStartElement("a14", "imgProps", "http://schemas.microsoft.com/office/drawing/2010/main");
		m_writer.WriteStartElement("imgLayer", "http://schemas.microsoft.com/office/drawing/2010/main");
		Entity baseEntity = GetBaseEntity(shape);
		string value = string.Empty;
		WPicture wPicture = new WPicture(m_document);
		if (shape.FillFormat.ImageRecord.ImageBytes != null)
		{
			wPicture.LoadImage(shape.FillFormat.ImageRecord.ImageBytes);
		}
		UpdateImages(wPicture);
		if (baseEntity is WSection)
		{
			value = AddImageRelation(DocumentImages, wPicture.ImageRecord, IsNeedToSkipImageRelation(wPicture));
		}
		else if (baseEntity is HeaderFooter)
		{
			value = UpdateHFImageRels(baseEntity as HeaderFooter, wPicture);
		}
		m_writer.WriteAttributeString("embed", "http://schemas.openxmlformats.org/officeDocument/2006/relationships", value);
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(0))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("sharpenSoften", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteAttributeString("amount", ((int)shape.FillFormat.BlipFormat.ImageEffect.SharpenAmount).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(1))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("colorTemperature", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteAttributeString("colorTemp", ((int)shape.FillFormat.BlipFormat.ImageEffect.ColorTemprature).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(2))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("saturation", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteAttributeString("sat", ((int)shape.FillFormat.BlipFormat.ImageEffect.Saturation).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(3) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(4))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("brightnessContrast", "http://schemas.microsoft.com/office/drawing/2010/main");
			if ((float)shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash[3] != 0f)
			{
				m_writer.WriteAttributeString("bright", ((int)shape.FillFormat.BlipFormat.ImageEffect.Brightness).ToString(CultureInfo.InvariantCulture));
			}
			if ((float)shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash[4] != 0f)
			{
				m_writer.WriteAttributeString("contrast", ((int)shape.FillFormat.BlipFormat.ImageEffect.Contrast).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(7))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticBlur", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteAttributeString("radius", ((int)shape.FillFormat.BlipFormat.ImageEffect.BlurRadius).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(9) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(8))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticCement", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(8))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.CementTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(9))
			{
				m_writer.WriteAttributeString("crackSpacing", ((int)shape.FillFormat.BlipFormat.ImageEffect.CementCracking).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(13) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(12))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticCrisscrossEtching", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(12))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.CrisscrossEtchingTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(13))
			{
				m_writer.WriteAttributeString("pressure", ((int)shape.FillFormat.BlipFormat.ImageEffect.CrisscrossEtchingPressure).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(14) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(15))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticCutout", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(15))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.CutoutTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(14))
			{
				m_writer.WriteAttributeString("numberOfShades", ((int)shape.FillFormat.BlipFormat.ImageEffect.CutoutShades).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(17) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(16))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticFilmGrain", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(16))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.GrainTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(17))
			{
				m_writer.WriteAttributeString("grainSize", ((int)shape.FillFormat.BlipFormat.ImageEffect.GrainSize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(18) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(19))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticGlass", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(18))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.GlassTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(19))
			{
				m_writer.WriteAttributeString("scaling", ((int)shape.FillFormat.BlipFormat.ImageEffect.GlassScaling).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(21) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(20))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticGlowDiffused", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(20))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.GlowDiffusedTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(21))
			{
				m_writer.WriteAttributeString("intensity", ((int)shape.FillFormat.BlipFormat.ImageEffect.GlowDiffusedIntensity).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(23) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(22))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticGlowEdges", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(22))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.GlowEdgesTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(23))
			{
				m_writer.WriteAttributeString("smoothness", ((int)shape.FillFormat.BlipFormat.ImageEffect.GlowEdgesSmoothness).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(25) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(24))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticLightScreen", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(24))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.LightScreenTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(25))
			{
				m_writer.WriteAttributeString("gridSize", ((int)shape.FillFormat.BlipFormat.ImageEffect.LightScreenGrid).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(27) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(26))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticLineDrawing", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(26))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.LineDrawingTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(27))
			{
				m_writer.WriteAttributeString("pencilSize", ((int)shape.FillFormat.BlipFormat.ImageEffect.LineDrawingPensilSize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(29) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(28))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticMarker", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(28))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.MarkerTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(29))
			{
				m_writer.WriteAttributeString("size", ((int)shape.FillFormat.BlipFormat.ImageEffect.MarkerSize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(31) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(30))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticMosiaicBubbles", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(30))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.MosiaicBubbleTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(31))
			{
				m_writer.WriteAttributeString("intensity", ((int)shape.FillFormat.BlipFormat.ImageEffect.MosiaicBubblePressure).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(33) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(32))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticPaintStrokes", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(32))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.StrokeTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(33))
			{
				m_writer.WriteAttributeString("intensity", ((int)shape.FillFormat.BlipFormat.ImageEffect.StrokeIntensity).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(35) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(34))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticPaintBrush", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(34))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.BrushTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(35))
			{
				m_writer.WriteAttributeString("brushSize", ((int)shape.FillFormat.BlipFormat.ImageEffect.BrushSize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(37) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(36))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticPastelsSmooth", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(36))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.PastelTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(37))
			{
				m_writer.WriteAttributeString("brushSize", ((int)shape.FillFormat.BlipFormat.ImageEffect.PastelSize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(39) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(38))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticPencilGrayscale", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(39))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.PencilGrayScaleTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if ((float)shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash[39] != 0f)
			{
				m_writer.WriteAttributeString("pencilSize", ((int)shape.FillFormat.BlipFormat.ImageEffect.PencilGraySize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(41) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(40))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticPencilSketch", "http://schemas.microsoft.com/office/drawing/2010/main");
			if ((float)shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash[40] != 0f)
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.PencilSketchTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(41))
			{
				m_writer.WriteAttributeString("pencilSize", ((int)shape.FillFormat.BlipFormat.ImageEffect.PencilSketchSize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(43) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(42))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticPhotocopy", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(42))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.PhotocopyTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(43))
			{
				m_writer.WriteAttributeString("detail", ((int)shape.FillFormat.BlipFormat.ImageEffect.PhotocopySize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(45) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(44))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticPlasticWrap", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(44))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.PlasticWrapTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(45))
			{
				m_writer.WriteAttributeString("smoothness", ((int)shape.FillFormat.BlipFormat.ImageEffect.PlasticWrapSmoothness).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(47) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(46))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticTexturizer", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(46))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.TexturizerTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(47))
			{
				m_writer.WriteAttributeString("scaling", ((int)shape.FillFormat.BlipFormat.ImageEffect.TexturizerSize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(49) || shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(48))
		{
			m_writer.WriteStartElement("imgEffect", "http://schemas.microsoft.com/office/drawing/2010/main");
			m_writer.WriteStartElement("artisticWatercolorSponge", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(48))
			{
				m_writer.WriteAttributeString("trans", ((int)shape.FillFormat.BlipFormat.ImageEffect.SpongeTransparency).ToString(CultureInfo.InvariantCulture));
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(49))
			{
				m_writer.WriteAttributeString("brushSize", ((int)shape.FillFormat.BlipFormat.ImageEffect.SpongeBrushSize).ToString(CultureInfo.InvariantCulture));
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (shape.FillFormat.BlipFormat.ImageEffect.HasBackgroundRemovalEffect)
		{
			m_writer.WriteStartElement("backgroundRemoval", "http://schemas.microsoft.com/office/drawing/2010/main");
			if (shape.FillFormat.BlipFormat.ImageEffect.BackgroundRemovalRectangle.BottomOffset != 0f || shape.FillFormat.BlipFormat.ImageEffect.BackgroundRemovalRectangle.LeftOffset != 0f || shape.FillFormat.BlipFormat.ImageEffect.BackgroundRemovalRectangle.RightOffset != 0f || shape.FillFormat.BlipFormat.ImageEffect.BackgroundRemovalRectangle.TopOffset != 0f)
			{
				SerializeTileRectange(shape.FillFormat.BlipFormat.ImageEffect.BackgroundRemovalRectangle);
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.ForegroundVertices != null && shape.FillFormat.BlipFormat.ImageEffect.ForegroundVertices.Count > 0)
			{
				for (int i = 0; i < shape.FillFormat.BlipFormat.ImageEffect.ForegroundVertices.Count; i += 2)
				{
					m_writer.WriteStartElement("foregroundMark", "http://schemas.microsoft.com/office/drawing/2010/main");
					m_writer.WriteAttributeString("x1", ((int)shape.FillFormat.BlipFormat.ImageEffect.ForegroundVertices[i].X).ToString(CultureInfo.InvariantCulture));
					m_writer.WriteAttributeString("y1", ((int)shape.FillFormat.BlipFormat.ImageEffect.ForegroundVertices[i].Y).ToString(CultureInfo.InvariantCulture));
					m_writer.WriteAttributeString("x2", ((int)shape.FillFormat.BlipFormat.ImageEffect.ForegroundVertices[i + 1].X).ToString(CultureInfo.InvariantCulture));
					m_writer.WriteAttributeString("y2", ((int)shape.FillFormat.BlipFormat.ImageEffect.ForegroundVertices[i + 1].Y).ToString(CultureInfo.InvariantCulture));
					m_writer.WriteEndElement();
				}
			}
			if (shape.FillFormat.BlipFormat.ImageEffect.BackgroundVertices != null && shape.FillFormat.BlipFormat.ImageEffect.BackgroundVertices.Count > 0)
			{
				for (int j = 0; j < shape.FillFormat.BlipFormat.ImageEffect.BackgroundVertices.Count; j += 2)
				{
					m_writer.WriteStartElement("backgroundMark", "http://schemas.microsoft.com/office/drawing/2010/main");
					m_writer.WriteAttributeString("x1", ((int)shape.FillFormat.BlipFormat.ImageEffect.BackgroundVertices[j].X).ToString(CultureInfo.InvariantCulture));
					m_writer.WriteAttributeString("y1", ((int)shape.FillFormat.BlipFormat.ImageEffect.BackgroundVertices[j].Y).ToString(CultureInfo.InvariantCulture));
					m_writer.WriteAttributeString("x2", ((int)shape.FillFormat.BlipFormat.ImageEffect.BackgroundVertices[j + 1].X).ToString(CultureInfo.InvariantCulture));
					m_writer.WriteAttributeString("y2", ((int)shape.FillFormat.BlipFormat.ImageEffect.BackgroundVertices[j + 1].Y).ToString(CultureInfo.InvariantCulture));
					m_writer.WriteEndElement();
				}
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeTileRectange(TileRectangle tileRectangle)
	{
		if (tileRectangle.BottomOffset != 0f)
		{
			m_writer.WriteAttributeString("b", Math.Round(tileRectangle.BottomOffset * 1000f).ToString(CultureInfo.InvariantCulture));
		}
		if (tileRectangle.LeftOffset != 0f)
		{
			m_writer.WriteAttributeString("l", Math.Round(tileRectangle.LeftOffset * 1000f).ToString(CultureInfo.InvariantCulture));
		}
		if (tileRectangle.RightOffset != 0f)
		{
			m_writer.WriteAttributeString("r", Math.Round(tileRectangle.RightOffset * 1000f).ToString(CultureInfo.InvariantCulture));
		}
		if (tileRectangle.TopOffset != 0f)
		{
			m_writer.WriteAttributeString("t", Math.Round(tileRectangle.TopOffset * 1000f).ToString(CultureInfo.InvariantCulture));
		}
	}

	private string GetBlipAlignment(TextureAlignment textureAlignment)
	{
		return textureAlignment switch
		{
			TextureAlignment.Bottom => "b", 
			TextureAlignment.BottomLeft => "bl", 
			TextureAlignment.BottomRight => "br", 
			TextureAlignment.Center => "ctr", 
			TextureAlignment.Left => "l", 
			TextureAlignment.Right => "r", 
			TextureAlignment.Top => "t", 
			TextureAlignment.TopLeft => "tl", 
			TextureAlignment.TopRight => "tr", 
			_ => string.Empty, 
		};
	}

	private void SerializePatternFill(FillFormat fillFormat)
	{
		m_writer.WriteStartElement("pattFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("prst", GetPatternFillType(fillFormat.Pattern));
		m_writer.WriteStartElement("fgClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("val", GetRGBCode(fillFormat.ForeColor));
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("bgClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("val", GetRGBCode(fillFormat.Color));
		uint num = (uint)Math.Round((1f - fillFormat.Transparency / 100f) * 100f);
		num *= 1000;
		m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("val", num.ToString(CultureInfo.InvariantCulture));
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private string GetPatternFillType(PatternType patternType)
	{
		return patternType switch
		{
			PatternType.Cross => "cross", 
			PatternType.DashedDownwardDiagonal => "dashDnDiag", 
			PatternType.DashedHorizontal => "dashHorz", 
			PatternType.DashedUpwardDiagonal => "dashUpDiag", 
			PatternType.DashedVertical => "dashVert", 
			PatternType.DiagonalBrick => "diagBrick", 
			PatternType.DiagonalCross => "diagCross", 
			PatternType.Divot => "divot", 
			PatternType.DarkDownwardDiagonal => "dkDnDiag", 
			PatternType.DarkHorizontal => "dkHorz", 
			PatternType.DarkUpwardDiagonal => "dkUpDiag", 
			PatternType.DarkVertical => "dkVert", 
			PatternType.DownwardDiagonal => "dnDiag", 
			PatternType.DottedDiamond => "dotDmnd", 
			PatternType.DottedGrid => "dotGrid", 
			PatternType.Horizontal => "horz", 
			PatternType.HorizontalBrick => "horzBrick", 
			PatternType.LargeCheckerBoard => "lgCheck", 
			PatternType.LargeConfetti => "lgConfetti", 
			PatternType.LargeGrid => "lgGrid", 
			PatternType.LightDownwardDiagonal => "ltDnDiag", 
			PatternType.LightHorizontal => "ltHorz", 
			PatternType.LightUpwardDiagonal => "ltUpDiag", 
			PatternType.LightVertical => "ltVert", 
			PatternType.NarrowHorizontal => "narHorz", 
			PatternType.NarrowVertical => "narVert", 
			PatternType.OutlinedDiamond => "openDmnd", 
			PatternType.Pattern10Percent => "pct10", 
			PatternType.Pattern20Percent => "pct20", 
			PatternType.Pattern25Percent => "pct25", 
			PatternType.Pattern30Percent => "pct30", 
			PatternType.Pattern40Percent => "pct40", 
			PatternType.Pattern5Percent => "pct5", 
			PatternType.Pattern50Percent => "pct50", 
			PatternType.Pattern60Percent => "pct60", 
			PatternType.Pattern70Percent => "pct70", 
			PatternType.Pattern75Percent => "pct75", 
			PatternType.Pattern80Percent => "pct80", 
			PatternType.Pattern90Percent => "pct90", 
			PatternType.Plaid => "Plaid", 
			PatternType.Shingle => "shingle", 
			PatternType.SmallCheckerBoard => "smCheck", 
			PatternType.SmallConfetti => "smConfetti", 
			PatternType.SmallGrid => "smGrid", 
			PatternType.SolidDiamond => "solidDmnd", 
			PatternType.Sphere => "sphere", 
			PatternType.Trellis => "trellis", 
			PatternType.UpwardDiagonal => "upDiag", 
			PatternType.Vertical => "vert", 
			PatternType.Wave => "wave", 
			PatternType.WideDownwardDiagonal => "wdDnDiag", 
			PatternType.WideUpwardDiagonal => "wdUpDiag", 
			PatternType.Weave => "weave", 
			PatternType.ZigZag => "zigZag", 
			_ => "pct5", 
		};
	}

	private void SerializeSolidFill(Color fillColor, float transparency)
	{
		m_writer.WriteStartElement("solidFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		string rGBCode = GetRGBCode(fillColor);
		m_writer.WriteAttributeString("val", rGBCode);
		uint num = (uint)Math.Round((1f - transparency / 100f) * 100f);
		num *= 1000;
		m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("val", num.ToString(CultureInfo.InvariantCulture));
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private string GetLineStyle(LineStyle lineStyle, bool is2007)
	{
		switch (lineStyle)
		{
		case LineStyle.ThinThin:
			if (!is2007)
			{
				return "dbl";
			}
			return "thinThin";
		case LineStyle.ThinThick:
			return "thinThick";
		case LineStyle.ThickThin:
			return "thickThin";
		case LineStyle.ThickBetweenThin:
			if (!is2007)
			{
				return "tri";
			}
			return "thickBetweenThin";
		default:
			if (!is2007)
			{
				return "sng";
			}
			return "single";
		}
	}

	private void SerializeTextBoxContent(WTextBody textBody)
	{
		m_writer.WriteStartElement("txbx", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		m_writer.WriteStartElement("txbxContent", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		for (int i = 0; i < textBody.Items.Count; i++)
		{
			SerializeBodyItem(textBody.Items[i], isLastSection: false);
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeChildShapeTextBoxContent(WTextBody textBody, TextFrame textFrame)
	{
		m_writer.WriteStartElement("textbox", "urn:schemas-microsoft-com:vml");
		SerializeTextBoxStyle(textFrame);
		if (textFrame.HasInternalMargin)
		{
			SerializeInsetAttribute(textFrame);
		}
		if (textBody.Items.Count > 0)
		{
			m_writer.WriteStartElement("txbxContent", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			for (int i = 0; i < textBody.Items.Count; i++)
			{
				SerializeBodyItem(textBody.Items[i], isLastSection: false);
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeTextBoxStyle(TextFrame textFrame)
	{
		StringBuilder stringBuilder = new StringBuilder();
		if (textFrame.ShapeAutoFit)
		{
			stringBuilder.Append("mso-fit-shape-to-text:t;");
		}
		stringBuilder.Append(SerializeFallbackTextDirection(textFrame.TextDirection));
		m_writer.WriteAttributeString("style", stringBuilder.ToString());
	}

	private void SerializeBodyProperties(Shape shape)
	{
		m_writer.WriteStartElement("wps", "bodyPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		m_writer.WriteAttributeString("rot", "0");
		m_writer.WriteAttributeString("spcFirstLastPara", "0");
		m_writer.WriteAttributeString("vertOverflow", "overflow");
		m_writer.WriteAttributeString("horzOverflow", "overflow");
		if (shape.TextFrame.NoWrap)
		{
			m_writer.WriteAttributeString("wrap", "none");
		}
		else
		{
			m_writer.WriteAttributeString("wrap", "square");
		}
		if (shape.TextFrame.InternalMargin.Left >= 0f)
		{
			m_writer.WriteAttributeString("lIns", GetEmuFromPoint(shape.TextFrame.InternalMargin.Left));
		}
		if (shape.TextFrame.InternalMargin.Right >= 0f)
		{
			m_writer.WriteAttributeString("rIns", GetEmuFromPoint(shape.TextFrame.InternalMargin.Right));
		}
		if (shape.TextFrame.InternalMargin.Top >= 0f)
		{
			m_writer.WriteAttributeString("tIns", GetEmuFromPoint(shape.TextFrame.InternalMargin.Top));
		}
		if (shape.TextFrame.InternalMargin.Bottom >= 0f)
		{
			m_writer.WriteAttributeString("bIns", GetEmuFromPoint(shape.TextFrame.InternalMargin.Bottom));
		}
		m_writer.WriteAttributeString("numCol", "1");
		m_writer.WriteAttributeString("spcCol", "0");
		m_writer.WriteAttributeString("rtlCol", "0");
		m_writer.WriteAttributeString("fromWordArt", "0");
		if (shape.TextFrame.TextVerticalAlignment == VerticalAlignment.Bottom)
		{
			m_writer.WriteAttributeString("anchor", "b");
		}
		else if (shape.TextFrame.TextVerticalAlignment == VerticalAlignment.Middle)
		{
			m_writer.WriteAttributeString("anchor", "ctr");
		}
		else
		{
			m_writer.WriteAttributeString("anchor", "t");
		}
		m_writer.WriteAttributeString("anchorCtr", "0");
		m_writer.WriteAttributeString("forceAA", "0");
		m_writer.WriteAttributeString("compatLnSpc", "1");
		if (shape.TextFrame.Upright)
		{
			m_writer.WriteAttributeString("upright", "1");
		}
		SerializeTextDirection(shape.TextFrame.TextDirection);
		m_writer.WriteStartElement("a", "prstTxWarp", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("prst", "textNoShape");
		m_writer.WriteStartElement("a", "avLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		if (shape.TextFrame.NoAutoFit)
		{
			m_writer.WriteStartElement("noAutofit", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (shape.TextFrame.NormalAutoFit)
		{
			m_writer.WriteStartElement("normAutofit", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (shape.TextFrame.ShapeAutoFit)
		{
			m_writer.WriteStartElement("spAutoFit", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (!shape.TextFrame.NoAutoFit && !shape.TextFrame.NormalAutoFit && !shape.TextFrame.ShapeAutoFit)
		{
			m_writer.WriteStartElement("noAutofit", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeBodyProperties(ChildShape shape)
	{
		m_writer.WriteStartElement("wps", "bodyPr", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		m_writer.WriteAttributeString("rot", "0");
		m_writer.WriteAttributeString("spcFirstLastPara", "0");
		m_writer.WriteAttributeString("vertOverflow", "overflow");
		m_writer.WriteAttributeString("horzOverflow", "overflow");
		if (shape.TextFrame.NoWrap)
		{
			m_writer.WriteAttributeString("wrap", "none");
		}
		else
		{
			m_writer.WriteAttributeString("wrap", "square");
		}
		if (shape.TextFrame.InternalMargin.Left >= 0f)
		{
			m_writer.WriteAttributeString("lIns", GetEmuFromPoint(shape.TextFrame.InternalMargin.Left));
		}
		if (shape.TextFrame.InternalMargin.Right >= 0f)
		{
			m_writer.WriteAttributeString("rIns", GetEmuFromPoint(shape.TextFrame.InternalMargin.Right));
		}
		if (shape.TextFrame.InternalMargin.Top >= 0f)
		{
			m_writer.WriteAttributeString("tIns", GetEmuFromPoint(shape.TextFrame.InternalMargin.Top));
		}
		if (shape.TextFrame.InternalMargin.Bottom >= 0f)
		{
			m_writer.WriteAttributeString("bIns", GetEmuFromPoint(shape.TextFrame.InternalMargin.Bottom));
		}
		m_writer.WriteAttributeString("numCol", "1");
		m_writer.WriteAttributeString("spcCol", "0");
		m_writer.WriteAttributeString("rtlCol", "0");
		m_writer.WriteAttributeString("fromWordArt", "0");
		if (shape.TextFrame.TextVerticalAlignment == VerticalAlignment.Bottom)
		{
			m_writer.WriteAttributeString("anchor", "b");
		}
		else if (shape.TextFrame.TextVerticalAlignment == VerticalAlignment.Middle)
		{
			m_writer.WriteAttributeString("anchor", "ctr");
		}
		else
		{
			m_writer.WriteAttributeString("anchor", "t");
		}
		m_writer.WriteAttributeString("anchorCtr", "0");
		m_writer.WriteAttributeString("forceAA", "0");
		m_writer.WriteAttributeString("compatLnSpc", "1");
		if (shape.TextFrame.Upright)
		{
			m_writer.WriteAttributeString("upright", "1");
		}
		SerializeTextDirection(shape.TextFrame.TextDirection);
		m_writer.WriteStartElement("a", "prstTxWarp", "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("prst", "textNoShape");
		m_writer.WriteStartElement("a", "avLst", "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		if (shape.TextFrame.NoAutoFit)
		{
			m_writer.WriteStartElement("noAutofit", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (shape.TextFrame.NormalAutoFit)
		{
			m_writer.WriteStartElement("normAutofit", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (shape.TextFrame.ShapeAutoFit)
		{
			m_writer.WriteStartElement("spAutoFit", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (!shape.TextFrame.NoAutoFit && !shape.TextFrame.NormalAutoFit && !shape.TextFrame.ShapeAutoFit)
		{
			m_writer.WriteStartElement("noAutofit", "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeTextDirection(TextDirection textDirection)
	{
		switch (textDirection)
		{
		case TextDirection.VerticalTopToBottom:
			m_writer.WriteAttributeString("vert", "vert");
			break;
		case TextDirection.VerticalBottomToTop:
			m_writer.WriteAttributeString("vert", "vert270");
			break;
		case TextDirection.VerticalFarEast:
			m_writer.WriteAttributeString("vert", "eaVert");
			break;
		case TextDirection.HorizontalFarEast:
			m_writer.WriteAttributeString("vert", "horz");
			break;
		case TextDirection.Vertical:
			m_writer.WriteAttributeString("vert", "mongolianVert");
			break;
		default:
			m_writer.WriteAttributeString("vert", "horz");
			break;
		}
	}

	private void SerializeAutoShapeStyles(Shape shape)
	{
		m_writer.WriteStartElement("wps", "style", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		m_writer.WriteStartElement("a", "lnRef", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeAutoShapeStyles(shape.ShapeStyleReferences[0], isFontRef: false);
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "fillRef", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeAutoShapeStyles(shape.ShapeStyleReferences[1], isFontRef: false);
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "effectRef", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeAutoShapeStyles(shape.ShapeStyleReferences[2], isFontRef: false);
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "fontRef", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeAutoShapeStyles(shape.ShapeStyleReferences[3], isFontRef: true);
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeAutoShapeStyles(ChildShape shape)
	{
		m_writer.WriteStartElement("wps", "style", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		m_writer.WriteStartElement("a", "lnRef", "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeAutoShapeStyles(shape.ShapeStyleReferences[0], isFontRef: false);
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "fillRef", "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeAutoShapeStyles(shape.ShapeStyleReferences[1], isFontRef: false);
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "effectRef", "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeAutoShapeStyles(shape.ShapeStyleReferences[2], isFontRef: false);
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "fontRef", "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeAutoShapeStyles(shape.ShapeStyleReferences[3], isFontRef: true);
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeAutoShapeStyles(GroupShape shape)
	{
		m_writer.WriteStartElement("wps", "style", "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
		m_writer.WriteStartElement("a", "lnRef", "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeAutoShapeStyles(shape.ShapeStyleReferences[0], isFontRef: false);
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "fillRef", "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeAutoShapeStyles(shape.ShapeStyleReferences[1], isFontRef: false);
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "effectRef", "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeAutoShapeStyles(shape.ShapeStyleReferences[2], isFontRef: false);
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "fontRef", "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeAutoShapeStyles(shape.ShapeStyleReferences[3], isFontRef: true);
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeAutoShapeStyles(ShapeStyleReference shapeStyleRef, bool isFontRef)
	{
		string empty = string.Empty;
		if (isFontRef)
		{
			empty = ((shapeStyleRef.StyleRefIndex == 1) ? "minor" : "major");
			m_writer.WriteAttributeString("idx", empty);
		}
		else
		{
			m_writer.WriteAttributeString("idx", shapeStyleRef.StyleRefIndex.ToString());
		}
		if (shapeStyleRef.StyleRefColor != Color.Empty)
		{
			m_writer.WriteStartElement("a", "srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			string rGBCode = GetRGBCode(shapeStyleRef.StyleRefColor);
			m_writer.WriteAttributeString("val", rGBCode);
			if (shapeStyleRef.StyleRefOpacity != 4.2949673E+09f)
			{
				uint num = (uint)Math.Round((1f - shapeStyleRef.StyleRefOpacity / 100f) * 100f);
				num *= 1000;
				m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", num.ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeWatermark(Watermark watermark)
	{
		if (watermark != null && watermark.Type != 0 && (!(watermark is PictureWatermark) || ((PictureWatermark)watermark).Picture != null))
		{
			if (watermark.Type == WatermarkType.TextWatermark)
			{
				SerializeTextWatermark(watermark as TextWatermark);
			}
			else
			{
				SerializePictureWatermark(watermark as PictureWatermark);
			}
		}
	}

	private void SerializeTextWatermark(TextWatermark textWatermark)
	{
		m_writer.WriteStartElement("r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteStartElement("pict", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
		m_writer.WriteAttributeString("id", "PowerPlusWaterMarkObject31" + Guid.NewGuid());
		m_writer.WriteAttributeString("type", "#_x0000_t136");
		m_writer.WriteAttributeString("allowincell", "urn:schemas-microsoft-com:office:office", "f");
		string value = SerializeTextStyleAttribute(textWatermark);
		m_writer.WriteAttributeString("style", value);
		StringBuilder stringBuilder = new StringBuilder();
		m_writer.WriteAttributeString("fillcolor", "#" + GetRGBCode(textWatermark.Color));
		m_writer.WriteAttributeString("stroked", "f");
		if (textWatermark.Semitransparent)
		{
			m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
			m_writer.WriteAttributeString("opacity", ".5");
			m_writer.WriteEndElement();
		}
		m_writer.WriteStartElement("textpath", "urn:schemas-microsoft-com:vml");
		stringBuilder.Remove(0, stringBuilder.Length);
		stringBuilder.Append("font-family:" + InvertedCommas);
		stringBuilder.Append(textWatermark.FontName.Replace(NullSymbol, string.Empty));
		stringBuilder.Append(InvertedCommas);
		if (textWatermark.Size == 36f || textWatermark.Size == 144f)
		{
			stringBuilder.Append(";font-size:2in");
		}
		else
		{
			stringBuilder.Append(";font-size:");
			stringBuilder.Append(textWatermark.Size);
			stringBuilder.Append("pt");
		}
		m_writer.WriteAttributeString("style", stringBuilder.ToString());
		if (textWatermark.Text.Trim(ControlChar.SpaceChar) != string.Empty)
		{
			m_writer.WriteAttributeString("string", textWatermark.Text.Replace(NullSymbol, string.Empty));
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializePictureWatermark(PictureWatermark pictWatermark)
	{
		m_writer.WriteStartElement("r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteStartElement("pict", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
		m_writer.WriteAttributeString("id", "WordPictureWatermark1" + Guid.NewGuid());
		m_writer.WriteAttributeString("type", "##_x0000_t75");
		m_writer.WriteAttributeString("allowincell", "urn:schemas-microsoft-com:office:office", "f");
		string value = SerializeShapePictStyle(pictWatermark.WordPicture);
		m_writer.WriteAttributeString("style", value);
		m_writer.WriteStartElement("imagedata", "urn:schemas-microsoft-com:vml");
		if (m_watermarkId == string.Empty)
		{
			m_watermarkId = GetNextRelationShipID();
		}
		m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", m_watermarkId);
		if (pictWatermark.WordPicture.Title != null)
		{
			m_writer.WriteAttributeString("title", "urn:schemas-microsoft-com:office:office", pictWatermark.WordPicture.Title);
		}
		SerializePictureOffset(pictWatermark.WordPicture);
		if (pictWatermark.Washout)
		{
			m_writer.WriteAttributeString("gain", "19661f");
			m_writer.WriteAttributeString("blacklevel", "22938f");
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private string SerializeTextStyleAttribute(TextWatermark textWatermark)
	{
		StringBuilder stringBuilder = new StringBuilder();
		if (textWatermark.TextWrappingStyle != 0)
		{
			stringBuilder.Append("position:absolute;");
		}
		stringBuilder.Append("margin-left:");
		stringBuilder.Append(textWatermark.HorizontalPosition.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;margin-top:");
		stringBuilder.Append(textWatermark.VerticalPosition.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;width:");
		float num = ((textWatermark.Width != -1f) ? textWatermark.Width : (textWatermark.ShapeSize.Width * 0.6934f));
		stringBuilder.Append(Math.Round(num, 2).ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;height:");
		num = ((textWatermark.Height != -1f) ? textWatermark.Height : (textWatermark.ShapeSize.Height * 0.67f));
		stringBuilder.Append(Math.Round(num, 2).ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt");
		if (textWatermark.Rotation != 0)
		{
			stringBuilder.Append(";rotation:" + textWatermark.Rotation);
		}
		stringBuilder.Append(";mso-position-horizontal-relative:");
		stringBuilder.Append(GetHorizOriginAsString(textWatermark.HorizontalOrigin));
		stringBuilder.Append(";mso-position-vertical-relative:");
		stringBuilder.Append(GetVerticalOrginAsString(textWatermark.VerticalOrigin, isShapeStyle: true));
		if (textWatermark.HorizontalAlignment != 0)
		{
			stringBuilder.Append(";mso-position-horizontal:");
			stringBuilder.Append(textWatermark.HorizontalAlignment.ToString().ToLower());
		}
		if (textWatermark.VerticalAlignment != 0)
		{
			stringBuilder.Append(";mso-position-vertical:");
			stringBuilder.Append(textWatermark.VerticalAlignment.ToString().ToLower());
		}
		if (!textWatermark.Visible)
		{
			stringBuilder.Append(";visibility:hidden");
		}
		if (textWatermark.OrderIndex != int.MaxValue)
		{
			stringBuilder.Append(";z-index:" + textWatermark.OrderIndex);
		}
		return stringBuilder.ToString();
	}

	private void SerializeSafeFieldText(string inputString, bool isDeletedText)
	{
		if (inputString != null && !(inputString == string.Empty))
		{
			string empty = string.Empty;
			int num = inputString.IndexOf('\u0001');
			empty = ((num != -1) ? inputString.Substring(0, num) : inputString);
			if (!string.IsNullOrEmpty(empty))
			{
				SerializeText(empty, isDeletedText, isInstrText: true);
			}
		}
	}

	private string UpdateInclPicFieldUrl(string url, WField field)
	{
		string nextRelationShipID = GetNextRelationShipID();
		if (field.OwnerParagraph.OwnerTextBody is HeaderFooter)
		{
			string key = string.Empty;
			foreach (HeaderFooterType key2 in m_headerFooterColl.Keys)
			{
				Dictionary<string, HeaderFooter> dictionary = m_headerFooterColl[key2];
				foreach (string key3 in dictionary.Keys)
				{
					if (dictionary[key3] == field.OwnerParagraph.OwnerTextBody as HeaderFooter)
					{
						key = key3;
					}
				}
			}
			if (HeaderFooterInclPicUrls.ContainsKey(key))
			{
				Dictionary<string, string> dictionary2 = m_headerFooterInclPicUrls[key];
				dictionary2.Add(nextRelationShipID, url);
			}
			else
			{
				Dictionary<string, string> dictionary2 = new Dictionary<string, string>();
				dictionary2.Add(nextRelationShipID, url);
				HeaderFooterInclPicUrls.Add(key, dictionary2);
			}
		}
		else
		{
			InclPicFieldUrl.Add(nextRelationShipID, url);
		}
		return nextRelationShipID;
	}

	private void SerializeFieldBegin(WField field)
	{
		FieldStack.Push(field);
		if (IsPictureHyperLink(field))
		{
			HasHyperlink = true;
			IsSkipFieldItem = true;
			if (field.FieldSeparator.NextSibling.NextSibling != field.FieldEnd)
			{
				m_writer.WriteStartElement("hyperlink", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				SerializeHyperlinkAttributes(field);
				m_writer.WriteAttributeString("history", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
			}
			return;
		}
		if (field.IsPgNum)
		{
			IsSkipFieldItem = true;
			m_writer.WriteStartElement("r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (field.CharacterFormat != null)
			{
				SerializeCharacterFormat(field.CharacterFormat);
			}
			m_writer.WriteStartElement("pgNum", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			return;
		}
		if (field is WMergeField)
		{
			(field as WMergeField).UpdateFieldMarks();
		}
		if (field is WSeqField)
		{
			(field as WSeqField).UpdateFieldMarks();
		}
		if (!HasHyperlink && field.FieldType == FieldType.FieldHyperlink)
		{
			HasHyperlink = true;
		}
		if (field.FieldSeparator != null)
		{
			FieldMarkStack.Push(field.FieldSeparator);
		}
		else if (field.FieldEnd != null)
		{
			FieldMarkStack.Push(field.FieldEnd);
		}
		m_writer.WriteStartElement("r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (field.CharacterFormat != null)
		{
			SerializeCharacterFormat(field.CharacterFormat);
		}
		m_writer.WriteStartElement("fldChar", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("fldCharType", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "begin");
		if (field.IsLocked || (WordDocument.DisableDateTimeUpdating && (field.FieldType == FieldType.FieldDate || field.FieldType == FieldType.FieldTime)))
		{
			m_writer.WriteAttributeString("fldLock", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		if (field.IsFieldWithoutSeparator && field.FieldSeparator != null && field.FieldEnd != null)
		{
			field.RemoveFieldSeparator(field.FieldEnd);
			field.FieldSeparator = null;
		}
	}

	private bool IsPictureHyperLink(WField field)
	{
		if (field.FieldType == FieldType.FieldHyperlink && field.FieldSeparator != null && field.FieldSeparator.NextSibling is WPicture && !(field.FieldSeparator.NextSibling as WPicture).IsShape)
		{
			return true;
		}
		return false;
	}

	private void SerializeHyperlinkAttributes(WField field)
	{
		string nextRelationShipID = GetNextRelationShipID();
		string text = field.FieldValue.Replace(InvertedCommas, string.Empty);
		Entity ownerTextBody = field.GetOwnerTextBody(field);
		text = text.Replace(" ", "%20");
		bool flag = text.StartsWith("_Toc");
		if (text.IndexOf("http") == -1 && text.IndexOf("www") == -1 && text.IndexOf("mailto") == -1 && text.IndexOf("javascript") == -1 && text.IndexOf("ftp:") == -1)
		{
			text = text.Replace(SlashSymbol + SlashSymbol, "/");
			if (text.Length > 2 && text.Substring(0, 3) == "../")
			{
				text = text.Remove(0, 3);
			}
			else if (field.IsLocal || field.FormattingString.IndexOf(SlashSymbol + SlashSymbol + "l") != -1)
			{
				text = text.Insert(0, "#");
			}
		}
		if (field.GetBaseEntity(field) is HeaderFooter || m_IsAutoshapeTextboxInHeader)
		{
			string key = string.Empty;
			foreach (HeaderFooterType key2 in m_headerFooterColl.Keys)
			{
				Dictionary<string, HeaderFooter> dictionary = m_headerFooterColl[key2];
				foreach (string key3 in dictionary.Keys)
				{
					if (dictionary[key3] == field.GetBaseEntity(field) as HeaderFooter || (dictionary[key3].Type == m_HeaderFooterType && m_IsAutoshapeTextboxInHeader))
					{
						key = key3;
					}
				}
			}
			if (HeaderFooterHyperlinks.ContainsKey(key))
			{
				Dictionary<string, string> dictionary2 = m_headerFooterHyperlinks[key];
				dictionary2.Add(nextRelationShipID, text);
			}
			else
			{
				Dictionary<string, string> dictionary2 = new Dictionary<string, string>();
				dictionary2.Add(nextRelationShipID, text);
				HeaderFooterHyperlinks.Add(key, dictionary2);
			}
		}
		else if (!flag)
		{
			if (ownerTextBody is WSection || ownerTextBody is WTextBox || ownerTextBody is WTableRow)
			{
				HyperlinkTargets.Add(nextRelationShipID, text);
			}
			else if (ownerTextBody is WFootnote)
			{
				if ((ownerTextBody as WFootnote).FootnoteType == FootnoteType.Footnote)
				{
					FootnoteHyperlinks.Add(nextRelationShipID, text);
				}
				else
				{
					EndnoteHyperlinks.Add(nextRelationShipID, text);
				}
			}
			if (ownerTextBody is WComment)
			{
				CommentHyperlinks.Add(nextRelationShipID, text);
			}
		}
		if (flag)
		{
			m_writer.WriteAttributeString("anchor", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", field.FieldValue.Replace(InvertedCommas, string.Empty));
		}
		else
		{
			m_writer.WriteAttributeString("r", "id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", nextRelationShipID);
		}
		WriteLocalReference(field);
	}

	private void WriteLocalReference(WField field)
	{
		if (field.IsLocal && field.LocalReference != null && field.LocalReference != string.Empty)
		{
			m_writer.WriteAttributeString("anchor", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", field.LocalReference.Replace(InvertedCommas, string.Empty));
		}
	}

	private void SerializeFootEndnote(WFootnote footnote, bool isFromCompression)
	{
		footnote.EnsureFtnMarker();
		bool num = footnote.FootnoteType == FootnoteType.Endnote;
		int key = (num ? m_endnoteId++ : m_footnoteId++);
		if (num)
		{
			HasEndnote = true;
			EndnoteCollection.Add(key, footnote);
		}
		else
		{
			HasFootnote = true;
			FootnoteCollection.Add(key, footnote);
		}
		if (!isFromCompression)
		{
			m_writer.WriteStartElement("r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		}
		SerializeCharacterFormat(footnote.MarkerCharacterFormat);
		string localName = (num ? "endnoteReference" : "footnoteReference");
		m_writer.WriteStartElement(localName, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		string value = (footnote.IsAutoNumbered ? "0" : "1");
		m_writer.WriteAttributeString("customMarkFollows", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value);
		m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", key.ToString());
		m_writer.WriteEndElement();
		if (!footnote.IsAutoNumbered)
		{
			if (footnote.SymbolCode != 0)
			{
				m_writer.WriteStartElement("sym", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("char", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "F0" + footnote.SymbolCode.ToString("X2"));
				m_writer.WriteAttributeString("font", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", footnote.SymbolFontName);
				m_writer.WriteEndElement();
			}
			else if (footnote.m_strCustomMarker != string.Empty && footnote.CustomMarker != "(")
			{
				m_writer.WriteElementString("t", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", footnote.m_strCustomMarker);
			}
		}
		if (!isFromCompression)
		{
			m_writer.WriteEndElement();
		}
	}

	private void SerializeFootEndnotes(bool IsEndnotes)
	{
		MemoryStream data = new MemoryStream();
		string empty = string.Empty;
		string empty2 = string.Empty;
		if (IsWord2003ML)
		{
			m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
			m_writer.WriteAttributeString("pkg", "name", null, IsEndnotes ? "/word/endnotes.xml" : "/word/footnotes.xml");
			m_writer.WriteAttributeString("pkg", "contentType", null, IsEndnotes ? "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml" : "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml");
			m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		}
		else
		{
			m_writer = CreateWriter(data);
		}
		Dictionary<int, WFootnote> dictionary = null;
		if (IsEndnotes)
		{
			if (m_endnoteColl != null)
			{
				dictionary = m_endnoteColl;
			}
		}
		else if (m_footnoteColl != null)
		{
			dictionary = m_footnoteColl;
		}
		if (dictionary != null)
		{
			if (IsEndnotes)
			{
				empty = "endnotes";
				empty2 = "endnote";
			}
			else
			{
				empty = "footnotes";
				empty2 = "footnote";
			}
			SerializeFootEndnotesStartElement(empty, empty2);
			foreach (int key in dictionary.Keys)
			{
				SerializeFootEndnoteElement(dictionary[key], IsEndnotes, key);
			}
		}
		m_writer.WriteEndElement();
		if (IsWord2003ML)
		{
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			return;
		}
		m_writer.Flush();
		if (IsEndnotes)
		{
			m_archive.AddItem("word\\endnotes.xml", data, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
		else
		{
			m_archive.AddItem("word\\footnotes.xml", data, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
	}

	private void SerializeFootEndnotesStartElement(string collTagStr, string elemTagStr)
	{
		m_writer.WriteStartElement("w", collTagStr, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "v", null, "urn:schemas-microsoft-com:vml");
		m_writer.WriteAttributeString("xmlns", "w10", null, "urn:schemas-microsoft-com:office:word");
		m_writer.WriteAttributeString("xmlns", "o", null, "urn:schemas-microsoft-com:office:office");
		m_writer.WriteAttributeString("xmlns", "ve", null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
		m_writer.WriteAttributeString("xmlns", "r", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
		m_writer.WriteAttributeString("xmlns", "m", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
		m_writer.WriteAttributeString("xmlns", "wne", null, "http://schemas.microsoft.com/office/word/2006/wordml");
		m_writer.WriteAttributeString("xmlns", "a", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "pic", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
		m_writer.WriteAttributeString("xmlns", "wp", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		m_writer.WriteStartElement("w", elemTagStr, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "separator");
		m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "-1");
		WTextBody wTextBody = null;
		wTextBody = ((!(elemTagStr == "footnote")) ? m_document.Endnotes.Separator : m_document.Footnotes.Separator);
		SerializeBodyItems(wTextBody.Items, isLastSection: true);
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("w", elemTagStr, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "continuationSeparator");
		m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
		wTextBody = ((!(elemTagStr == "footnote")) ? m_document.Endnotes.ContinuationSeparator : m_document.Footnotes.ContinuationSeparator);
		SerializeBodyItems(wTextBody.Items, isLastSection: true);
		m_writer.WriteEndElement();
		wTextBody = ((!(elemTagStr == "footnote")) ? m_document.Endnotes.ContinuationNotice : m_document.Footnotes.ContinuationNotice);
		if (wTextBody.ChildEntities.Count > 0)
		{
			m_writer.WriteStartElement("w", elemTagStr, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "continuationNotice");
			m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
			SerializeBodyItems(wTextBody.Items, isLastSection: true);
			m_writer.WriteEndElement();
		}
	}

	private void SerializeFootEndnoteElement(WFootnote footnote, bool isEndNote, int id)
	{
		if (isEndNote)
		{
			m_writer.WriteStartElement("endnote", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		}
		else
		{
			m_writer.WriteStartElement("footnote", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		}
		m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", id.ToString());
		for (int i = 0; i < footnote.TextBody.Items.Count; i++)
		{
			SerializeBodyItem(footnote.TextBody.Items[i], isLastSection: false);
		}
		m_writer.WriteEndElement();
	}

	private void SerializeDropDownFormField(WDropDownFormField dropDownFormField)
	{
		FieldStack.Push(dropDownFormField);
		m_writer.WriteStartElement("r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeCharacterFormat(dropDownFormField.CharacterFormat);
		m_writer.WriteStartElement("fldChar", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", "fldCharType", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "begin");
		if (dropDownFormField.HasFFData)
		{
			m_writer.WriteStartElement("ffData", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeFormFieldData(dropDownFormField);
			m_writer.WriteStartElement("ddList", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (dropDownFormField.DropDownSelectedIndex >= 0)
			{
				m_writer.WriteStartElement("result", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dropDownFormField.DropDownSelectedIndex.ToString());
				m_writer.WriteEndElement();
			}
			m_writer.WriteStartElement("default", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dropDownFormField.DefaultDropDownValue.ToString());
			m_writer.WriteEndElement();
			foreach (WDropDownItem dropDownItem in dropDownFormField.DropDownItems)
			{
				m_writer.WriteStartElement("listEntry", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dropDownItem.Text);
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeCheckBoxField(WCheckBox checkBox)
	{
		FieldStack.Push(checkBox);
		m_writer.WriteStartElement("r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeCharacterFormat(checkBox.CharacterFormat);
		m_writer.WriteStartElement("fldChar", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", "fldCharType", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "begin");
		if (checkBox.HasFFData)
		{
			m_writer.WriteStartElement("ffData", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeFormFieldData(checkBox);
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeTextFormField(WTextFormField textFormField)
	{
		FieldStack.Push(textFormField);
		m_writer.WriteStartElement("r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeCharacterFormat(textFormField.CharacterFormat);
		m_writer.WriteStartElement("fldChar", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", "fldCharType", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "begin");
		if (textFormField.HasFFData)
		{
			m_writer.WriteStartElement("ffData", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeFormFieldData(textFormField);
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeFormFieldData(WFormField field)
	{
		if (field.Name != "")
		{
			m_writer.WriteStartElement("name", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", field.Name);
			m_writer.WriteEndElement();
		}
		if (!field.Enabled)
		{
			m_writer.WriteStartElement("enabled", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
			m_writer.WriteEndElement();
		}
		if (field.CalculateOnExit)
		{
			m_writer.WriteStartElement("calcOnExit", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (field.MacroOnStart != null && field.MacroOnStart.Length > 0)
		{
			m_writer.WriteStartElement("entryMacro", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", field.MacroOnStart);
			m_writer.WriteEndElement();
		}
		if (field.MacroOnEnd != null && field.MacroOnEnd.Length > 0)
		{
			m_writer.WriteStartElement("exitMacro", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", field.MacroOnEnd);
			m_writer.WriteEndElement();
		}
		if (field.Help != "")
		{
			m_writer.WriteStartElement("helpText", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if ((field.Params & 0x80) == 128)
			{
				m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "text");
			}
			else
			{
				m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "autoText");
			}
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", field.Help);
			m_writer.WriteEndElement();
		}
		if (field.StatusBarHelp != "")
		{
			m_writer.WriteStartElement("statusText", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if ((field.Params & 0x100) == 256)
			{
				m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "text");
			}
			else
			{
				m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "autoText");
			}
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", field.StatusBarHelp);
			m_writer.WriteEndElement();
		}
		switch (field.FieldType)
		{
		case FieldType.FieldFormTextInput:
		{
			WTextFormField wTextFormField = field as WTextFormField;
			m_writer.WriteStartElement("textInput", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			switch (wTextFormField.Type)
			{
			case TextFormFieldType.RegularText:
				m_writer.WriteStartElement("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "regular");
				m_writer.WriteEndElement();
				break;
			case TextFormFieldType.NumberText:
				m_writer.WriteStartElement("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "number");
				m_writer.WriteEndElement();
				break;
			case TextFormFieldType.DateText:
				m_writer.WriteStartElement("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "date");
				m_writer.WriteEndElement();
				break;
			case TextFormFieldType.CurrentDateText:
				m_writer.WriteStartElement("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "currentDate");
				m_writer.WriteEndElement();
				break;
			case TextFormFieldType.CurrentTimeText:
				m_writer.WriteStartElement("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "currentTime");
				m_writer.WriteEndElement();
				break;
			case TextFormFieldType.Calculation:
				m_writer.WriteStartElement("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "calculated");
				m_writer.WriteEndElement();
				break;
			}
			m_writer.WriteStartElement("default", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", wTextFormField.DefaultText);
			m_writer.WriteEndElement();
			if (wTextFormField.MaximumLength > 0)
			{
				m_writer.WriteStartElement("maxLength", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", wTextFormField.MaximumLength.ToString());
				m_writer.WriteEndElement();
			}
			m_writer.WriteStartElement("format", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (wTextFormField.Type == TextFormFieldType.RegularText)
			{
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", wTextFormField.TextFormat.ToString());
			}
			else
			{
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", wTextFormField.StringFormat);
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			break;
		}
		case FieldType.FieldFormCheckBox:
		{
			WCheckBox wCheckBox = field as WCheckBox;
			m_writer.WriteStartElement("checkBox", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (wCheckBox.SizeType == CheckBoxSizeType.Auto)
			{
				m_writer.WriteStartElement("sizeAuto", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
			}
			else
			{
				m_writer.WriteStartElement("size", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (wCheckBox.CheckBoxSize * 2).ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			m_writer.WriteStartElement("default", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			string value = (wCheckBox.DefaultCheckBoxValue ? "true" : "false");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value);
			m_writer.WriteEndElement();
			if (wCheckBox.Checked)
			{
				m_writer.WriteStartElement("checked", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
			}
			else if (wCheckBox.DefaultCheckBoxValue && !wCheckBox.Checked)
			{
				m_writer.WriteStartElement("checked", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
			break;
		}
		}
	}

	private void SerializeTextboxes(WTextBoxCollection textboxes)
	{
		foreach (WTextBox textbox in textboxes)
		{
			SerializeTextBox(textbox);
		}
	}

	private void SerializeTextBox(WTextBox textBox)
	{
		m_writer.WriteStartElement("r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeCharacterFormat(textBox.CharacterFormat);
		if (textBox.IsShape)
		{
			m_writer.WriteStartElement("AlternateContent", "http://schemas.openxmlformats.org/markup-compatibility/2006");
			m_writer.WriteStartElement("Choice", "http://schemas.openxmlformats.org/markup-compatibility/2006");
			m_writer.WriteAttributeString("Requires", "wps");
			m_writer.WriteStartElement("drawing", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			IsSerializingChoiceContent = true;
			if (textBox.Shape.WrapFormat.TextWrappingStyle != 0 && IsNotShapeFieldResult())
			{
				SerializeAbsolutePicture(textBox);
			}
			else
			{
				SerializeInlinePicture(textBox);
			}
			IsSerializingChoiceContent = false;
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			m_writer.WriteStartElement("Fallback", "http://schemas.openxmlformats.org/markup-compatibility/2006");
			m_isFallBack = true;
		}
		m_writer.WriteStartElement("pict", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
		m_writer.WriteAttributeString("id", textBox.Name);
		if (string.IsNullOrEmpty(textBox.TextBoxFormat.Path))
		{
			m_writer.WriteAttributeString("type", "#_x0000_t202");
		}
		SerializeTextBoxFormat(textBox.Visible, textBox.TextBoxFormat);
		SerializeFillEffects(textBox);
		m_writer.WriteStartElement("textbox", "urn:schemas-microsoft-com:vml");
		StringBuilder stringBuilder = new StringBuilder();
		if (textBox.TextBoxFormat.AutoFit)
		{
			stringBuilder.Append("mso-fit-shape-to-text:t;");
		}
		stringBuilder.Append(SerializeFallbackTextDirection(textBox.TextBoxFormat.TextDirection));
		m_writer.WriteAttributeString("style", stringBuilder.ToString());
		SerializeInsetAttribute(textBox);
		m_writer.WriteStartElement("txbxContent", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		for (int i = 0; i < textBox.TextBoxBody.Items.Count; i++)
		{
			SerializeBodyItem(textBox.TextBoxBody.Items[i], isLastSection: false);
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		if (textBox.IsShape)
		{
			m_writer.WriteEndElement();
			m_isFallBack = false;
			m_writer.WriteEndElement();
		}
	}

	private string SerializeFallbackTextDirection(TextDirection textDirection)
	{
		return textDirection switch
		{
			TextDirection.VerticalTopToBottom => "layout-flow:vertical", 
			TextDirection.VerticalBottomToTop => "layout-flow:vertical;mso-layout-flow-alt:bottom-to-top", 
			TextDirection.Vertical => "layout-flow:vertical;mso-layout-flow-alt:top-to-bottom", 
			TextDirection.VerticalFarEast => "layout-flow:vertical-ideographic", 
			TextDirection.HorizontalFarEast => "layout-flow:horizontal-ideographic", 
			_ => string.Empty, 
		};
	}

	private void SerializeFillEffects(WTextBox textBox)
	{
		Background fillEfects = textBox.TextBoxFormat.FillEfects;
		if (fillEfects.PatternFill != null)
		{
			bool isHeaderFooter = false;
			if (textBox.OwnerParagraph != null)
			{
				isHeaderFooter = textBox.OwnerParagraph.Owner is HeaderFooter;
			}
			SerializePatternFill(textBox, isHeaderFooter);
		}
		else if (fillEfects.Type != 0 && fillEfects.Type != BackgroundType.Color)
		{
			m_writer.WriteStartElement("fill", "urn:schemas-microsoft-com:vml");
			if ((fillEfects.Type == BackgroundType.Picture || fillEfects.Type == BackgroundType.Texture) && fillEfects.ImageBytes != null)
			{
				SerializePictureFill(textBox);
			}
			else if (fillEfects.Type == BackgroundType.Gradient)
			{
				SerializeGradientFill(textBox.TextBoxFormat.FillEfects.Gradient);
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeGradientFill(BackgroundGradient backgroundGradient)
	{
		SerializeGradientColor(backgroundGradient);
		SerializeGradientShadings(backgroundGradient);
	}

	private void SerializePictureFill(WTextBox textBox)
	{
		Entity baseEntity = textBox.GetBaseEntity(textBox);
		Background fillEfects = textBox.TextBoxFormat.FillEfects;
		string value = string.Empty;
		WPicture wPicture = new WPicture(textBox.Document);
		if (fillEfects.ImageBytes != null)
		{
			wPicture.LoadImage(fillEfects.ImageBytes);
		}
		UpdateImages(wPicture);
		if (baseEntity is WSection)
		{
			value = AddImageRelation(DocumentImages, wPicture.ImageRecord, IsNeedToSkipImageRelation(wPicture));
		}
		else if (baseEntity is HeaderFooter)
		{
			value = UpdateHFImageRels(baseEntity as HeaderFooter, wPicture);
		}
		m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", value);
		if (fillEfects.Type == BackgroundType.Picture)
		{
			m_writer.WriteAttributeString("type", "frame");
		}
		else
		{
			m_writer.WriteAttributeString("type", "tile");
		}
	}

	private void SerializePatternFill(WTextBox textBox, bool isHeaderFooter)
	{
		Background fillEfects = textBox.TextBoxFormat.FillEfects;
		string empty = string.Empty;
		if (fillEfects.PatternImageBytes != null)
		{
			WPicture wPicture = new WPicture(m_document);
			wPicture.LoadImage(fillEfects.PatternImageBytes);
			if (isHeaderFooter)
			{
				HeaderFooter hf = textBox.OwnerParagraph.Owner as HeaderFooter;
				empty = UpdateHFImageRels(hf, wPicture);
			}
			else
			{
				empty = AddImageRelation(DocumentImages, wPicture.ImageRecord, IsNeedToSkipImageRelation(wPicture));
			}
			m_hasImages = true;
			Stream stream = SetIDAttribute(fillEfects.PatternFill, empty);
			XmlReader reader = CreateReader(stream);
			m_writer.WriteNode(reader, defattr: false);
		}
		else
		{
			XmlReader reader2 = CreateReader(fillEfects.PatternFill);
			m_writer.WriteNode(reader2, defattr: false);
		}
	}

	private Stream SetIDAttribute(Stream inputStream, string relationId)
	{
		inputStream.Position = 0L;
		XmlReader xmlReader = DocGen.DocIO.DLS.Convertors.UtilityMethods.CreateReader(inputStream);
		MemoryStream memoryStream = new MemoryStream((int)inputStream.Length);
		XmlWriter xmlWriter = DocGen.DocIO.DLS.Convertors.UtilityMethods.CreateWriter(memoryStream, Encoding.UTF8);
		bool flag = false;
		bool flag2 = false;
		do
		{
			bool flag3 = false;
			switch (xmlReader.NodeType)
			{
			case XmlNodeType.Element:
				xmlWriter.WriteStartElement(xmlReader.Prefix, xmlReader.LocalName, xmlReader.NamespaceURI);
				SetRelationshipIDAttribute(xmlReader, xmlWriter, relationId);
				xmlReader.MoveToElement();
				if (!xmlReader.IsEmptyElement)
				{
					string localName = xmlReader.LocalName;
					xmlReader.Read();
					flag3 = true;
					if (localName == xmlReader.LocalName && xmlReader.NodeType == XmlNodeType.EndElement)
					{
						xmlWriter.WriteEndElement();
						flag2 = true;
					}
					else
					{
						flag2 = false;
					}
				}
				else
				{
					xmlWriter.WriteEndElement();
					flag2 = false;
				}
				break;
			case XmlNodeType.Text:
				xmlWriter.WriteString(xmlReader.Value);
				flag2 = false;
				break;
			case XmlNodeType.EndElement:
				if (!flag2)
				{
					xmlWriter.WriteEndElement();
				}
				else
				{
					flag2 = false;
				}
				break;
			case XmlNodeType.SignificantWhitespace:
				xmlWriter.WriteWhitespace(xmlReader.Value);
				flag2 = false;
				break;
			default:
				flag2 = false;
				break;
			}
			flag = xmlReader.EOF;
			if (!flag3 && !flag)
			{
				xmlReader.Read();
			}
		}
		while (!flag);
		xmlWriter.Flush();
		memoryStream.Flush();
		return memoryStream;
	}

	private void SetRelationshipIDAttribute(XmlReader reader, XmlWriter writer, string relationId)
	{
		for (int i = 0; i < reader.AttributeCount; i++)
		{
			reader.MoveToAttribute(i);
			string localName = reader.LocalName;
			if (localName == "id" || localName == "href")
			{
				if (reader.Value.Length > 0)
				{
					writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, relationId);
				}
				else
				{
					writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
				}
			}
			else
			{
				writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
			}
		}
	}

	private bool IsNotShapeFieldResult()
	{
		if (CurrentField != null)
		{
			return CurrentField.FieldType != FieldType.FieldShape;
		}
		return true;
	}

	private void SerializeTextBoxFormat(bool visible, WTextBoxFormat textBoxFormat)
	{
		string text = string.Empty;
		string text2 = string.Empty;
		string text3 = string.Empty;
		string text4 = string.Empty;
		string empty = string.Empty;
		StringBuilder stringBuilder = new StringBuilder();
		if (textBoxFormat.HorizontalOrigin != HorizontalOrigin.Column)
		{
			text = GetHorizOriginAsString(textBoxFormat.HorizontalOrigin);
		}
		if (textBoxFormat.VerticalOrigin != VerticalOrigin.Paragraph)
		{
			text3 = GetVerticalOrginAsString(textBoxFormat.VerticalOrigin, isShapeStyle: true);
		}
		if (textBoxFormat.HorizontalAlignment != 0)
		{
			text2 = textBoxFormat.HorizontalAlignment.ToString().ToLower();
		}
		if (textBoxFormat.VerticalAlignment != 0)
		{
			text4 = textBoxFormat.VerticalAlignment.ToString().ToLower();
		}
		empty = textBoxFormat.TextVerticalAlignment.ToString().ToLower();
		if (textBoxFormat.TextWrappingStyle != 0 && IsNotShapeFieldResult())
		{
			stringBuilder.Append("position:absolute;");
		}
		stringBuilder.Append("margin-left:");
		stringBuilder.Append(textBoxFormat.HorizontalPosition.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;margin-top:");
		stringBuilder.Append(textBoxFormat.VerticalPosition.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;width:");
		stringBuilder.Append(textBoxFormat.Width.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;height:");
		stringBuilder.Append(textBoxFormat.Height.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;");
		if (textBoxFormat.Rotation != 0f)
		{
			stringBuilder.Append("rotation:");
			stringBuilder.Append(((long)GetRotationAngle(textBoxFormat.Rotation)).ToString(CultureInfo.InvariantCulture));
			stringBuilder.Append(";");
		}
		if (textBoxFormat.FlipHorizontal && textBoxFormat.FlipVertical)
		{
			stringBuilder.Append("flip:x y;");
		}
		else if (textBoxFormat.FlipHorizontal)
		{
			stringBuilder.Append("flip:x;");
		}
		else if (textBoxFormat.FlipVertical)
		{
			stringBuilder.Append("flip:y;");
		}
		if (textBoxFormat.OrderIndex != int.MaxValue)
		{
			if (textBoxFormat.OrderIndex > 0 && textBoxFormat.IsBelowText)
			{
				stringBuilder.Append("z-index:-" + textBoxFormat.OrderIndex + ";");
			}
			else
			{
				stringBuilder.Append("z-index:" + textBoxFormat.OrderIndex + ";");
			}
		}
		else if (textBoxFormat.IsBelowText)
		{
			stringBuilder.Append("z-index:-251658752;");
		}
		if (!visible)
		{
			stringBuilder.Append("visibility:");
			stringBuilder.Append("hidden");
		}
		if (text.Length != 0)
		{
			stringBuilder.Append("mso-position-horizontal-relative:");
			stringBuilder.Append(text);
		}
		if (text3.Length != 0)
		{
			stringBuilder.Append(";mso-position-vertical-relative:");
			stringBuilder.Append(text3);
		}
		if (text2.Length != 0)
		{
			stringBuilder.Append(";mso-position-horizontal:");
			stringBuilder.Append(text2);
		}
		if (text4.Length != 0)
		{
			stringBuilder.Append(";mso-position-vertical:");
			stringBuilder.Append(text4);
		}
		if (textBoxFormat.WidthRelativePercent != 0f)
		{
			stringBuilder.Append(";mso-width-percent:" + (textBoxFormat.WidthRelativePercent * 10f).ToString(CultureInfo.InvariantCulture));
			stringBuilder.Append(";mso-width-relative:" + GetWidthOrigin(textBoxFormat.WidthOrigin));
		}
		if (textBoxFormat.HeightRelativePercent != 0f)
		{
			stringBuilder.Append(";mso-height-percent:" + (textBoxFormat.HeightRelativePercent * 10f).ToString(CultureInfo.InvariantCulture));
			stringBuilder.Append(";mso-height-relative:" + GetHeightOrigin(textBoxFormat.HeightOrigin));
		}
		if (empty.Length != 0)
		{
			stringBuilder.Append(";v-text-anchor:");
			stringBuilder.Append(empty);
		}
		if (textBoxFormat.HorizontalRelativePercent != float.MinValue)
		{
			stringBuilder.Append(";mso-left-percent:");
			stringBuilder.Append(textBoxFormat.HorizontalRelativePercent * 10f);
		}
		if (textBoxFormat.VerticalRelativePercent != float.MinValue)
		{
			stringBuilder.Append(";mso-top-percent:");
			stringBuilder.Append(textBoxFormat.VerticalRelativePercent * 10f);
		}
		stringBuilder.Append(";mso-wrap-distance-left:");
		stringBuilder.Append(textBoxFormat.WrapDistanceLeft.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;mso-wrap-distance-top:");
		stringBuilder.Append(textBoxFormat.WrapDistanceTop.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;mso-wrap-distance-right:");
		stringBuilder.Append(textBoxFormat.WrapDistanceRight.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;mso-wrap-distance-bottom:");
		stringBuilder.Append(textBoxFormat.WrapDistanceBottom.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;");
		string textBoxWrapType = GetTextBoxWrapType(textBoxFormat);
		if (!string.IsNullOrEmpty(textBoxWrapType))
		{
			stringBuilder.Append("mso-wrap-style:" + textBoxWrapType);
		}
		if (textBoxFormat.HasDocxProps)
		{
			foreach (string docxStyleProp in textBoxFormat.DocxStyleProps)
			{
				if (!docxStyleProp.Contains("mso-wrap-distance-left") && !docxStyleProp.Contains("mso-wrap-distance-top") && !docxStyleProp.Contains("mso-wrap-distance-right") && !docxStyleProp.Contains("mso-wrap-distance-bottom"))
				{
					stringBuilder.Append(";" + docxStyleProp);
				}
			}
		}
		m_writer.WriteAttributeString("style", stringBuilder.ToString());
		if (!string.IsNullOrEmpty(textBoxFormat.CoordinateSize))
		{
			m_writer.WriteAttributeString("coordsize", textBoxFormat.CoordinateSize);
		}
		if (textBoxFormat.CoordinateXOrigin != 0f && textBoxFormat.CoordinateYOrigin != 0f)
		{
			string value = textBoxFormat.CoordinateXOrigin.ToString(CultureInfo.InvariantCulture) + "," + textBoxFormat.CoordinateYOrigin.ToString(CultureInfo.InvariantCulture);
			if (!string.IsNullOrEmpty(value))
			{
				m_writer.WriteAttributeString("coordorigin", value);
			}
		}
		if (!string.IsNullOrEmpty(textBoxFormat.Path))
		{
			m_writer.WriteAttributeString("path", textBoxFormat.Path);
		}
		if (textBoxFormat.TextWrappingStyle == TextWrappingStyle.Through || textBoxFormat.TextWrappingStyle == TextWrappingStyle.Tight)
		{
			StringBuilder stringBuilder2 = new StringBuilder();
			foreach (PointF vertex in textBoxFormat.WrapPolygon.Vertices)
			{
				stringBuilder2.Append(vertex.X.ToString(CultureInfo.InvariantCulture) + " ");
				stringBuilder2.Append(vertex.Y.ToString(CultureInfo.InvariantCulture) + " ");
			}
			m_writer.WriteAttributeString("wrapcoords", stringBuilder2.ToString());
		}
		if (textBoxFormat.FillEfects.Type == BackgroundType.Color || textBoxFormat.FillEfects.Type == BackgroundType.Gradient)
		{
			Color empty2 = Color.Empty;
			empty2 = ((textBoxFormat.FillEfects.Type != BackgroundType.Gradient) ? textBoxFormat.FillColor : textBoxFormat.FillEfects.Gradient.Color1);
			if (empty2 == Color.Empty)
			{
				m_writer.WriteAttributeString("filled", "f");
			}
			else
			{
				m_writer.WriteAttributeString("fillcolor", "#" + GetRGBCode(empty2));
			}
		}
		if (textBoxFormat.LineColor != Color.Empty)
		{
			m_writer.WriteAttributeString("strokecolor", "#" + GetRGBCode(textBoxFormat.LineColor));
		}
		if (textBoxFormat.LineWidth > 0f)
		{
			m_writer.WriteAttributeString("strokeweight", textBoxFormat.LineWidth.ToString(CultureInfo.InvariantCulture) + "pt");
		}
		if (!textBoxFormat.AllowInCell)
		{
			m_writer.WriteAttributeString("allowincell", "urn:schemas-microsoft-com:office:office", "f");
		}
		if (!textBoxFormat.AllowOverlap)
		{
			m_writer.WriteAttributeString("allowoverlap", "urn:schemas-microsoft-com:office:office", "f");
		}
		if (textBoxFormat.NoLine)
		{
			m_writer.WriteAttributeString("stroked", "f");
		}
		else
		{
			SerializeStroke(textBoxFormat);
		}
		if (textBoxFormat.DocxProps.Count > 0)
		{
			SerializeDocxProps(textBoxFormat.DocxProps, "shadow");
		}
		if (textBoxFormat.TextWrappingStyle != TextWrappingStyle.InFrontOfText && textBoxFormat.TextWrappingStyle != TextWrappingStyle.Behind)
		{
			m_writer.WriteStartElement("wrap", "urn:schemas-microsoft-com:office:word");
			m_writer.WriteAttributeString("type", GetTextWrappingStyleAsString(textBoxFormat.TextWrappingStyle));
			if (textBoxFormat.TextWrappingType != 0)
			{
				m_writer.WriteAttributeString("side", GetTextWrappingTypeAsString(textBoxFormat.TextWrappingType));
			}
			m_writer.WriteEndElement();
		}
	}

	private string GetTextBoxWrapType(WTextBoxFormat textBoxFormat)
	{
		return textBoxFormat.WrappingMode switch
		{
			WrapMode.Square => "square", 
			WrapMode.Through => "through", 
			WrapMode.TopBottom => "top-and-bottom", 
			WrapMode.None => "none", 
			_ => string.Empty, 
		};
	}

	private string GetHeightOrigin(HeightOrigin rel)
	{
		return rel switch
		{
			HeightOrigin.Page => "page", 
			HeightOrigin.TopMargin => "top-margin-area", 
			HeightOrigin.InsideMargin => "inner-margin-area", 
			HeightOrigin.OutsideMargin => "outer-margin-area", 
			HeightOrigin.BottomMargin => "bottom-margin-area", 
			_ => "margin", 
		};
	}

	private string GetWidthOrigin(WidthOrigin rel)
	{
		return rel switch
		{
			WidthOrigin.Page => "page", 
			WidthOrigin.LeftMargin => "left-margin-area", 
			WidthOrigin.InsideMargin => "inner-margin-area", 
			WidthOrigin.OutsideMargin => "outer-margin-area", 
			WidthOrigin.RightMargin => "right-margin-area", 
			_ => "margin", 
		};
	}

	private string GetTextWrappingTypeAsString(TextWrappingType textWrappingType)
	{
		return textWrappingType switch
		{
			TextWrappingType.Left => "left", 
			TextWrappingType.Right => "right", 
			_ => "largest", 
		};
	}

	private string GetTextWrappingStyleAsString(TextWrappingStyle textWrappingStyle)
	{
		return textWrappingStyle switch
		{
			TextWrappingStyle.Inline => "none", 
			TextWrappingStyle.Tight => "tight", 
			TextWrappingStyle.TopAndBottom => "topAndBottom", 
			TextWrappingStyle.Through => "through", 
			_ => "square", 
		};
	}

	private void SerializeStroke(WTextBoxFormat textBoxFormat)
	{
		string dashStyle = GetDashStyle(textBoxFormat.LineDashing, is2007: true);
		string lineStyle = GetLineStyle(textBoxFormat.LineStyle, is2007: true);
		if (dashStyle != null || lineStyle != null)
		{
			m_writer.WriteStartElement("stroke", "urn:schemas-microsoft-com:vml");
			if (dashStyle != null)
			{
				m_writer.WriteAttributeString("dashstyle", dashStyle);
			}
			if (lineStyle != null)
			{
				m_writer.WriteAttributeString("linestyle", lineStyle);
			}
			m_writer.WriteEndElement();
		}
	}

	private string GetDashStyle(LineDashing lineDashing, bool is2007)
	{
		switch (lineDashing)
		{
		case LineDashing.Solid:
			return "solid";
		case LineDashing.Dash:
			return "sysDash";
		case LineDashing.DashDot:
			return "sysDashDot";
		case LineDashing.DashDotDot:
			return "sysDashDotDot";
		case LineDashing.Dot:
			return "sysDot";
		case LineDashing.DashGEL:
			return "dash";
		case LineDashing.DashDotGEL:
			return "dashDot";
		case LineDashing.DotGEL:
			if (!is2007)
			{
				return "dot";
			}
			return "1 1";
		case LineDashing.LongDashGEL:
			if (!is2007)
			{
				return "lgDash";
			}
			return "longDash";
		case LineDashing.LongDashDotGEL:
			if (!is2007)
			{
				return "lgDashDot";
			}
			return "longDashDot";
		case LineDashing.LongDashDotDotGEL:
			if (!is2007)
			{
				return "lgDashDotDot";
			}
			return "longDashDotDot";
		default:
			return null;
		}
	}

	private string GetLineStyle(TextBoxLineStyle lineStyle, bool is2007)
	{
		switch (lineStyle)
		{
		case TextBoxLineStyle.Double:
			if (!is2007)
			{
				return "dbl";
			}
			return "thinThin";
		case TextBoxLineStyle.ThinThick:
			return "thinThick";
		case TextBoxLineStyle.ThickThin:
			return "thickThin";
		case TextBoxLineStyle.Triple:
			if (!is2007)
			{
				return "tri";
			}
			return "thickBetweenThin";
		default:
			if (!is2007)
			{
				return "sng";
			}
			return "single";
		}
	}

	private void SerializeInsetAttribute(WTextBox textBox)
	{
		float num = textBox.TextBoxFormat.InternalMargin.Left;
		if (num != 0f)
		{
			num = (float)Math.Round(num, 3);
		}
		float num2 = textBox.TextBoxFormat.InternalMargin.Right;
		if (num2 != 0f)
		{
			num2 = (float)Math.Round(num2, 3);
		}
		float num3 = textBox.TextBoxFormat.InternalMargin.Top;
		if (num3 != 0f)
		{
			num3 = (float)Math.Round(num3, 3);
		}
		float num4 = textBox.TextBoxFormat.InternalMargin.Bottom;
		if (num4 != 0f)
		{
			num4 = (float)Math.Round(num4, 3);
		}
		string empty = string.Empty;
		empty = empty + XmlConvert.ToString(num) + "pt,";
		empty = empty + XmlConvert.ToString(num3) + "pt,";
		empty = empty + XmlConvert.ToString(num2) + "pt,";
		empty = empty + XmlConvert.ToString(num4) + "pt";
		m_writer.WriteAttributeString("inset", empty);
	}

	private void SerializeInsetAttribute(TextFrame textFrame)
	{
		float num = textFrame.InternalMargin.Left;
		if (num != 0f)
		{
			num = (float)Math.Round(num, 3);
		}
		float num2 = textFrame.InternalMargin.Right;
		if (num2 != 0f)
		{
			num2 = (float)Math.Round(num2, 3);
		}
		float num3 = textFrame.InternalMargin.Top;
		if (num3 != 0f)
		{
			num3 = (float)Math.Round(num3, 3);
		}
		float num4 = textFrame.InternalMargin.Bottom;
		if (num4 != 0f)
		{
			num4 = (float)Math.Round(num4, 3);
		}
		string empty = string.Empty;
		empty = empty + XmlConvert.ToString(num) + "pt,";
		empty = empty + XmlConvert.ToString(num3) + "pt,";
		empty = empty + XmlConvert.ToString(num2) + "pt,";
		empty = empty + XmlConvert.ToString(num4) + "pt";
		m_writer.WriteAttributeString("inset", empty);
	}

	private void SerializeXmlParagraphItem(XmlParagraphItem item, bool isInGroupShape)
	{
		if (m_document.DocxPackage != null)
		{
			Stream stream;
			if (item.Relations.Count == 0 && item.ImageRelations.Count == 0)
			{
				List<string> relationIds = new List<string>();
				stream = ChangeIDAttribute(item.DataNode, ref relationIds, item);
			}
			else
			{
				stream = ChangeItemRel(item);
			}
			if (item.ImageRelations.Count > 0)
			{
				MemoryStream memoryStream = new MemoryStream();
				SerializeImagesRelations(memoryStream, item.ImageRelations, item);
				memoryStream.Close();
			}
			XmlReader xmlReader = CreateReader(stream);
			if (xmlReader.LocalName == "oMath" || xmlReader.LocalName == "oMathPara" || isInGroupShape)
			{
				m_writer.WriteNode(xmlReader, defattr: false);
				return;
			}
			m_writer.WriteStartElement("r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeCharacterFormat(item.CharacterFormat);
			m_writer.WriteNode(xmlReader, defattr: false);
			m_writer.WriteEndElement();
		}
	}

	private Stream UpdateXMLRelation(Shape shape, Stream stream)
	{
		Stream stream2 = stream;
		if (shape.Relations.Count == 0 && shape.ImageRelations.Count == 0)
		{
			List<string> relationIds = new List<string>();
			return ChangeIDAttribute(stream, ref relationIds, null);
		}
		return ChangeItemRel(shape, stream);
	}

	private Stream UpdateXMLRelation(ChildShape shape, Stream stream)
	{
		Stream stream2 = stream;
		if (shape.Relations.Count == 0 && shape.ImageRelations.Count == 0)
		{
			List<string> relationIds = new List<string>();
			return ChangeIDAttribute(stream, ref relationIds, null);
		}
		return ChangeItemRel(shape, stream);
	}

	private Stream ChangeItemRel(Shape shape, Stream shapestream)
	{
		List<string> relationIds = new List<string>();
		List<string> list = FindRelationshipIds(shapestream);
		Stream result = ChangeIDAttribute(shapestream, ref relationIds, null);
		int i = 0;
		for (int count = list.Count; i < count; i++)
		{
			string text = list[i];
			string newID = relationIds[i];
			if (shape.ImageRelations.ContainsKey(text))
			{
				ChangePicRel(shape, text, newID);
				continue;
			}
			DictionaryEntry itemRel = shape.Relations[text];
			string text2 = itemRel.Key.ToString();
			UpdateItemRelation(shape, newID, itemRel);
			switch (text2)
			{
			case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart":
			case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/control":
				AddXmlItemContType(text2, itemRel.Value.ToString());
				break;
			case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/oleObject":
			case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/package":
				m_hasOleObject = true;
				UpdateOleContentType(shapestream);
				break;
			default:
				m_hasDiagrams = true;
				break;
			}
		}
		return result;
	}

	private Stream ChangeItemRel(ChildShape shape, Stream shapestream)
	{
		List<string> relationIds = new List<string>();
		List<string> list = FindRelationshipIds(shapestream);
		Stream result = ChangeIDAttribute(shapestream, ref relationIds, null);
		int i = 0;
		for (int count = list.Count; i < count; i++)
		{
			string text = list[i];
			string newID = relationIds[i];
			if (shape.ImageRelations.ContainsKey(text))
			{
				ChangePicRel(shape, text, newID);
				continue;
			}
			DictionaryEntry itemRel = shape.Relations[text];
			string text2 = itemRel.Key.ToString();
			UpdateItemRelation(shape, newID, itemRel);
			switch (text2)
			{
			case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart":
			case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/control":
				AddXmlItemContType(text2, itemRel.Value.ToString());
				break;
			case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/oleObject":
			case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/package":
				m_hasOleObject = true;
				UpdateOleContentType(shapestream);
				break;
			default:
				m_hasDiagrams = true;
				break;
			}
		}
		return result;
	}

	private void ChangePicRel(Shape shape, string oldID, string newID)
	{
		ImageRecord imageRecord = null;
		if (!shape.ImageRelations.ContainsKey(oldID))
		{
			return;
		}
		imageRecord = shape.ImageRelations[oldID];
		Entity baseEntity = shape.GetBaseEntity(shape);
		if (baseEntity is HeaderFooter)
		{
			HeaderFooter hf = baseEntity as HeaderFooter;
			UpdateHFImageRels(newID, hf, imageRecord);
		}
		else if (baseEntity.Owner != null && baseEntity.Owner is HeaderFooter)
		{
			HeaderFooter hf2 = baseEntity.Owner as HeaderFooter;
			UpdateHFImageRels(newID, hf2, imageRecord);
		}
		else if (baseEntity is WFootnote)
		{
			if ((baseEntity as WFootnote).FootnoteType == FootnoteType.Footnote)
			{
				FootnoteImages.Add(newID, imageRecord);
			}
			else
			{
				EndnoteImages.Add(newID, imageRecord);
			}
		}
		else if (baseEntity is WComment)
		{
			CommentImages.Add(newID, imageRecord);
		}
		else
		{
			DocumentImages.Add(newID, imageRecord);
		}
		if (imageRecord.IsMetafile)
		{
			m_hasMetafiles = true;
		}
		else
		{
			m_hasImages = true;
		}
	}

	private void ChangePicRel(ChildShape shape, string oldID, string newID)
	{
		ImageRecord imageRecord = null;
		if (!shape.ImageRelations.ContainsKey(oldID))
		{
			return;
		}
		imageRecord = shape.ImageRelations[oldID];
		Entity baseEntity = GetBaseEntity(shape);
		if (baseEntity is HeaderFooter)
		{
			HeaderFooter hf = baseEntity as HeaderFooter;
			UpdateHFImageRels(newID, hf, imageRecord);
		}
		else if (baseEntity.Owner != null && baseEntity.Owner is HeaderFooter)
		{
			HeaderFooter hf2 = baseEntity.Owner as HeaderFooter;
			UpdateHFImageRels(newID, hf2, imageRecord);
		}
		else if (baseEntity is WFootnote)
		{
			if ((baseEntity as WFootnote).FootnoteType == FootnoteType.Footnote)
			{
				FootnoteImages.Add(newID, imageRecord);
			}
			else
			{
				EndnoteImages.Add(newID, imageRecord);
			}
		}
		else if (baseEntity is WComment)
		{
			CommentImages.Add(newID, imageRecord);
		}
		else
		{
			DocumentImages.Add(newID, imageRecord);
		}
		if (imageRecord.IsMetafile)
		{
			m_hasMetafiles = true;
		}
		else
		{
			m_hasImages = true;
		}
	}

	private Stream ChangeItemRel(XmlParagraphItem item)
	{
		List<string> relationIds = new List<string>();
		List<string> list = FindRelationshipIds(item.DataNode);
		Stream result = ChangeIDAttribute(item.DataNode, ref relationIds, item);
		int i = 0;
		for (int count = list.Count; i < count; i++)
		{
			string text = list[i];
			string newID = relationIds[i];
			if (item.ImageRelations.ContainsKey(text) && !item.HasNestedImageRelations)
			{
				ChangePicRel(item, text, newID);
				continue;
			}
			DictionaryEntry itemRel = item.Relations[text];
			string text2 = itemRel.Key.ToString();
			UpdateItemRelation(item, newID, itemRel);
			switch (text2)
			{
			case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart":
			case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/control":
				AddXmlItemContType(text2, itemRel.Value.ToString());
				break;
			case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/oleObject":
			case "http://schemas.openxmlformats.org/officeDocument/2006/relationships/package":
				m_hasOleObject = true;
				UpdateOleContentType(item.DataNode);
				break;
			default:
				m_hasDiagrams = true;
				break;
			}
		}
		return result;
	}

	private void ChangePicRel(XmlParagraphItem item, string oldID, string newID)
	{
		ImageRecord imageRecord = null;
		if (!item.ImageRelations.ContainsKey(oldID))
		{
			return;
		}
		imageRecord = item.ImageRelations[oldID];
		Entity xmlItemOwner = GetXmlItemOwner(item);
		if (xmlItemOwner is HeaderFooter)
		{
			HeaderFooter hf = xmlItemOwner as HeaderFooter;
			UpdateHFImageRels(newID, hf, imageRecord);
		}
		else if (xmlItemOwner.Owner != null && xmlItemOwner.Owner is HeaderFooter)
		{
			HeaderFooter hf2 = xmlItemOwner.Owner as HeaderFooter;
			UpdateHFImageRels(newID, hf2, imageRecord);
		}
		else if (xmlItemOwner is WFootnote)
		{
			if ((xmlItemOwner as WFootnote).FootnoteType == FootnoteType.Footnote)
			{
				FootnoteImages.Add(newID, imageRecord);
			}
			else
			{
				EndnoteImages.Add(newID, imageRecord);
			}
		}
		else if (xmlItemOwner is WComment)
		{
			CommentImages.Add(newID, imageRecord);
		}
		else
		{
			DocumentImages.Add(newID, imageRecord);
		}
		if (imageRecord.IsMetafile)
		{
			m_hasMetafiles = true;
		}
		else
		{
			m_hasImages = true;
		}
	}

	private Entity GetXmlItemOwner(XmlParagraphItem item)
	{
		Entity entity = item.Owner;
		WParagraph wParagraph = null;
		if (item.Owner is WOleObject)
		{
			entity = (item.Owner as WOleObject).OwnerParagraph;
		}
		if (entity.EntityType == EntityType.InlineContentControl)
		{
			wParagraph = entity.Owner.Owner as WParagraph;
		}
		else if (entity.EntityType == EntityType.Paragraph)
		{
			wParagraph = entity as WParagraph;
		}
		WTableCell wTableCell = wParagraph.Owner as WTableCell;
		Entity owner = wParagraph.Owner.Owner;
		Entity entity2 = ((wTableCell == null) ? wParagraph.Owner : wTableCell.OwnerRow.OwnerTable.OwnerTextBody);
		owner = entity2.Owner;
		HeaderFooter headerFooter = ((!(owner is WTextBox) || (owner as WTextBox).OwnerParagraph == null) ? (entity2 as HeaderFooter) : ((owner as WTextBox).OwnerParagraph.OwnerTextBody as HeaderFooter));
		if (headerFooter != null)
		{
			return headerFooter;
		}
		return owner;
	}

	private void UpdateHFXmlRels(string newId, HeaderFooter hf, DictionaryEntry itemRel)
	{
		string headerFooterId = GetHeaderFooterId(hf);
		if (headerFooterId != null)
		{
			Dictionary<string, DictionaryEntry> dictionary = null;
			if (!HFRelations.ContainsKey(headerFooterId))
			{
				dictionary = new Dictionary<string, DictionaryEntry>();
				HFRelations.Add(headerFooterId, dictionary);
			}
			else
			{
				dictionary = HFRelations[headerFooterId];
			}
			dictionary.Add(newId, itemRel);
		}
	}

	private Stream ChangeIDAttribute(Stream inputStream, ref List<string> relationIds, XmlParagraphItem xmlParaItem)
	{
		inputStream.Position = 0L;
		XmlReader xmlReader = DocGen.DocIO.DLS.Convertors.UtilityMethods.CreateReader(inputStream);
		MemoryStream memoryStream = new MemoryStream((int)inputStream.Length);
		XmlWriter xmlWriter = DocGen.DocIO.DLS.Convertors.UtilityMethods.CreateWriter(memoryStream, Encoding.UTF8);
		bool flag = false;
		bool flag2 = false;
		do
		{
			bool flag3 = false;
			switch (xmlReader.NodeType)
			{
			case XmlNodeType.Element:
				xmlWriter.WriteStartElement(xmlReader.Prefix, xmlReader.LocalName, xmlReader.NamespaceURI);
				ChangeRelationshipIDs(xmlReader, xmlWriter, ref relationIds, xmlParaItem);
				xmlReader.MoveToElement();
				if (!xmlReader.IsEmptyElement)
				{
					string localName = xmlReader.LocalName;
					xmlReader.Read();
					flag3 = true;
					if (localName == xmlReader.LocalName && xmlReader.NodeType == XmlNodeType.EndElement)
					{
						xmlWriter.WriteEndElement();
						flag = true;
					}
					else
					{
						flag = false;
					}
				}
				else
				{
					xmlWriter.WriteEndElement();
					flag = false;
				}
				break;
			case XmlNodeType.Text:
				xmlWriter.WriteString(xmlReader.Value);
				flag = false;
				break;
			case XmlNodeType.EndElement:
				if (!flag)
				{
					xmlWriter.WriteEndElement();
				}
				else
				{
					flag = false;
				}
				break;
			case XmlNodeType.SignificantWhitespace:
				xmlWriter.WriteWhitespace(xmlReader.Value);
				flag = false;
				break;
			default:
				flag = false;
				break;
			}
			flag2 = xmlReader.EOF;
			if (!flag3 && !flag2)
			{
				xmlReader.Read();
			}
		}
		while (!flag2);
		xmlWriter.Flush();
		memoryStream.Flush();
		return memoryStream;
	}

	private void ChangeRelationshipIDs(XmlReader reader, XmlWriter writer, ref List<string> relationIds, XmlParagraphItem xmlParaItem)
	{
		if (reader.LocalName == "fill" || reader.LocalName == "chart" || reader.LocalName == "imagedata" || reader.LocalName == "stroke" || reader.LocalName == "control" || reader.LocalName == "OLEObject" || reader.LocalName == "hyperlink" || reader.LocalName == "imageData")
		{
			ChangeRelationshipIDAttribute(reader, writer, ref relationIds);
			return;
		}
		if (reader.LocalName == "arc" || reader.LocalName == "curve" || reader.LocalName == "line" || reader.LocalName == "oval" || reader.LocalName == "polyline" || reader.LocalName == "rect" || reader.LocalName == "roundrect")
		{
			ChangeShapeIDAttribute(reader, writer, xmlParaItem);
			return;
		}
		if (reader.LocalName == "blip")
		{
			ChangeBlipIDAttribute(reader, writer, ref relationIds);
			return;
		}
		if (reader.LocalName == "relIds")
		{
			ChangeRelationIDAttribute(reader, writer, ref relationIds);
			return;
		}
		if (reader.LocalName == "docPr")
		{
			ChangeDocPropertyIDAttribute(reader, writer);
			return;
		}
		if (reader.LocalName == "numId")
		{
			ChangeNumId(reader, writer);
			return;
		}
		for (int i = 0; i < reader.AttributeCount; i++)
		{
			reader.MoveToAttribute(i);
			if (reader.LocalName == "anchor" && reader.Prefix == "relativeHeight" && xmlParaItem != null)
			{
				writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, xmlParaItem.ZOrderIndex.ToString());
			}
			else if ((reader.LocalName == "style" || reader.Prefix == "style") && xmlParaItem != null && !string.IsNullOrEmpty(reader.Value) && reader.Value.Contains("z-index"))
			{
				UpdateZOrderPosition(reader, xmlParaItem, writer);
			}
			else
			{
				writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
			}
		}
	}

	private void ChangeNumId(XmlReader reader, XmlWriter writer)
	{
		for (int i = 0; i < reader.AttributeCount; i++)
		{
			reader.MoveToAttribute(i);
			if (reader.LocalName == "val")
			{
				if (reader.Value.Length > 0)
				{
					if (m_document.ListStyleNames.ContainsKey(reader.Value))
					{
						string styleName = m_document.ListStyleNames[reader.Value];
						string listNumId = GetListNumId(styleName);
						writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, listNumId);
					}
					else
					{
						writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
					}
				}
				else
				{
					writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
				}
			}
			else
			{
				writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
			}
		}
	}

	private string GetListNumId(string styleName)
	{
		int num = 0;
		foreach (ListStyle listStyle in m_document.ListStyles)
		{
			if (listStyle.Name == styleName)
			{
				num++;
				break;
			}
			num++;
		}
		return num.ToString();
	}

	private void ChangeRelationshipIDAttribute(XmlReader reader, XmlWriter writer, ref List<string> relationIds)
	{
		for (int i = 0; i < reader.AttributeCount; i++)
		{
			reader.MoveToAttribute(i);
			string localName = reader.LocalName;
			if (localName == "id" || localName == "href")
			{
				if (reader.Value.Length > 0)
				{
					string nextRelationShipID = GetNextRelationShipID();
					writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, nextRelationShipID);
					relationIds.Add(nextRelationShipID);
				}
				else
				{
					writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
				}
			}
			else
			{
				writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
			}
		}
	}

	private void ChangeBlipIDAttribute(XmlReader reader, XmlWriter writer, ref List<string> relationIds)
	{
		for (int i = 0; i < reader.AttributeCount; i++)
		{
			reader.MoveToAttribute(i);
			if (reader.LocalName == "embed")
			{
				if (reader.Value.Length > 0)
				{
					string nextRelationShipID = GetNextRelationShipID();
					writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, nextRelationShipID);
					relationIds.Add(nextRelationShipID);
				}
				else
				{
					writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
				}
			}
			else
			{
				writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
			}
		}
	}

	private void ChangeRelationIDAttribute(XmlReader reader, XmlWriter writer, ref List<string> relationIds)
	{
		for (int i = 0; i < reader.AttributeCount; i++)
		{
			reader.MoveToAttribute(i);
			switch (reader.LocalName)
			{
			case "dm":
			case "lo":
			case "qs":
			case "cs":
				if (reader.Value.Length > 0)
				{
					string nextRelationShipID = GetNextRelationShipID();
					writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, nextRelationShipID);
					relationIds.Add(nextRelationShipID);
				}
				else
				{
					writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
				}
				break;
			default:
				writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
				break;
			}
		}
	}

	private void ChangeDocPropertyIDAttribute(XmlReader reader, XmlWriter writer)
	{
		for (int i = 0; i < reader.AttributeCount; i++)
		{
			reader.MoveToAttribute(i);
			if (reader.LocalName == "id")
			{
				if (!string.IsNullOrEmpty(reader.Value))
				{
					string value = GetNextDocPrID().ToString();
					writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, value);
				}
				else
				{
					writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
				}
			}
			else
			{
				writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
			}
		}
	}

	private void ChangeShapeIDAttribute(XmlReader reader, XmlWriter writer, XmlParagraphItem xmlParaItem)
	{
		for (int i = 0; i < reader.AttributeCount; i++)
		{
			reader.MoveToAttribute(i);
			string localName = reader.LocalName;
			if (!(localName == "id"))
			{
				if (localName == "style")
				{
					UpdateZOrderPosition(reader, xmlParaItem, writer);
				}
				else
				{
					writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
				}
			}
			else if (!string.IsNullOrEmpty(reader.Value))
			{
				string value = "_x0000_i" + GetNextShapeID();
				writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, value);
			}
			else
			{
				writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
			}
		}
	}

	private void UpdateZOrderPosition(XmlReader reader, XmlParagraphItem xmlParaItem, XmlWriter writer)
	{
		if (!string.IsNullOrEmpty(reader.Value) && xmlParaItem != null)
		{
			string[] array = reader.Value.Split(';');
			StringBuilder stringBuilder = new StringBuilder();
			string[] array2 = array;
			foreach (string text in array2)
			{
				if (text.Contains("z-index"))
				{
					string[] array3 = text.Split(':');
					if (array3.Length == 2 && array3[0] == "z-index" && !string.IsNullOrEmpty(array3[1]))
					{
						stringBuilder.Append(array3[0] + ":");
						stringBuilder.Append(xmlParaItem.ZOrderIndex + ";");
					}
					else
					{
						stringBuilder.Append(text + ";");
					}
				}
				else
				{
					stringBuilder.Append(text + ";");
				}
			}
			writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, stringBuilder.ToString());
		}
		else
		{
			writer.WriteAttributeString(reader.Prefix, reader.LocalName, reader.NamespaceURI, reader.Value);
		}
	}

	private void AddXmlItemContType(string relType, string relTarget)
	{
		if (relType == "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart")
		{
			ChartsPathNames.Add("word/" + relTarget);
			UpdateChartInnerRelation("word/" + relTarget);
		}
		else if (relType == "http://schemas.openxmlformats.org/officeDocument/2006/relationships/control")
		{
			ControlsPathNames.Add("word/" + relTarget);
		}
	}

	private void UpdateChartInnerRelation(string containerName)
	{
		PartContainer partContainer = m_document.DocxPackage.FindPartContainer(containerName);
		string partName = containerName.Substring(containerName.LastIndexOf('/') + 1);
		string xmlPartRelationKey = partContainer.GetXmlPartRelationKey(partName);
		if (string.IsNullOrEmpty(xmlPartRelationKey))
		{
			return;
		}
		Stream dataStream = partContainer.Relations[xmlPartRelationKey].DataStream;
		dataStream.Position = 0L;
		XmlReader xmlReader = DocGen.DocIO.DLS.Convertors.UtilityMethods.CreateReader(dataStream);
		xmlReader.MoveToContent();
		if (xmlReader.LocalName != "Relationships")
		{
			xmlReader.ReadInnerXml();
		}
		if (xmlReader.IsEmptyElement)
		{
			return;
		}
		string localName = xmlReader.LocalName;
		xmlReader.Read();
		bool flag = true;
		if (localName == xmlReader.LocalName && xmlReader.NodeType == XmlNodeType.EndElement)
		{
			return;
		}
		do
		{
			if (!flag)
			{
				xmlReader.Read();
			}
			if (xmlReader.NodeType == XmlNodeType.Element && !(xmlReader.GetAttribute("TargetMode") == "External"))
			{
				string attribute = xmlReader.GetAttribute("Target");
				string text = attribute;
				text = ((!attribute.StartsWith("../")) ? (containerName.Remove(containerName.LastIndexOf('/') + 1) + attribute) : m_document.DocxPackage.GetXmlPartContainerPath(partContainer, attribute));
				if (text.EndsWith(".xml"))
				{
					ChartsPathNames.Add(text);
					UpdateChartInnerRelation(text);
				}
			}
			flag = false;
		}
		while (xmlReader.LocalName != "Relationships");
		xmlReader.Dispose();
		dataStream.Position = 0L;
	}

	private void SerializeAbsoluteTab(WAbsoluteTab absoluteTab)
	{
		m_writer.WriteStartElement("w", "r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeCharacterFormat(absoluteTab.CharacterFormat);
		m_writer.WriteStartElement("ptab", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		switch (absoluteTab.Relation)
		{
		case AbsoluteTabRelation.Margin:
			m_writer.WriteAttributeString("w", "relativeTo", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "margin");
			break;
		case AbsoluteTabRelation.Indent:
			m_writer.WriteAttributeString("w", "relativeTo", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "margin");
			break;
		}
		switch (absoluteTab.Alignment)
		{
		case AbsoluteTabAlignment.Left:
			m_writer.WriteAttributeString("w", "alignment", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "left");
			break;
		case AbsoluteTabAlignment.Right:
			m_writer.WriteAttributeString("w", "alignment", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "right");
			break;
		case AbsoluteTabAlignment.Center:
			m_writer.WriteAttributeString("w", "alignment", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "center");
			break;
		}
		m_writer.WriteAttributeString("leader", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetTabLeader(absoluteTab.TabLeader));
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeOleObject(WOleObject oleObject)
	{
		if (oleObject.OleXmlItem != null)
		{
			oleObject.OleXmlItem.SetOwner(oleObject.Owner);
			SerializeXmlParagraphItem(oleObject.OleXmlItem, isInGroupShape: false);
		}
		else if ((!oleObject.IsEmpty || oleObject.LinkType != 0) && oleObject.OlePicture != null)
		{
			m_hasOleObject = true;
			if (oleObject.Field.FieldEnd != null)
			{
				FieldStack.Push(oleObject.Field);
				IsSkipFieldItem = true;
			}
			m_writer.WriteStartElement("r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeCharacterFormat(oleObject.OlePicture.CharacterFormat);
			m_writer.WriteStartElement("object", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
			string text = "_x0000_i" + GetNextShapeID();
			m_writer.WriteAttributeString("id", text);
			m_writer.WriteAttributeString("type", "#_x0000_t75");
			if (!string.IsNullOrEmpty(oleObject.OlePicture.AlternativeText))
			{
				m_writer.WriteAttributeString("alt", oleObject.OlePicture.AlternativeText);
			}
			string olePictureStyle = GetOlePictureStyle(oleObject.OlePicture);
			m_writer.WriteAttributeString("style", olePictureStyle);
			m_writer.WriteAttributeString("ole", "urn:schemas-microsoft-com:office:office", "");
			SerializeShapeBorderColor(oleObject.OlePicture.PictureShape, isOleObjectShape: true);
			SerializeOlePicture(oleObject);
			m_writer.WriteEndElement();
			SerializeOleData(oleObject, text);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
	}

	private void SerializeOleData(WOleObject oleObject, string shapeId)
	{
		m_writer.WriteStartElement("OLEObject", "urn:schemas-microsoft-com:office:office");
		string value = ((oleObject.LinkType == OleLinkType.Embed) ? "Embed" : "Link");
		m_writer.WriteAttributeString("Type", value);
		m_writer.WriteAttributeString("ProgID", oleObject.ObjectType);
		m_writer.WriteAttributeString("ShapeID", shapeId);
		if (oleObject.DisplayAsIcon)
		{
			m_writer.WriteAttributeString("DrawAspect", "Icon");
		}
		else
		{
			m_writer.WriteAttributeString("DrawAspect", "Content");
		}
		string text = null;
		string text2 = null;
		IEntity baseEntity = oleObject.GetBaseEntity(oleObject);
		if (baseEntity.EntityType == EntityType.HeaderFooter)
		{
			text2 = GetHeaderFooterId(baseEntity as HeaderFooter);
		}
		if ((text2 == null || HFOleContainers.ContainsKey(text2)) && OleIds.ContainsKey(oleObject.OleStorageName) && oleObject.LinkType == OleLinkType.Embed)
		{
			text = OleIds[oleObject.OleStorageName];
			m_writer.WriteAttributeString("ObjectID", "_" + oleObject.OleStorageName);
			m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", text);
		}
		else
		{
			text = GetNextRelationShipID();
			m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", text);
			if (!OleIds.ContainsKey(oleObject.OleStorageName) && oleObject.LinkType == OleLinkType.Embed)
			{
				OleIds.Add(oleObject.OleStorageName, text);
			}
			string text3 = null;
			if (oleObject.LinkType == OleLinkType.Embed)
			{
				m_writer.WriteAttributeString("ObjectID", "_" + oleObject.OleStorageName);
				string oleFileName = GetOleFileName(oleObject.OleObjectType, oleObject.ObjectType);
				if (baseEntity.EntityType == EntityType.HeaderFooter)
				{
					if (HFOleContainers != null && text2 != null && HFOleContainers.ContainsKey(text2))
					{
						HFOleContainers[text2].Add(oleFileName, oleObject.GetOlePartStream(isNativeData: false));
					}
					else if (HFOleContainers != null && text2 != null)
					{
						HFOleContainers.Add(text2, new Dictionary<string, Stream>());
						HFOleContainers[text2].Add(oleFileName, oleObject.GetOlePartStream(isNativeData: false));
					}
				}
				else
				{
					OleContainers.Add(oleFileName, oleObject.GetOlePartStream(isNativeData: false));
				}
				text3 = "embeddings/" + oleFileName;
			}
			else
			{
				m_writer.WriteAttributeString("UpdateMode", oleObject.UpdateMode.ToString());
				WriteLinkOptions();
				text3 = oleObject.LinkPath.Replace(" ", "%20");
				if (!string.IsNullOrEmpty(text3) && !text3.Contains("file:///"))
				{
					text3 = "file:///" + text3;
				}
			}
			string oleRelType = GetOleRelType(oleObject.OleObjectType, oleObject.ObjectType);
			DictionaryEntry itemRel = new DictionaryEntry(oleRelType, text3);
			UpdateItemRelation(oleObject, text, itemRel);
			UpdateOleContentType(oleObject.ObjectType);
		}
		m_writer.WriteEndElement();
	}

	private void SerializeOlePicture(WOleObject oleObject)
	{
		WPicture olePicture = oleObject.OlePicture;
		string value = UpdateShapeId(olePicture, isOlePicture: true, oleObject);
		m_writer.WriteStartElement("imagedata", "urn:schemas-microsoft-com:vml");
		if (!string.IsNullOrEmpty(value))
		{
			m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", value);
		}
		m_writer.WriteAttributeString("title", "urn:schemas-microsoft-com:office:office", "");
		SerializePictureOffset(olePicture);
		m_writer.WriteEndElement();
		if (olePicture.IsMetaFile)
		{
			m_hasMetafiles = true;
		}
		else
		{
			m_hasImages = true;
		}
		if (olePicture.TextWrappingStyle != 0 && olePicture.TextWrappingStyle != TextWrappingStyle.InFrontOfText && olePicture.TextWrappingStyle != TextWrappingStyle.Behind)
		{
			m_writer.WriteStartElement("wrap", "urn:schemas-microsoft-com:office:word");
			m_writer.WriteAttributeString("type", olePicture.TextWrappingStyle.ToString());
			m_writer.WriteEndElement();
		}
	}

	private void SerializePictureOffset(WPicture picture)
	{
		if ((double)picture.FillRectangle.TopOffset != 0.0)
		{
			m_writer.WriteAttributeString("croptop", Math.Round(SetCroppingValue(picture.FillRectangle.TopOffset)).ToString(CultureInfo.InvariantCulture) + "f");
		}
		if ((double)picture.FillRectangle.BottomOffset != 0.0)
		{
			m_writer.WriteAttributeString("cropbottom", Math.Round(SetCroppingValue(picture.FillRectangle.BottomOffset)).ToString(CultureInfo.InvariantCulture) + "f");
		}
		if ((double)picture.FillRectangle.LeftOffset != 0.0)
		{
			m_writer.WriteAttributeString("cropleft", Math.Round(SetCroppingValue(picture.FillRectangle.LeftOffset)).ToString(CultureInfo.InvariantCulture) + "f");
		}
		if ((double)picture.FillRectangle.RightOffset != 0.0)
		{
			m_writer.WriteAttributeString("cropright", Math.Round(SetCroppingValue(picture.FillRectangle.RightOffset)).ToString(CultureInfo.InvariantCulture) + "f");
		}
	}

	private void WriteLinkOptions()
	{
		m_writer.WriteStartElement("LinkType", "urn:schemas-microsoft-com:office:office");
		m_writer.WriteString("EnhancedMetaFile");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("LockedField", "urn:schemas-microsoft-com:office:office");
		m_writer.WriteString("false");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("FieldCodes", "urn:schemas-microsoft-com:office:office");
		m_writer.WriteString(SlashSymbol + SlashSymbol + "f 0");
		m_writer.WriteEndElement();
	}

	private string GetOleFileName(OleObjectType objectType, string stringObjType)
	{
		string text = null;
		switch (OleTypeConvertor.ToString(objectType, isWord2003: false))
		{
		case "Excel.Chart.8":
		case "Excel.Sheet.8":
			return "Microsoft_Office_Excel_97-2003_Worksheet" + GetNextID() + ".xls";
		case "Excel.Sheet.12":
			return "Microsoft_Office_Excel_Worksheet" + GetNextID() + ".xlsx";
		case "Excel.SheetMacroEnabled.12":
			return "Microsoft_Office_Excel_Macro-Enabled_Worksheet" + GetNextID() + ".xlsm";
		case "Excel.SheetBinaryMacroEnabled.12":
			return "Microsoft_Office_Excel_Binary_Worksheet" + GetNextID() + ".xlsb";
		case "PowerPoint.Show.8":
			return "Microsoft_Office_PowerPoint_97-2003_Presentation" + GetNextID() + ".ppt";
		case "PowerPoint.Show.12":
			return "Microsoft_Office_PowerPoint_Presentation" + GetNextID() + ".pptx";
		case "Word.Document.8":
			return "Microsoft_Office_Word_97-2003_Document" + GetNextID() + ".doc";
		case "Word.Document.12":
			return "Microsoft_Office_Word_Document" + GetNextID() + ".docx";
		case "Word.DocumentMacroEnabled.12":
			return "Microsoft_Office_Word_Macro-Enabled_Document" + GetNextID() + ".docm";
		case "PowerPoint.ShowMacroEnabled.12":
			return "Microsoft_Office_PowerPoint_Macro-Enabled_Presentation" + GetNextID() + ".pptm";
		case "PowerPoint.SlideMacroEnabled.12":
			return "Microsoft_Office_PowerPoint_Macro-Enabled_Slide" + GetNextID() + ".sldm";
		case "PowerPoint.Slide.12":
			return "Microsoft_Office_PowerPoint_Slide" + GetNextID() + ".sldx";
		default:
			if (objectType == OleObjectType.Undefined && stringObjType == "Visio.Drawing.15")
			{
				return "Microsoft_Visio_Drawing" + GetNextID() + ".vsdx";
			}
			return "oleObject" + GetNextID() + ".bin";
		}
	}

	private string GetOleRelType(OleObjectType objectType, string stringObjType)
	{
		string text = null;
		switch (OleTypeConvertor.ToString(objectType, isWord2003: false))
		{
		case "Excel.Sheet.12":
		case "Excel.SheetBinaryMacroEnabled.12":
		case "PowerPoint.Show.12":
		case "Word.Document.12":
		case "Word.DocumentMacroEnabled.12":
		case "Excel.SheetMacroEnabled.12":
		case "PowerPoint.ShowMacroEnabled.12":
		case "PowerPoint.SlideMacroEnabled.12":
		case "PowerPoint.Slide.12":
			return "http://schemas.openxmlformats.org/officeDocument/2006/relationships/package";
		default:
			if (objectType == OleObjectType.Undefined && stringObjType == "Visio.Drawing.15")
			{
				return "http://schemas.openxmlformats.org/officeDocument/2006/relationships/package";
			}
			return "http://schemas.openxmlformats.org/officeDocument/2006/relationships/oleObject";
		}
	}

	private string GetOlePictureStyle(WPicture picture)
	{
		return SerializeShapePictStyle(picture);
	}

	private void UpdateOleContentType(Stream nodeStream)
	{
		XmlReader xmlReader = DocGen.DocIO.DLS.Convertors.UtilityMethods.CreateReader(nodeStream);
		xmlReader.ReadToFollowing("OLEObject", "urn:schemas-microsoft-com:office:office");
		if (!(xmlReader.LocalName != "OLEObject"))
		{
			string attribute = xmlReader.GetAttribute("ProgID");
			if (attribute != null)
			{
				UpdateOleContentType(attribute);
			}
		}
	}

	private void UpdateOleContentType(string type)
	{
		string text = null;
		switch (type)
		{
		case "Excel.Chart.8":
		case "Excel.Sheet.8":
			text = "application/vnd.ms-excel";
			break;
		case "Excel.Sheet.12":
			text = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
			break;
		case "Excel.SheetBinaryMacroEnabled.12":
			text = "application/vnd.ms-excel.sheet.binary.macroEnabled.12";
			break;
		case "Excel.SheetMacroEnabled.12":
			text = "application/vnd.ms-excel.sheet.macroEnabled.12";
			break;
		case "PowerPoint.Show.8":
			text = "application/vnd.ms-powerpoint";
			break;
		case "PowerPoint.Show.12":
			text = "application/vnd.openxmlformats-officedocument.presentationml.presentation";
			break;
		case "Word.Document.8":
			text = "application/msword";
			break;
		case "Word.Document.12":
			text = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
			break;
		case "Word.DocumentMacroEnabled.12":
			text = "application/vnd.ms-word.document.macroEnabled.12";
			break;
		case "PowerPoint.ShowMacroEnabled.12":
			text = "application/vnd.ms-powerpoint.presentation.macroEnabled.12";
			break;
		case "PowerPoint.SlideMacroEnabled.12":
			text = "application/vnd.ms-powerpoint.slide.macroEnabled.12";
			break;
		case "PowerPoint.Slide.12":
			text = "application/vnd.openxmlformats-officedocument.presentationml.slide";
			break;
		case "Visio.Drawing.11":
			text = "application/vnd.visio";
			break;
		case "Visio.Drawing.15":
			text = "application/vnd.ms-visio.drawing";
			break;
		default:
			text = "application/vnd.openxmlformats-officedocument.oleObject";
			break;
		}
		if (OleContentTypes.Count == 0)
		{
			OleContentTypes.Add("application/vnd.openxmlformats-officedocument.oleObject");
		}
		if (!OleContentTypes.Contains(text))
		{
			OleContentTypes.Add(text);
		}
	}

	private void SerializeSymbol(WSymbol symbol)
	{
		m_writer.WriteStartElement("r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeCharacterFormat(symbol.CharacterFormat);
		m_writer.WriteStartElement("sym", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("char", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", symbol.CharValue);
		m_writer.WriteAttributeString("font", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", symbol.FontName);
		if (m_symbolFontNames == null)
		{
			m_symbolFontNames = new List<string>();
		}
		if (!m_symbolFontNames.Contains(symbol.FontName))
		{
			m_symbolFontNames.Add(symbol.FontName);
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeFieldMark(WFieldMark fieldMark)
	{
		if (CurrentField == null)
		{
			return;
		}
		WField wField = ((fieldMark.ParentField != null) ? fieldMark.ParentField : CurrentField);
		if (wField.FieldType == FieldType.FieldHyperlink && fieldMark.Type == FieldMarkType.FieldEnd && IsPictureHyperLink(wField))
		{
			FieldStack.Pop();
			if (wField.FieldSeparator.NextSibling.NextSibling != fieldMark)
			{
				m_writer.WriteEndElement();
			}
			return;
		}
		m_writer.WriteStartElement("w", "r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (fieldMark.CharacterFormat.IsDefault && wField != null)
		{
			fieldMark.CharacterFormat.ImportContainer(wField.CharacterFormat);
			fieldMark.CharacterFormat.CopyProperties(wField.CharacterFormat);
		}
		WCharacterFormat characterFormat = ((wField != null) ? wField.CharacterFormat : fieldMark.CharacterFormat);
		SerializeCharacterFormat(characterFormat);
		m_writer.WriteStartElement("w", "fldChar", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		string value = ((fieldMark.Type == FieldMarkType.FieldSeparator) ? "separate" : "end");
		m_writer.WriteAttributeString("w", "fldCharType", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value);
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		if (wField.FieldType == FieldType.FieldIncludePicture)
		{
			_ = fieldMark.Type;
			_ = 1;
		}
		if (FieldMarkStack.Count > 0 && fieldMark == FieldMarkStack.Peek())
		{
			FieldMarkStack.Pop();
		}
		if (fieldMark.Type == FieldMarkType.FieldEnd && CurrentField != null)
		{
			FieldStack.Pop();
		}
	}

	private void SerializePicture(WPicture picture)
	{
		if (!picture.SkipDocxItem && !IsPictureBullet(picture) && picture.Width >= 0f && picture.Height >= 0f)
		{
			m_writer.WriteStartElement("r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeCharacterFormat(picture.CharacterFormat);
			if (picture.IsShape || (picture.Document.Settings.CompatibilityMode == CompatibilityMode.Word2003 && picture.Document.SaveOptions.MaintainCompatibilityMode))
			{
				SerializeShape(picture);
			}
			else
			{
				SerializeDrawing(picture);
			}
			m_writer.WriteEndElement();
		}
	}

	private bool IsPictureBullet(WPicture picture)
	{
		ParagraphItemCollection paragraphItemCollection = null;
		if (picture.Owner is WParagraph)
		{
			paragraphItemCollection = (picture.Owner as WParagraph).Items;
		}
		else if (picture.Owner is InlineContentControl)
		{
			paragraphItemCollection = (picture.Owner as InlineContentControl).ParagraphItems;
		}
		if (paragraphItemCollection != null)
		{
			foreach (ParagraphItem item in paragraphItemCollection)
			{
				if (item is BookmarkStart { Name: "_PictureBullets" })
				{
					return true;
				}
			}
		}
		return false;
	}

	private void SerializeDrawing(WPicture picture)
	{
		if (picture.ImageRecord != null || !string.IsNullOrEmpty(picture.ExternalLink))
		{
			m_writer.WriteStartElement("drawing", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (picture.TextWrappingStyle != 0)
			{
				SerializeAbsolutePicture(picture);
			}
			else
			{
				SerializeInlinePicture(picture);
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeInlinePicture(WPicture picture)
	{
		m_writer.WriteStartElement("inline", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		m_writer.WriteStartElement("extent", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		RectangleF boundsAfterRotation = GetBoundsAfterRotation(new RectangleF(0f, 0f, picture.Width, picture.Height), picture.Rotation);
		int num = (int)Math.Round(boundsAfterRotation.Width * 12700f);
		m_writer.WriteAttributeString("cx", num.ToString());
		int num2 = (int)Math.Round(boundsAfterRotation.Height * 12700f);
		m_writer.WriteAttributeString("cy", num2.ToString());
		m_writer.WriteEndElement();
		double num3 = (double)(int)picture.PictureShape.PictureDescriptor.BorderLeft.LineWidth / 8.0;
		if (num3 > 0.0 && picture.DocxProps.Count == 0)
		{
			long leftTop = 0L;
			long rightBottom = 0L;
			picture.PictureShape.GetEffectExtent(num3, ref leftTop, ref rightBottom);
			m_writer.WriteStartElement("effectExtent", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteAttributeString("l", leftTop.ToString(CultureInfo.InvariantCulture));
			m_writer.WriteAttributeString("t", leftTop.ToString(CultureInfo.InvariantCulture));
			m_writer.WriteAttributeString("r", rightBottom.ToString(CultureInfo.InvariantCulture));
			m_writer.WriteAttributeString("b", rightBottom.ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		SerializePicProperties(picture);
		SerializeDrawingGraphics(picture);
		m_writer.WriteEndElement();
	}

	private RectangleF GetBoundsAfterRotation(RectangleF bounds, float rotation)
	{
		double num = bounds.X + bounds.Width / 2f;
		double num2 = bounds.Y + bounds.Height / 2f;
		rotation = GetRotationAngle(rotation);
		double num3 = (double)rotation * Math.PI / 180.0;
		double num4 = Math.Sin(num3);
		double num5 = Math.Cos(num3);
		double num6 = num + ((double)bounds.X - num) * num5 - ((double)bounds.Y - num2) * num4;
		double num7 = num2 + ((double)bounds.X - num) * num4 + ((double)bounds.Y - num2) * num5;
		return new RectangleF((float)num6, (float)num7, bounds.Width, bounds.Height);
	}

	private float GetRotationAngle(float rotation)
	{
		if (rotation >= 360f || rotation <= -360f)
		{
			rotation %= 360f;
		}
		if (rotation < 0f)
		{
			rotation = 360f + rotation;
		}
		return rotation;
	}

	private void SerializeAbsolutePicture(WPicture picture)
	{
		m_writer.WriteStartElement("anchor", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		m_writer.WriteAttributeString("distT", (picture.DistanceFromTop * 12700f).ToString(CultureInfo.InvariantCulture));
		m_writer.WriteAttributeString("distB", (picture.DistanceFromBottom * 12700f).ToString(CultureInfo.InvariantCulture));
		m_writer.WriteAttributeString("distL", (picture.DistanceFromLeft * 12700f).ToString(CultureInfo.InvariantCulture));
		m_writer.WriteAttributeString("distR", (picture.DistanceFromRight * 12700f).ToString(CultureInfo.InvariantCulture));
		m_writer.WriteAttributeString("simplePos", "0");
		if (picture.OrderIndex != int.MaxValue)
		{
			m_writer.WriteAttributeString("relativeHeight", picture.OrderIndex.ToString(CultureInfo.InvariantCulture));
		}
		else
		{
			m_writer.WriteAttributeString("relativeHeight", "0");
		}
		string value = (picture.IsBelowText ? "1" : "0");
		m_writer.WriteAttributeString("behindDoc", value);
		m_writer.WriteAttributeString("locked", "0");
		if (picture.LayoutInCell)
		{
			m_writer.WriteAttributeString("layoutInCell", "1");
		}
		else
		{
			m_writer.WriteAttributeString("layoutInCell", "0");
		}
		if (picture.AllowOverlap)
		{
			m_writer.WriteAttributeString("allowOverlap", "1");
		}
		else
		{
			m_writer.WriteAttributeString("allowOverlap", "0");
		}
		m_writer.WriteStartElement("simplePos", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		m_writer.WriteAttributeString("x", "0");
		m_writer.WriteAttributeString("y", "0");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("positionH", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		m_writer.WriteAttributeString("relativeFrom", GetShapeHorzOrigin(picture.HorizontalOrigin));
		if (picture.HorizontalAlignment == ShapeHorizontalAlignment.None)
		{
			m_writer.WriteStartElement("posOffset", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			int num = (int)Math.Round(picture.HorizontalPosition * 12700f);
			m_writer.WriteString(num.ToString());
			m_writer.WriteEndElement();
		}
		else
		{
			m_writer.WriteStartElement("align", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			string text = picture.HorizontalAlignment.ToString().ToLower();
			m_writer.WriteString(text);
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("positionV", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		m_writer.WriteAttributeString("relativeFrom", GetVerticalOrginAsString(picture.VerticalOrigin, isShapeStyle: false));
		if (picture.VerticalAlignment == ShapeVerticalAlignment.None)
		{
			m_writer.WriteStartElement("posOffset", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			int num2 = (int)Math.Round(picture.VerticalPosition * 12700f);
			m_writer.WriteString(num2.ToString());
			m_writer.WriteEndElement();
		}
		else
		{
			m_writer.WriteStartElement("align", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			string text2 = picture.VerticalAlignment.ToString().ToLower();
			m_writer.WriteString(text2);
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("extent", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		int num3 = (int)Math.Round(picture.Width * 12700f);
		m_writer.WriteAttributeString("cx", num3.ToString());
		int num4 = (int)Math.Round(picture.Height * 12700f);
		m_writer.WriteAttributeString("cy", num4.ToString());
		m_writer.WriteEndElement();
		SerializePicProperties(picture);
		switch (picture.TextWrappingStyle)
		{
		case TextWrappingStyle.Square:
			m_writer.WriteStartElement("wrapSquare", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteAttributeString("wrapText", GetPictureWrappingTypeAsString(picture.TextWrappingType));
			m_writer.WriteEndElement();
			break;
		case TextWrappingStyle.Through:
			m_writer.WriteStartElement("wrapThrough", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteAttributeString("wrapText", GetPictureWrappingTypeAsString(picture.TextWrappingType));
			SerializeWrapPolygon(picture, picture.WrapPolygon);
			m_writer.WriteEndElement();
			break;
		case TextWrappingStyle.Tight:
			m_writer.WriteStartElement("wrapTight", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteAttributeString("wrapText", GetPictureWrappingTypeAsString(picture.TextWrappingType));
			SerializeWrapPolygon(picture, picture.WrapPolygon);
			m_writer.WriteEndElement();
			break;
		case TextWrappingStyle.TopAndBottom:
			m_writer.WriteStartElement("wrapTopAndBottom", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteEndElement();
			break;
		default:
			m_writer.WriteStartElement("wrapNone", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteEndElement();
			break;
		}
		SerializeDrawingGraphics(picture);
		m_writer.WriteEndElement();
	}

	private void SerializePicProperties(WPicture picture)
	{
		if (picture.DocxProps.Count <= 0)
		{
			return;
		}
		foreach (Stream docxProp in picture.DocxProps)
		{
			XmlReader reader = CreateReader(docxProp);
			m_writer.WriteNode(reader, defattr: false);
		}
	}

	private void SerializeDrawingGraphics(WPicture picture)
	{
		string empty = string.Empty;
		empty = UpdateShapeId(picture, isOlePicture: false, null);
		picture.ShapeId = (int)GetNextDocPrID();
		m_writer.WriteStartElement("wp", "docPr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		m_writer.WriteAttributeString("id", picture.ShapeId.ToString());
		if (picture.AlternativeText != null)
		{
			m_writer.WriteAttributeString("descr", picture.AlternativeText);
		}
		m_writer.WriteAttributeString("name", picture.Name);
		if (!string.IsNullOrEmpty(picture.Title))
		{
			m_writer.WriteAttributeString("title", picture.Title);
		}
		if (!picture.Visible)
		{
			m_writer.WriteAttributeString("hidden", "1");
		}
		SerializePictureHyperlink(picture);
		m_writer.WriteEndElement();
		if (picture.LockAspectRatio)
		{
			m_writer.WriteStartElement("wp", "cNvGraphicFramePr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteStartElement("a", "graphicFrameLocks", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("noChangeAspect", "1");
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		m_writer.WriteStartElement("a", "graphic", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("a", "graphicData", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("uri", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
		m_writer.WriteStartElement("pic", "pic", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
		m_writer.WriteStartElement("pic", "nvPicPr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
		m_writer.WriteStartElement("pic", "cNvPr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
		m_writer.WriteAttributeString("id", "0");
		m_writer.WriteAttributeString("name", "");
		m_writer.WriteAttributeString("descr", "");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("pic", "cNvPicPr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
		m_writer.WriteStartElement("a", "picLocks", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("noChangeAspect", "1");
		m_writer.WriteAttributeString("noChangeArrowheads", "1");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("pic", "blipFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
		m_writer.WriteStartElement("a", "blip", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (picture.HasImageRecordReference || (string.IsNullOrEmpty(picture.ExternalLink) && !picture.IsDefaultPicOfContentControl))
		{
			m_writer.WriteAttributeString("r", "embed", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", empty);
		}
		if (!string.IsNullOrEmpty(picture.ExternalLink) && DocumentImages.ContainsKey(empty))
		{
			if (!picture.HasImageRecordReference)
			{
				DocumentImages.Remove(empty);
			}
			else
			{
				empty = GetNextRelationShipID();
			}
			m_writer.WriteAttributeString("link", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", empty);
			ExternalLinkImages.Add(empty, picture.ExternalLink);
		}
		if (picture.FillFormat.FillType == FillType.FillPicture)
		{
			Entity baseEntity = picture.GetBaseEntity(picture);
			SerializeBlipFill(picture.FillFormat, baseEntity, picture, null);
		}
		else if (picture.ChromaKeyColor != Color.Empty)
		{
			m_writer.WriteStartElement("clrChange", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("clrFrom", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", GetRGBCode(picture.ChromaKeyColor));
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			m_writer.WriteStartElement("clrTo", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", GetRGBCode(picture.ChromaKeyColor));
			m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", "0");
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "srcRect", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (picture.FillRectangle.LeftOffset != 0f)
		{
			m_writer.WriteAttributeString("l", GetFillRectangleOffsetVal(picture.FillRectangle.LeftOffset));
		}
		if (picture.FillRectangle.TopOffset != 0f)
		{
			m_writer.WriteAttributeString("t", GetFillRectangleOffsetVal(picture.FillRectangle.TopOffset));
		}
		if (picture.FillRectangle.RightOffset != 0f)
		{
			m_writer.WriteAttributeString("r", GetFillRectangleOffsetVal(picture.FillRectangle.RightOffset));
		}
		if (picture.FillRectangle.BottomOffset != 0f)
		{
			m_writer.WriteAttributeString("b", GetFillRectangleOffsetVal(picture.FillRectangle.BottomOffset));
		}
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "stretch", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("a", "fillRect", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("pic", "spPr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
		m_writer.WriteAttributeString("bwMode", "auto");
		m_writer.WriteStartElement("a", "xfrm", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (picture.Rotation != 0f)
		{
			float num = GetRotationAngle(picture.Rotation) * 60000f;
			if (num != 0f)
			{
				m_writer.WriteAttributeString("rot", Math.Round(num).ToString());
			}
		}
		if (picture.FlipHorizontal)
		{
			m_writer.WriteAttributeString("flipH", "1");
		}
		if (picture.FlipVertical)
		{
			m_writer.WriteAttributeString("flipV", "1");
		}
		m_writer.WriteStartElement("a", "off", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("x", "0");
		m_writer.WriteAttributeString("y", "0");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "ext", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		RectangleF boundsAfterRotation = GetBoundsAfterRotation(new RectangleF(0f, 0f, picture.Width, picture.Height), picture.Rotation);
		int num2 = (int)Math.Round(boundsAfterRotation.Width * 12700f);
		m_writer.WriteAttributeString("cx", num2.ToString());
		int num3 = (int)Math.Round(boundsAfterRotation.Height * 12700f);
		m_writer.WriteAttributeString("cy", num3.ToString());
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("a", "prstGeom", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("prst", "rect");
		m_writer.WriteStartElement("a", "avLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		if (picture.HasBorder)
		{
			if (picture.TextWrappingStyle == TextWrappingStyle.Inline && picture.IsShape)
			{
				SerializeInlineShapeLine(picture.PictureShape);
			}
			else
			{
				SerializeShapeLine(picture.PictureShape);
			}
		}
		if (picture.DocxVisualShapeProps.Count > 0)
		{
			SerializeDocxProps(picture.DocxVisualShapeProps, "effectLst");
			SerializeDocxProps(picture.DocxVisualShapeProps, "scene3d");
			SerializeDocxProps(picture.DocxVisualShapeProps, "sp3d");
			SerializeDocxProps(picture.DocxVisualShapeProps, "extLst");
		}
		if (picture.PictureShape.FillFormat.Fill && picture.PictureShape.FillFormat.FillType == FillType.FillPicture)
		{
			Entity baseEntity2 = GetBaseEntity(picture);
			SerializeBlipFill(picture.PictureShape.FillFormat, baseEntity2);
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private string GetFillRectangleOffsetVal(double value)
	{
		return Math.Round(value * 1000.0).ToString();
	}

	private void SerializeInlineShapeLine(InlineShapeObject shape)
	{
		BorderCode borderLeft = shape.PictureDescriptor.BorderLeft;
		TextBoxLineStyle lineStyle = TextBoxLineStyle.Simple;
		LineDashing dashStyle = shape.GetDashStyle((BorderStyle)borderLeft.BorderType, ref lineStyle);
		m_writer.WriteStartElement("ln", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (lineStyle != 0)
		{
			m_writer.WriteAttributeString("cmpd", GetLineStyle(lineStyle, is2007: false));
		}
		uint num = (uint)Math.Round((double)(int)borderLeft.LineWidth / 8.0 * 12700.0);
		if (num != 0)
		{
			m_writer.WriteAttributeString("w", num.ToString());
		}
		if (shape.LineGradient.GradientStops.Count > 0)
		{
			SerializeGradientFill(shape.LineGradient);
		}
		else
		{
			Color color = shape.PictureDescriptor.BorderLeft.LineColorExt;
			if (shape.ShapeContainer.ShapePosition.Properties.ContainsKey(924))
			{
				color = WordColor.ConvertRGBToColor(shape.ShapeContainer.ShapePosition.GetPropertyValue(924));
			}
			if (color.IsEmpty)
			{
				m_writer.WriteStartElement("noFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteEndElement();
			}
			else
			{
				m_writer.WriteStartElement("solidFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(color));
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
		}
		if (borderLeft.BorderType != 0)
		{
			m_writer.WriteStartElement("prstDash", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", GetDashStyle(dashStyle, is2007: false));
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private string GetLanguage(short key)
	{
		return key switch
		{
			1 => "ar", 
			2 => "bg", 
			3 => "ca", 
			4 => "zh", 
			5 => "cs", 
			6 => "da", 
			7 => "de", 
			8 => "el", 
			9 => "en", 
			10 => "es", 
			11 => "fi", 
			12 => "fr", 
			13 => "he", 
			14 => "hu", 
			15 => "is", 
			16 => "it", 
			17 => "ja", 
			18 => "ko", 
			19 => "nl", 
			20 => "nb", 
			21 => "pl", 
			22 => "pt", 
			23 => "rm", 
			24 => "ro", 
			25 => "ru", 
			26 => "hr", 
			27 => "sk", 
			28 => "sq", 
			29 => "sv", 
			30 => "th", 
			31 => "tr", 
			32 => "ur", 
			33 => "id", 
			34 => "uk", 
			35 => "be", 
			36 => "sl", 
			37 => "et", 
			38 => "lv", 
			39 => "lt", 
			40 => "tg", 
			41 => "fa", 
			42 => "vi", 
			43 => "hy", 
			44 => "az", 
			45 => "eu", 
			46 => "hsb", 
			47 => "mk", 
			50 => "tn", 
			52 => "xh", 
			53 => "zu", 
			54 => "af", 
			55 => "ka", 
			56 => "fo", 
			57 => "hi", 
			58 => "mt", 
			59 => "smn", 
			62 => "ms", 
			63 => "kk", 
			64 => "ky", 
			65 => "sw", 
			66 => "tk", 
			67 => "uz", 
			68 => "tt", 
			69 => "bn", 
			70 => "pa", 
			71 => "gu", 
			72 => "or", 
			73 => "ta", 
			74 => "te", 
			75 => "kn", 
			76 => "ml", 
			78 => "mr", 
			79 => "sa", 
			80 => "mn", 
			81 => "bo", 
			82 => "cy", 
			84 => "lo", 
			86 => "gl", 
			87 => "kok", 
			90 => "syr", 
			91 => "si", 
			92 => "chr", 
			93 => "iu", 
			94 => "am", 
			97 => "ne", 
			98 => "fy", 
			99 => "ps", 
			100 => "fil", 
			101 => "dv", 
			103 => "ff", 
			104 => "ha", 
			107 => "quz", 
			108 => "nso", 
			109 => "ba", 
			110 => "lb", 
			111 => "kl", 
			112 => "ig", 
			115 => "ti", 
			117 => "haw", 
			120 => "ii", 
			122 => "arn", 
			126 => "br", 
			128 => "ug", 
			129 => "mi", 
			130 => "oc", 
			131 => "co", 
			132 => "gsw", 
			133 => "sah", 
			134 => "qut", 
			135 => "rw", 
			140 => "prs", 
			_ => "en-US", 
		};
	}

	private string GetLineCapStyle(DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineCap lineCap, bool is2007)
	{
		switch (lineCap)
		{
		case DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineCap.Flat:
			return "flat";
		case DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineCap.Round:
			if (!is2007)
			{
				return "rnd";
			}
			return "round";
		default:
			if (!is2007)
			{
				return "sq";
			}
			return "square";
		}
	}

	private string GetLineJoinStyle(DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineJoin linejoin)
	{
		return linejoin switch
		{
			DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineJoin.Bevel => "bevel", 
			DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineJoin.Round => "round", 
			_ => "miter", 
		};
	}

	private string GetLineEnd(ArrowheadStyle lineEnd, bool is2007)
	{
		switch (lineEnd)
		{
		case ArrowheadStyle.ArrowheadTriangle:
			if (!is2007)
			{
				return "triangle";
			}
			return "block";
		case ArrowheadStyle.ArrowheadOpen:
			if (!is2007)
			{
				return "arrow";
			}
			return "open";
		case ArrowheadStyle.ArrowheadOval:
			return "oval";
		case ArrowheadStyle.ArrowheadStealth:
			if (!is2007)
			{
				return "stealth";
			}
			return "classic";
		case ArrowheadStyle.ArrowheadDiamond:
			return "diamond";
		default:
			return "none";
		}
	}

	private string GetLineEndWidth(LineEndWidth lineEndWidth, bool is2007)
	{
		switch (lineEndWidth)
		{
		case LineEndWidth.NarrowArrow:
			if (!is2007)
			{
				return "sm";
			}
			return "narrow";
		case LineEndWidth.WideArrow:
			if (!is2007)
			{
				return "lg";
			}
			return "wide";
		default:
			if (!is2007)
			{
				return "med";
			}
			return "medium";
		}
	}

	private string GetLineEndLength(LineEndLength lineEndLength, bool is2007)
	{
		switch (lineEndLength)
		{
		case LineEndLength.ShortArrow:
			if (!is2007)
			{
				return "sm";
			}
			return "short";
		case LineEndLength.LongArrow:
			if (!is2007)
			{
				return "lg";
			}
			return "long";
		default:
			if (!is2007)
			{
				return "med";
			}
			return "medium";
		}
	}

	private void SerializeShapeLine(InlineShapeObject shape)
	{
		m_writer.WriteStartElement("ln", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (shape.ShapeContainer.ShapeOptions.LineProperties.HasDefined && shape.ShapeContainer.ShapeOptions.LineProperties.PenAlignInset)
		{
			m_writer.WriteAttributeString("algn", "in");
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(471))
		{
			m_writer.WriteAttributeString("cap", GetLineCapStyle((DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineCap)shape.ShapeContainer.GetPropertyValue(471), is2007: false));
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(461))
		{
			m_writer.WriteAttributeString("cmpd", GetLineStyle((TextBoxLineStyle)shape.ShapeContainer.GetPropertyValue(461), is2007: false));
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(459))
		{
			m_writer.WriteAttributeString("w", shape.ShapeContainer.GetPropertyValue(459).ToString());
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(448))
		{
			m_writer.WriteStartElement("solidFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			Color color = WordColor.ConvertRGBToColor(shape.ShapeContainer.GetPropertyValue(448));
			m_writer.WriteAttributeString("val", GetRGBCode(color));
			if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(449))
			{
				uint propertyValue = shape.ShapeContainer.ShapeOptions.GetPropertyValue(449);
				propertyValue = (uint)Math.Round((double)(propertyValue * 100) / 65536.0);
				propertyValue *= 1000;
				m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", propertyValue.ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		else if (shape.LineGradient.GradientStops.Count > 0)
		{
			SerializeGradientFill(shape.LineGradient);
		}
		else
		{
			m_writer.WriteStartElement("noFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(462))
		{
			m_writer.WriteStartElement("prstDash", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", GetDashStyle((LineDashing)shape.ShapeContainer.GetPropertyValue(462), is2007: false));
			m_writer.WriteEndElement();
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(470))
		{
			DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineJoin propertyValue2 = (DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineJoin)shape.ShapeContainer.GetPropertyValue(470);
			m_writer.WriteStartElement(GetLineJoinStyle(propertyValue2), IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (propertyValue2 == DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineJoin.Miter && shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(460))
			{
				uint propertyValue3 = shape.ShapeContainer.GetPropertyValue(460);
				propertyValue3 = (uint)((double)propertyValue3 / 65536.0 * 100.0 * 1000.0);
				m_writer.WriteAttributeString("lim", propertyValue3.ToString());
			}
			m_writer.WriteEndElement();
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(464) || shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(467) || shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(466))
		{
			m_writer.WriteStartElement("headEnd", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(464))
			{
				string lineEnd = GetLineEnd((ArrowheadStyle)shape.ShapeContainer.GetPropertyValue(464), is2007: false);
				if (lineEnd != null)
				{
					m_writer.WriteAttributeString("type", lineEnd);
				}
			}
			if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(466))
			{
				LineEndWidth propertyValue4 = (LineEndWidth)shape.ShapeContainer.GetPropertyValue(466);
				m_writer.WriteAttributeString("w", GetLineEndWidth(propertyValue4, is2007: false));
			}
			if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(467))
			{
				LineEndLength propertyValue5 = (LineEndLength)shape.ShapeContainer.GetPropertyValue(467);
				m_writer.WriteAttributeString("len", GetLineEndLength(propertyValue5, is2007: false));
			}
			m_writer.WriteEndElement();
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(465) || shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(469) || shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(468))
		{
			m_writer.WriteStartElement("tailEnd", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(465))
			{
				string lineEnd2 = GetLineEnd((ArrowheadStyle)shape.ShapeContainer.GetPropertyValue(465), is2007: false);
				if (lineEnd2 != null)
				{
					m_writer.WriteAttributeString("type", lineEnd2);
				}
			}
			if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(468))
			{
				LineEndWidth propertyValue6 = (LineEndWidth)shape.ShapeContainer.GetPropertyValue(468);
				m_writer.WriteAttributeString("w", GetLineEndWidth(propertyValue6, is2007: false));
			}
			if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(469))
			{
				LineEndLength propertyValue7 = (LineEndLength)shape.ShapeContainer.GetPropertyValue(469);
				m_writer.WriteAttributeString("len", GetLineEndLength(propertyValue7, is2007: false));
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeGradientFill(GradientFill gradientFill)
	{
		m_writer.WriteStartElement("gradFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (!gradientFill.IsEmptyElement)
		{
			if (gradientFill.Flip != 0)
			{
				m_writer.WriteAttributeString("flip", GetFlipOrientation(gradientFill.Flip));
			}
			m_writer.WriteAttributeString("rotWithShape", gradientFill.RotateWithShape ? "1" : "0");
			m_writer.WriteStartElement("gsLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			foreach (GradientStop gradientStop in gradientFill.GradientStops)
			{
				SerializeGradientStop(gradientStop);
			}
			m_writer.WriteEndElement();
			if (gradientFill.LinearGradient != null)
			{
				m_writer.WriteStartElement("lin", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("ang", (gradientFill.LinearGradient.Angle * 60000).ToString());
				m_writer.WriteAttributeString("scaled", gradientFill.LinearGradient.Scaled ? "1" : "0");
				m_writer.WriteEndElement();
			}
			if (gradientFill.PathGradient != null)
			{
				m_writer.WriteStartElement("path", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("path", GetGradientShadeType(gradientFill.PathGradient.PathShade));
				m_writer.WriteStartElement("fillToRect", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				if (gradientFill.PathGradient.LeftOffset != 0)
				{
					m_writer.WriteAttributeString("l", (gradientFill.PathGradient.LeftOffset * 1000).ToString());
				}
				if (gradientFill.PathGradient.TopOffset != 0)
				{
					m_writer.WriteAttributeString("t", (gradientFill.PathGradient.TopOffset * 1000).ToString());
				}
				if (gradientFill.PathGradient.RightOffset != 0)
				{
					m_writer.WriteAttributeString("r", (gradientFill.PathGradient.RightOffset * 1000).ToString());
				}
				if (gradientFill.PathGradient.BottomOffset != 0)
				{
					m_writer.WriteAttributeString("b", (gradientFill.PathGradient.BottomOffset * 1000).ToString());
				}
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
			m_writer.WriteStartElement("tileRect", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (gradientFill.TileRectangle.LeftOffset != 0f)
			{
				m_writer.WriteAttributeString("l", (gradientFill.TileRectangle.LeftOffset * 1000f).ToString());
			}
			if (gradientFill.TileRectangle.TopOffset != 0f)
			{
				m_writer.WriteAttributeString("t", (gradientFill.TileRectangle.TopOffset * 1000f).ToString());
			}
			if (gradientFill.TileRectangle.RightOffset != 0f)
			{
				m_writer.WriteAttributeString("r", (gradientFill.TileRectangle.RightOffset * 1000f).ToString());
			}
			if (gradientFill.TileRectangle.BottomOffset != 0f)
			{
				m_writer.WriteAttributeString("b", (gradientFill.TileRectangle.BottomOffset * 1000f).ToString());
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeGradientStop(GradientStop gradientStop)
	{
		m_writer.WriteStartElement("gs", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("pos", (IsStrict ? gradientStop.Position.ToString() : (gradientStop.Position * 1000).ToString()) + (IsStrict ? "%" : ""));
		m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("val", GetRGBCode(gradientStop.Color));
		if (gradientStop.Opacity != byte.MaxValue)
		{
			m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", (gradientStop.Opacity * 1000).ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private string GetFlipOrientation(FlipOrientation flip)
	{
		return flip switch
		{
			FlipOrientation.Horizontal => "x", 
			FlipOrientation.Vertical => "y", 
			FlipOrientation.Both => "xy", 
			_ => "none", 
		};
	}

	private string GetGradientShadeType(GradientShadeType shade)
	{
		return shade switch
		{
			GradientShadeType.Circle => "circle", 
			GradientShadeType.Rectangle => "rect", 
			_ => "shape", 
		};
	}

	private void SerializePictureHyperlink(WPicture picture)
	{
		if (FieldStack.Count != 0)
		{
			WField currentField = CurrentField;
			if (currentField.FieldType == FieldType.FieldHyperlink && currentField.FieldSeparator != null && currentField.FieldSeparator.NextSibling == picture)
			{
				m_writer.WriteStartElement("hlinkClick", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("xmlns", "a", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				SerializeHyperlinkAttributes(currentField);
				m_writer.WriteEndElement();
			}
		}
	}

	private string UpdateShapeId(ChildShape childShape)
	{
		string result = string.Empty;
		IEntity ownerTextBody = childShape.GetOwnerTextBody(childShape);
		if (childShape.ImageRecord.IsMetafile)
		{
			m_hasMetafiles = true;
		}
		else
		{
			m_hasImages = true;
		}
		if (ownerTextBody is HeaderFooter)
		{
			result = UpdateHFImageRels(ownerTextBody as HeaderFooter, childShape.ImageRecord, IsSkipToAdd: false);
		}
		else if (ownerTextBody.Owner != null && ownerTextBody.Owner is HeaderFooter)
		{
			HeaderFooter hf = ownerTextBody.Owner as HeaderFooter;
			result = UpdateHFImageRels(hf, childShape.ImageRecord, IsSkipToAdd: false);
		}
		else
		{
			if (ownerTextBody is WSection || ownerTextBody is WTextBox || ownerTextBody is WTableRow || ownerTextBody is WParagraph || ownerTextBody is BlockContentControl || ownerTextBody is Shape || ownerTextBody is GroupShape || ownerTextBody is ChildShape)
			{
				result = AddImageRelation(DocumentImages, childShape.ImageRecord, IsSkipToAdd: false);
			}
			if (ownerTextBody is WFootnote)
			{
				result = (((ownerTextBody as WFootnote).FootnoteType != 0) ? AddImageRelation(EndnoteImages, childShape.ImageRecord, IsSkipToAdd: false) : AddImageRelation(FootnoteImages, childShape.ImageRecord, IsSkipToAdd: false));
			}
			if (ownerTextBody is WComment)
			{
				result = AddImageRelation(CommentImages, childShape.ImageRecord, IsSkipToAdd: false);
			}
		}
		return result;
	}

	private string UpdateShapeId(WPicture picture, bool isOlePicture, WOleObject oleObject)
	{
		string result = string.Empty;
		IEntity entity = (isOlePicture ? GetOleObjectOwner(oleObject) : GetPictureOwner(picture));
		if (entity is HeaderFooter)
		{
			result = UpdateHFImageRels(entity as HeaderFooter, picture);
		}
		else if (entity.Owner != null && entity.Owner is HeaderFooter)
		{
			HeaderFooter hf = entity.Owner as HeaderFooter;
			result = UpdateHFImageRels(hf, picture);
		}
		else
		{
			UpdateImages(picture);
			if (entity is WSection || entity is WTextBox || entity is WTableRow || entity is WParagraph || entity is BlockContentControl || entity is Shape || entity is GroupShape || entity is ChildShape)
			{
				result = AddImageRelation(DocumentImages, picture.ImageRecord, IsNeedToSkipImageRelation(picture));
			}
			if (entity is WFootnote)
			{
				result = (((entity as WFootnote).FootnoteType != 0) ? AddImageRelation(EndnoteImages, picture.ImageRecord, IsNeedToSkipImageRelation(picture)) : AddImageRelation(FootnoteImages, picture.ImageRecord, IsNeedToSkipImageRelation(picture)));
			}
			if (entity is WComment)
			{
				result = AddImageRelation(CommentImages, picture.ImageRecord, IsNeedToSkipImageRelation(picture));
			}
		}
		return result;
	}

	private string AddImageRelation(Dictionary<string, ImageRecord> imageCollection, ImageRecord imageRecord, bool IsSkipToAdd)
	{
		string text = string.Empty;
		if (imageCollection.ContainsValue(imageRecord))
		{
			foreach (string key in imageCollection.Keys)
			{
				if (imageRecord == imageCollection[key])
				{
					text = key;
					break;
				}
			}
		}
		else
		{
			if (IsSkipToAdd && imageRecord != null)
			{
				imageRecord.ImageBytes = new byte[0];
			}
			if (!IsSkipToAdd || imageRecord != null)
			{
				text = GetNextRelationShipID();
				imageCollection.Add(text, imageRecord);
			}
		}
		return text;
	}

	private void UpdateHFImageRels(string id, HeaderFooter hf, ImageRecord imageRecord)
	{
		string empty = string.Empty;
		foreach (HeaderFooterType key in m_headerFooterColl.Keys)
		{
			Dictionary<string, HeaderFooter> dictionary = m_headerFooterColl[key];
			foreach (string key2 in dictionary.Keys)
			{
				if (dictionary[key2] == hf)
				{
					empty = key2;
					Dictionary<string, ImageRecord> dictionary2 = null;
					if (HeaderFooterImages.ContainsKey(empty))
					{
						dictionary2 = HeaderFooterImages[empty];
						dictionary2.Add(id, imageRecord);
					}
					else
					{
						dictionary2 = new Dictionary<string, ImageRecord>();
						dictionary2.Add(id, imageRecord);
						HeaderFooterImages.Add(empty, dictionary2);
					}
				}
			}
		}
	}

	private void UpdateHFSvgImageRels(string id, HeaderFooter hf, Stream stream)
	{
		string empty = string.Empty;
		foreach (HeaderFooterType key in m_headerFooterColl.Keys)
		{
			Dictionary<string, HeaderFooter> dictionary = m_headerFooterColl[key];
			foreach (string key2 in dictionary.Keys)
			{
				if (dictionary[key2] != hf)
				{
					continue;
				}
				empty = key2;
				Dictionary<string, Stream> dictionary2 = null;
				if (HeaderFooterSvgImages.ContainsKey(empty))
				{
					dictionary2 = HeaderFooterSvgImages[empty];
					if (!dictionary2.ContainsKey(id))
					{
						dictionary2.Add(id, stream);
					}
				}
				else
				{
					dictionary2 = new Dictionary<string, Stream>();
					dictionary2.Add(id, stream);
					HeaderFooterSvgImages.Add(empty, dictionary2);
				}
			}
		}
	}

	private string UpdateHFImageRels(HeaderFooter hf, WPicture image)
	{
		UpdateImages(image);
		_ = string.Empty;
		_ = string.Empty;
		return UpdateHFImageRels(hf, image.ImageRecord, IsNeedToSkipImageRelation(image));
	}

	private string UpdateHFImageRels(HeaderFooter hf, ImageRecord imageRecord, bool IsSkipToAdd)
	{
		string result = string.Empty;
		string empty = string.Empty;
		foreach (HeaderFooterType key in m_headerFooterColl.Keys)
		{
			Dictionary<string, HeaderFooter> dictionary = m_headerFooterColl[key];
			foreach (string key2 in dictionary.Keys)
			{
				if (dictionary[key2] == hf)
				{
					empty = key2;
					Dictionary<string, ImageRecord> dictionary2 = null;
					if (HeaderFooterImages.ContainsKey(empty))
					{
						dictionary2 = HeaderFooterImages[empty];
						result = AddImageRelation(dictionary2, imageRecord, IsSkipToAdd);
					}
					else
					{
						dictionary2 = new Dictionary<string, ImageRecord>();
						result = AddImageRelation(dictionary2, imageRecord, IsSkipToAdd);
						HeaderFooterImages.Add(empty, dictionary2);
					}
				}
			}
		}
		return result;
	}

	private string GetHeaderFooterId(HeaderFooter hf)
	{
		foreach (HeaderFooterType key in m_headerFooterColl.Keys)
		{
			Dictionary<string, HeaderFooter> dictionary = m_headerFooterColl[key];
			foreach (string key2 in dictionary.Keys)
			{
				if (dictionary[key2] == hf)
				{
					return key2;
				}
			}
		}
		return null;
	}

	private IEntity GetPictureOwner(WPicture pic)
	{
		Entity entity = pic.Owner;
		WParagraph wParagraph = null;
		if (pic.Owner is WOleObject)
		{
			entity = (pic.Owner as WOleObject).OwnerParagraph;
		}
		if (pic.Owner is GroupShape)
		{
			entity = (pic.Owner as GroupShape).OwnerParagraph;
		}
		if (pic.Owner is ChildGroupShape)
		{
			entity = ((pic.Owner as ChildGroupShape).Owner as GroupShape).OwnerParagraph;
		}
		if (entity.EntityType == EntityType.InlineContentControl)
		{
			wParagraph = (entity as InlineContentControl).OwnerParagraph;
		}
		else if (entity.EntityType == EntityType.Paragraph)
		{
			wParagraph = entity as WParagraph;
		}
		WTableCell wTableCell = wParagraph.Owner as WTableCell;
		Entity owner = wParagraph.Owner.Owner;
		IEntity entity2 = ((wTableCell == null) ? wParagraph.Owner : wTableCell.OwnerRow.OwnerTable.OwnerTextBody);
		owner = entity2.Owner;
		if (pic.GetBaseEntity(pic) is HeaderFooter result)
		{
			return result;
		}
		return owner;
	}

	private IEntity GetOleObjectOwner(WOleObject oleObject)
	{
		WParagraph ownerParagraph = oleObject.OwnerParagraph;
		WTableCell wTableCell = ownerParagraph.Owner as WTableCell;
		Entity owner = ownerParagraph.Owner.Owner;
		IEntity entity = ((wTableCell == null) ? oleObject.OwnerParagraph.Owner : wTableCell.OwnerRow.OwnerTable.OwnerTextBody);
		owner = entity.Owner;
		if (oleObject.GetBaseEntity(oleObject) is HeaderFooter result)
		{
			return result;
		}
		return owner;
	}

	private void SerializeShape(WPicture picture)
	{
		string text = UpdateShapeId(picture, isOlePicture: false, null);
		m_writer.WriteStartElement("pict", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
		m_writer.WriteAttributeString("type", "#_x0000_t75");
		string value = SerializeShapePictStyle(picture);
		m_writer.WriteAttributeString("style", value);
		m_writer.WriteAttributeString("wrapcoords", SerializeWrapPolygons(picture));
		if (!picture.LayoutInCell)
		{
			m_writer.WriteAttributeString("allowincell", "urn:schemas-microsoft-com:office:office", "f");
		}
		if (picture.HasBorder && picture.TextWrappingStyle == TextWrappingStyle.Inline)
		{
			SerializeShapeBorderColor(picture.PictureShape, isOleObjectShape: false);
		}
		if (!string.IsNullOrEmpty(picture.Href))
		{
			m_writer.WriteAttributeString("href", picture.Href);
		}
		if (!string.IsNullOrEmpty(picture.AlternativeText))
		{
			m_writer.WriteAttributeString("alt", picture.AlternativeText);
		}
		m_writer.WriteStartElement("imagedata", "urn:schemas-microsoft-com:vml");
		if (!string.IsNullOrEmpty(text))
		{
			m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", text);
		}
		m_writer.WriteAttributeString("title", "urn:schemas-microsoft-com:office:office", (picture.Title != null) ? picture.Title : "");
		if (!string.IsNullOrEmpty(picture.ExternalLink) && DocumentImages != null && text != null && DocumentImages.ContainsKey(text))
		{
			if (!picture.HasImageRecordReference)
			{
				DocumentImages.Remove(text);
			}
			else
			{
				text = GetNextRelationShipID();
			}
			m_writer.WriteAttributeString("href", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", text);
			ExternalLinkImages.Add(text, picture.ExternalLink);
		}
		SerializePictureOffset(picture);
		if (picture.ChromaKeyColor != Color.Empty)
		{
			m_writer.WriteAttributeString("chromakey", "#" + GetRGBCode(picture.ChromaKeyColor));
		}
		if (picture.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(4))
		{
			string gainStringValue = GetGainStringValue(picture);
			if (!string.IsNullOrEmpty(gainStringValue))
			{
				m_writer.WriteAttributeString("gain", gainStringValue + "f");
			}
		}
		if (picture.FillFormat.BlipFormat.ImageEffect.PropertiesHash.ContainsKey(3))
		{
			string blackLevelStringValue = GetBlackLevelStringValue(picture);
			if (!string.IsNullOrEmpty(blackLevelStringValue))
			{
				m_writer.WriteAttributeString("blacklevel", blackLevelStringValue + "f");
			}
		}
		if (picture.FillFormat.BlipFormat.GrayScale)
		{
			m_writer.WriteAttributeString("grayscale", "t");
		}
		if (picture.FillFormat.BlipFormat.BiLevel)
		{
			m_writer.WriteAttributeString("bilevel", "t");
		}
		m_writer.WriteEndElement();
		SerializeWrapping(picture.TextWrappingStyle, picture.TextWrappingType);
		if (picture.HasBorder)
		{
			if (picture.TextWrappingStyle == TextWrappingStyle.Inline)
			{
				SerializeShapeBorders(picture.PictureShape.PictureDescriptor);
			}
			else
			{
				SerializeStrokeProps(picture.PictureShape);
			}
		}
		SerializeDocxProps(picture.SignatureLineElements, "lock");
		SerializeDocxProps(picture.SignatureLineElements, "signatureline");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private string GetGainStringValue(WPicture picture)
	{
		float contrast = picture.FillFormat.BlipFormat.ImageEffect.Contrast;
		if (picture.GetContrastValueRanges().TryGetValue(contrast, out var value))
		{
			return value[0].ToString(CultureInfo.InvariantCulture);
		}
		return null;
	}

	private string GetBlackLevelStringValue(WPicture picture)
	{
		float brightness = picture.FillFormat.BlipFormat.ImageEffect.Brightness;
		if (picture.GetBrightnessValueRanges().TryGetValue(brightness, out var value))
		{
			return value[0].ToString(CultureInfo.InvariantCulture);
		}
		return null;
	}

	private float SetCroppingValue(float offset)
	{
		return (float)((double)(offset * 1000f) / 1.5259);
	}

	private void SerializeShapeBorderColor(InlineShapeObject shape, bool isOleObjectShape)
	{
		Color color = shape.PictureDescriptor.BorderBottom.LineColorExt;
		Color color2 = shape.PictureDescriptor.BorderLeft.LineColorExt;
		Color color3 = shape.PictureDescriptor.BorderRight.LineColorExt;
		Color color4 = shape.PictureDescriptor.BorderTop.LineColorExt;
		if (shape.ShapeContainer != null && shape.ShapeContainer.ShapePosition != null)
		{
			if (shape.ShapeContainer.ShapePosition.Properties.ContainsKey(924))
			{
				color2 = WordColor.ConvertRGBToColor(shape.ShapeContainer.ShapePosition.GetPropertyValue(924));
			}
			if (shape.ShapeContainer.ShapePosition.Properties.ContainsKey(926))
			{
				color3 = WordColor.ConvertRGBToColor(shape.ShapeContainer.ShapePosition.GetPropertyValue(926));
			}
			if (shape.ShapeContainer.ShapePosition.Properties.ContainsKey(923))
			{
				color4 = WordColor.ConvertRGBToColor(shape.ShapeContainer.ShapePosition.GetPropertyValue(923));
			}
			if (shape.ShapeContainer.ShapePosition.Properties.ContainsKey(925))
			{
				color = WordColor.ConvertRGBToColor(shape.ShapeContainer.ShapePosition.GetPropertyValue(925));
			}
		}
		m_writer.WriteAttributeString("bordertopcolor", "urn:schemas-microsoft-com:office:office", "#" + GetRGBCode(color4));
		m_writer.WriteAttributeString("borderleftcolor", "urn:schemas-microsoft-com:office:office", "#" + GetRGBCode(color2));
		m_writer.WriteAttributeString("borderbottomcolor", "urn:schemas-microsoft-com:office:office", "#" + GetRGBCode(color));
		m_writer.WriteAttributeString("borderrightcolor", "urn:schemas-microsoft-com:office:office", "#" + GetRGBCode(color3));
		if (isOleObjectShape)
		{
			SerializeStrokeProps(shape);
		}
	}

	private void WriteStartElement(ref bool isWritten)
	{
		if (!isWritten)
		{
			m_writer.WriteStartElement("stroke", "urn:schemas-microsoft-com:vml");
			isWritten = true;
		}
	}

	private void SerializeStrokeProps(InlineShapeObject shape)
	{
		if (shape.ShapeContainer == null || shape.ShapeContainer.ShapeOptions == null)
		{
			return;
		}
		bool isWritten = false;
		if (shape.ShapeContainer.ShapeOptions.LineProperties.HasDefined)
		{
			WriteStartElement(ref isWritten);
			if (shape.ShapeContainer.ShapeOptions.LineProperties.UsefLine && shape.ShapeContainer.ShapeOptions.LineProperties.Line)
			{
				m_writer.WriteAttributeString("on", "t");
			}
			else
			{
				m_writer.WriteAttributeString("on", "f");
			}
			if (shape.ShapeContainer.ShapeOptions.LineProperties.PenAlignInset)
			{
				m_writer.WriteAttributeString("insetpen", "t");
			}
			if (shape.ShapeContainer.ShapeOptions.LineProperties.UsefNoLineDrawDash && shape.ShapeContainer.ShapeOptions.LineProperties.NoLineDrawDash)
			{
				m_writer.WriteAttributeString("forcedash", "t");
			}
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(448))
		{
			WriteStartElement(ref isWritten);
			Color color = WordColor.ConvertRGBToColor(shape.ShapeContainer.ShapeOptions.GetPropertyValue(448));
			m_writer.WriteAttributeString("color", "#" + GetRGBCode(color));
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(449))
		{
			WriteStartElement(ref isWritten);
			uint propertyValue = shape.ShapeContainer.ShapeOptions.GetPropertyValue(449);
			m_writer.WriteAttributeString("opacity", propertyValue + "f");
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(462))
		{
			WriteStartElement(ref isWritten);
			uint propertyValue = shape.ShapeContainer.ShapeOptions.GetPropertyValue(462);
			m_writer.WriteAttributeString("dashstyle", GetStrokeDashStyle((LineDashing)propertyValue));
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(470))
		{
			WriteStartElement(ref isWritten);
			uint propertyValue = shape.ShapeContainer.ShapeOptions.GetPropertyValue(470);
			m_writer.WriteAttributeString("joinstyle", GetLineJoinStyle((DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineJoin)propertyValue));
			if (propertyValue == 1 && shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(460))
			{
				propertyValue = shape.ShapeContainer.ShapeOptions.GetPropertyValue(460);
				m_writer.WriteAttributeString("miterlimit", propertyValue + "f");
			}
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(461))
		{
			WriteStartElement(ref isWritten);
			uint propertyValue = shape.ShapeContainer.ShapeOptions.GetPropertyValue(461);
			m_writer.WriteAttributeString("linestyle", GetStrokeLineStyle((TextBoxLineStyle)propertyValue));
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(471))
		{
			WriteStartElement(ref isWritten);
			uint propertyValue = shape.ShapeContainer.ShapeOptions.GetPropertyValue(471);
			m_writer.WriteAttributeString("endcap", GetLineCapStyle((DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineCap)propertyValue, is2007: false));
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(459))
		{
			WriteStartElement(ref isWritten);
			uint propertyValue = shape.ShapeContainer.ShapeOptions.GetPropertyValue(459);
			double num = Math.Round((double)propertyValue / 12700.0, 2);
			m_writer.WriteAttributeString("weight", num.ToString(CultureInfo.InvariantCulture) + "pt");
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(464))
		{
			WriteStartElement(ref isWritten);
			uint propertyValue = shape.ShapeContainer.ShapeOptions.GetPropertyValue(464);
			m_writer.WriteAttributeString("startarrow", GetLineEnd((ArrowheadStyle)propertyValue, is2007: true));
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(466))
		{
			WriteStartElement(ref isWritten);
			uint propertyValue = shape.ShapeContainer.ShapeOptions.GetPropertyValue(466);
			m_writer.WriteAttributeString("startarrowwidth", GetLineEndWidth((LineEndWidth)propertyValue, is2007: true));
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(467))
		{
			WriteStartElement(ref isWritten);
			uint propertyValue = shape.ShapeContainer.ShapeOptions.GetPropertyValue(467);
			m_writer.WriteAttributeString("startarrowlength", GetLineEndLength((LineEndLength)propertyValue, is2007: true));
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(465))
		{
			WriteStartElement(ref isWritten);
			uint propertyValue = shape.ShapeContainer.ShapeOptions.GetPropertyValue(465);
			m_writer.WriteAttributeString("endarrow", GetLineEnd((ArrowheadStyle)propertyValue, is2007: true));
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(468))
		{
			WriteStartElement(ref isWritten);
			uint propertyValue = shape.ShapeContainer.ShapeOptions.GetPropertyValue(468);
			m_writer.WriteAttributeString("endarrowwidth", GetLineEndWidth((LineEndWidth)propertyValue, is2007: true));
		}
		if (shape.ShapeContainer.ShapeOptions.Properties.ContainsKey(469))
		{
			WriteStartElement(ref isWritten);
			uint propertyValue = shape.ShapeContainer.ShapeOptions.GetPropertyValue(469);
			m_writer.WriteAttributeString("endarrowlength", GetLineEndLength((LineEndLength)propertyValue, is2007: true));
		}
		if (isWritten)
		{
			m_writer.WriteEndElement();
		}
	}

	private string GetStrokeLineStyle(TextBoxLineStyle lineStyle)
	{
		return lineStyle switch
		{
			TextBoxLineStyle.Double => "thinThin", 
			TextBoxLineStyle.ThinThick => "thinThick", 
			TextBoxLineStyle.ThickThin => "thickThin", 
			TextBoxLineStyle.Triple => "thickBetweenThin", 
			_ => "single", 
		};
	}

	private string GetStrokeDashStyle(LineDashing lineDashing)
	{
		switch (lineDashing)
		{
		case LineDashing.Dash:
		case LineDashing.DashGEL:
			return "dash";
		case LineDashing.DashDotGEL:
			return "dashDot";
		case LineDashing.Dot:
		case LineDashing.DotGEL:
			return "1 1";
		case LineDashing.LongDashGEL:
			return "longDash";
		case LineDashing.DashDot:
		case LineDashing.LongDashDotGEL:
			return "longDashDot";
		case LineDashing.DashDotDot:
		case LineDashing.LongDashDotDotGEL:
			return "longDashDotDot";
		default:
			return "solid";
		}
	}

	private void SerializeWrapping(TextWrappingStyle wrapStyle, TextWrappingType wrapType)
	{
		if (wrapStyle != TextWrappingStyle.InFrontOfText)
		{
			m_writer.WriteStartElement("wrap", "urn:schemas-microsoft-com:office:word");
			m_writer.WriteAttributeString("type", GetWrappingStyleAsString(wrapStyle));
			if (wrapType != 0)
			{
				m_writer.WriteAttributeString("side", GetWrappingTypeAsString(wrapType));
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeWrapPolygon(Entity entity, WrapPolygon wrapPolygon)
	{
		PointF[] array = wrapPolygon.Vertices.ToArray();
		if (!m_document.SaveOptions.MaintainCompatibilityMode && IsWord2010)
		{
			array = AdjustPolygonPoints(wrapPolygon.Vertices);
		}
		m_writer.WriteStartElement("wrapPolygon", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		string value = (wrapPolygon.Edited ? "1" : "0");
		m_writer.WriteAttributeString("edited", value);
		m_writer.WriteStartElement("start", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		long num = Convert.ToInt64(array[0].X);
		long num2 = Convert.ToInt64(array[0].Y);
		m_writer.WriteAttributeString("x", num.ToString(CultureInfo.InvariantCulture));
		m_writer.WriteAttributeString("y", num2.ToString(CultureInfo.InvariantCulture));
		m_writer.WriteEndElement();
		for (int i = 1; i < wrapPolygon.Vertices.Count; i++)
		{
			m_writer.WriteStartElement("lineTo", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			num = Convert.ToInt64(array[i].X);
			num2 = Convert.ToInt64(array[i].Y);
			m_writer.WriteAttributeString("x", num.ToString(CultureInfo.InvariantCulture));
			m_writer.WriteAttributeString("y", num2.ToString(CultureInfo.InvariantCulture));
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private PointF[] AdjustPolygonPoints(List<PointF> vertices)
	{
		PointF[] array = new PointF[vertices.Count];
		float num = 0f;
		float num2 = 0f;
		bool flag = false;
		for (int i = 0; i < vertices.Count; i++)
		{
			float num3 = vertices[i].X;
			float num4 = vertices[i].Y;
			if (num3 < 0f)
			{
				flag = true;
				num += 0f - num3;
				num2 = 0f - num3;
				num3 = 0f;
				if (num4 != 0f)
				{
					num4 -= num2;
				}
			}
			else if (flag)
			{
				if (num3 != 0f)
				{
					num3 -= num;
				}
				if (num4 != 0f)
				{
					num4 -= num2;
				}
			}
			array[i] = new PointF(num3, num4);
		}
		return array;
	}

	private string GetWrappingStyleAsString(TextWrappingStyle wrapStyle)
	{
		return wrapStyle switch
		{
			TextWrappingStyle.Square => "square", 
			TextWrappingStyle.Tight => "tight", 
			TextWrappingStyle.Through => "through", 
			TextWrappingStyle.TopAndBottom => "topAndBottom", 
			_ => "none", 
		};
	}

	private string GetVerticalOrginAsString(VerticalOrigin verticalOrigin, bool isShapeStyle)
	{
		string empty = string.Empty;
		switch (verticalOrigin)
		{
		case VerticalOrigin.TopMargin:
			if (isShapeStyle)
			{
				return "top-margin-area";
			}
			return "topMargin";
		case VerticalOrigin.BottomMargin:
			if (isShapeStyle)
			{
				return "bottom-margin-area";
			}
			return "bottomMargin";
		case VerticalOrigin.InsideMargin:
			if (isShapeStyle)
			{
				return "inner-margin-area";
			}
			return "insideMargin";
		case VerticalOrigin.OutsideMargin:
			if (isShapeStyle)
			{
				return "outer-margin-area";
			}
			return "outsideMargin";
		default:
			return verticalOrigin.ToString().ToLower();
		}
	}

	private string GetWrappingTypeAsString(TextWrappingType wrapType)
	{
		return wrapType switch
		{
			TextWrappingType.Left => "left", 
			TextWrappingType.Right => "right", 
			TextWrappingType.Largest => "largest", 
			_ => "both", 
		};
	}

	private string GetPictureWrappingTypeAsString(TextWrappingType wrapType)
	{
		return wrapType switch
		{
			TextWrappingType.Left => "left", 
			TextWrappingType.Right => "right", 
			TextWrappingType.Largest => "largest", 
			_ => "bothSides", 
		};
	}

	private void SerializeShapeBorders(PICF picDescriptor)
	{
		if (picDescriptor.BorderTop.BorderType != 0)
		{
			SerializeShapeBorder(picDescriptor.BorderTop, "bordertop");
		}
		if (picDescriptor.BorderBottom.BorderType != 0)
		{
			SerializeShapeBorder(picDescriptor.BorderBottom, "borderbottom");
		}
		if (picDescriptor.BorderRight.BorderType != 0)
		{
			SerializeShapeBorder(picDescriptor.BorderRight, "borderright");
		}
		if (picDescriptor.BorderLeft.BorderType != 0)
		{
			SerializeShapeBorder(picDescriptor.BorderLeft, "borderleft");
		}
	}

	private void SerializeShapeBorder(BorderCode border, string localName)
	{
		m_writer.WriteStartElement(localName, "urn:schemas-microsoft-com:office:word");
		m_writer.WriteAttributeString("type", GetShapeBorderStyleAsString((BorderStyle)border.BorderType));
		m_writer.WriteAttributeString("width", border.LineWidth.ToString());
		if (border.Shadow)
		{
			m_writer.WriteAttributeString("shadow", border.Shadow.ToString());
		}
		m_writer.WriteEndElement();
	}

	private string GetShapeBorderStyleAsString(BorderStyle borderStyle)
	{
		return borderStyle switch
		{
			BorderStyle.TwistedLines1 => "twistedLines1", 
			BorderStyle.Triple => "triple", 
			BorderStyle.DashSmallGap => "dashedSmall", 
			BorderStyle.Single => "single", 
			BorderStyle.Hairline => "hairline", 
			BorderStyle.Dot => "dot", 
			BorderStyle.DotDash => "dotDash", 
			BorderStyle.DashLargeGap => "dash", 
			BorderStyle.DotDotDash => "dashDotDot", 
			BorderStyle.Double => "double", 
			BorderStyle.ThinThinSmallGap => "thickThinSmall", 
			BorderStyle.ThinThickSmallGap => "thinThickSmall", 
			BorderStyle.ThinThickThinSmallGap => "thickBetweenThinSmall", 
			BorderStyle.ThickThinMediumGap => "thickThin", 
			BorderStyle.ThinThickMediumGap => "thinThick", 
			BorderStyle.ThickThickThinMediumGap => "thickBetweenThin", 
			BorderStyle.ThickThinLargeGap => "thickThinLarge", 
			BorderStyle.ThinThickLargeGap => "thinThickLarge", 
			BorderStyle.ThinThickThinLargeGap => "thickBetweenThinLarge", 
			BorderStyle.Thick => "thick", 
			BorderStyle.Wave => "wave", 
			BorderStyle.DoubleWave => "doubleWave", 
			BorderStyle.DashDotStroker => "dashDotStroked", 
			BorderStyle.Engrave3D => "threeDEngrave", 
			BorderStyle.Emboss3D => "threeDEmboss", 
			BorderStyle.Outset => "HTMLOutset", 
			BorderStyle.Inset => "HTMLInset", 
			BorderStyle.Cleared => "nil", 
			_ => "none", 
		};
	}

	private string SerializeShapePictStyle(WPicture picture)
	{
		StringBuilder stringBuilder = new StringBuilder();
		if (picture.TextWrappingStyle != 0)
		{
			stringBuilder.Append("position:absolute;");
		}
		stringBuilder.Append("margin-left:");
		stringBuilder.Append(picture.HorizontalPosition.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;margin-top:");
		stringBuilder.Append(picture.VerticalPosition.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;width:");
		stringBuilder.Append(Math.Round(picture.Width, 2).ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;height:");
		stringBuilder.Append(Math.Round(picture.Height, 2).ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt");
		if (picture.Rotation != 0f)
		{
			stringBuilder.Append(";rotation:");
			stringBuilder.Append(((long)GetRotationAngle(picture.Rotation)).ToString(CultureInfo.InvariantCulture));
		}
		if (picture.HorizontalOrigin != HorizontalOrigin.Column)
		{
			stringBuilder.Append(";mso-position-horizontal-relative:");
			stringBuilder.Append(GetHorizOriginAsString(picture.HorizontalOrigin));
		}
		if (picture.VerticalOrigin != VerticalOrigin.Paragraph)
		{
			stringBuilder.Append(";mso-position-vertical-relative:");
			stringBuilder.Append(GetVerticalOrginAsString(picture.VerticalOrigin, isShapeStyle: true));
		}
		if (picture.HorizontalAlignment != 0)
		{
			stringBuilder.Append(";mso-position-horizontal:");
			stringBuilder.Append(picture.HorizontalAlignment.ToString().ToLower());
		}
		if (picture.VerticalAlignment != 0)
		{
			stringBuilder.Append(";mso-position-vertical:");
			stringBuilder.Append(picture.VerticalAlignment.ToString().ToLower());
		}
		if (picture.OrderIndex != int.MaxValue)
		{
			if (picture.OrderIndex > 0 && picture.TextWrappingStyle == TextWrappingStyle.Behind)
			{
				stringBuilder.Append(";z-index:-" + picture.OrderIndex);
			}
			else
			{
				stringBuilder.Append(";z-index:" + picture.OrderIndex);
			}
		}
		else if (picture.TextWrappingStyle == TextWrappingStyle.Behind)
		{
			stringBuilder.Append(";z-index:-1");
		}
		if (picture.Visible)
		{
			stringBuilder.Append(";visibility:visible");
		}
		else
		{
			stringBuilder.Append(";visibility:hidden");
		}
		return stringBuilder.ToString();
	}

	private string SerializeWrapPolygons(WPicture picture)
	{
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 1; i < picture.WrapPolygon.Vertices.Count; i++)
		{
			stringBuilder.Append(picture.WrapPolygon.Vertices[i].X.ToString(CultureInfo.InvariantCulture) + " " + picture.WrapPolygon.Vertices[i].Y.ToString(CultureInfo.InvariantCulture) + " ");
		}
		return stringBuilder.ToString().TrimEnd();
	}

	private void SerializeBookmarkEnd(BookmarkEnd bookmarkEnd)
	{
		if (!bookmarkEnd.IsAfterParagraphMark && !bookmarkEnd.IsAfterCellMark && !bookmarkEnd.IsAfterRowMark && !bookmarkEnd.IsAfterTableMark && !bookmarkEnd.IsToAddInNextPara)
		{
			if ((m_bookmarks.ContainsKey(bookmarkEnd.Name) && !m_isFallBack) || (m_isFallBack && m_FallBackbookmarks.ContainsKey(bookmarkEnd.Name)))
			{
				m_writer.WriteStartElement("w", "bookmarkEnd", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				int num = (m_isFallBack ? m_FallBackbookmarks[bookmarkEnd.Name] : m_bookmarks[bookmarkEnd.Name]);
				m_writer.WriteAttributeString("w", "id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString());
				if (!string.IsNullOrEmpty(bookmarkEnd.DisplacedByCustomXml))
				{
					m_writer.WriteAttributeString("w", "displacedByCustomXml", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", bookmarkEnd.DisplacedByCustomXml);
				}
				m_writer.WriteEndElement();
			}
		}
		else
		{
			BookMarkCollection.Add(bookmarkEnd);
		}
	}

	private void SerializeBookmarkStart(BookmarkStart bookmarkStart)
	{
		string name = bookmarkStart.Name;
		int nextBookmarkID = GetNextBookmarkID();
		if ((!m_bookmarks.ContainsKey(name) || m_isFallBack) && (!m_isFallBack || !m_FallBackbookmarks.ContainsKey(name)))
		{
			if (m_isFallBack)
			{
				m_FallBackbookmarks.Add(name, nextBookmarkID);
			}
			else
			{
				m_bookmarks.Add(name, nextBookmarkID);
			}
			m_writer.WriteStartElement("w", "bookmarkStart", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (bookmarkStart.ColumnFirst >= 0)
			{
				m_writer.WriteAttributeString("w", "colFirst", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", bookmarkStart.ColumnFirst.ToString());
			}
			if (bookmarkStart.ColumnLast >= 0)
			{
				m_writer.WriteAttributeString("w", "colLast", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", bookmarkStart.ColumnLast.ToString());
			}
			m_writer.WriteAttributeString("w", "id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", nextBookmarkID.ToString());
			m_writer.WriteAttributeString("w", "name", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", name);
			if (!string.IsNullOrEmpty(bookmarkStart.DisplacedByCustomXml))
			{
				m_writer.WriteAttributeString("w", "displacedByCustomXml", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", bookmarkStart.DisplacedByCustomXml);
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeEditableRangeEnd(EditableRangeEnd editableRangeEnd)
	{
		if (!editableRangeEnd.IsAfterParagraphMark && !editableRangeEnd.IsAfterCellMark && !editableRangeEnd.IsAfterRowMark && !editableRangeEnd.IsAfterTableMark)
		{
			if (IsSerializingChoiceContent || m_editableRanges.Contains(editableRangeEnd.Id))
			{
				m_writer.WriteStartElement("w", "permEnd", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("w", "id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", editableRangeEnd.Id);
				m_writer.WriteEndElement();
			}
		}
		else if (!IsSerializingChoiceContent)
		{
			EditableRangeCollection.Add(editableRangeEnd);
		}
	}

	private void SerializeEditableRangeStart(EditableRangeStart editableRangeStart)
	{
		_ = editableRangeStart.Id;
		if (!m_editableRanges.Contains(editableRangeStart.Id))
		{
			if (!IsSerializingChoiceContent)
			{
				m_editableRanges.Add(editableRangeStart.Id);
			}
			m_writer.WriteStartElement("w", "permStart", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (editableRangeStart.ColumnFirst >= 0)
			{
				m_writer.WriteAttributeString("w", "colFirst", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", editableRangeStart.ColumnFirst.ToString());
			}
			if (editableRangeStart.ColumnLast >= 0)
			{
				m_writer.WriteAttributeString("w", "colLast", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", editableRangeStart.ColumnLast.ToString());
			}
			if (!string.IsNullOrEmpty(editableRangeStart.Ed))
			{
				m_writer.WriteAttributeString("w", "ed", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", editableRangeStart.Ed);
			}
			if (!string.IsNullOrEmpty(editableRangeStart.EdGrp))
			{
				m_writer.WriteAttributeString("w", "edGrp", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", editableRangeStart.EdGrp);
			}
			m_writer.WriteAttributeString("w", "id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", editableRangeStart.Id.ToString());
			m_writer.WriteEndElement();
		}
	}

	private void SerializeBreak(Break brk)
	{
		BreakType breakType = brk.BreakType;
		m_writer.WriteStartElement("r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeCharacterFormat(brk.CharacterFormat);
		m_writer.WriteStartElement("br", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		switch (breakType)
		{
		case BreakType.ColumnBreak:
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "column");
			break;
		case BreakType.PageBreak:
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "page");
			break;
		default:
			if (brk.CharacterFormat.HasValue(126))
			{
				m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "textWrapping");
				m_writer.WriteAttributeString("clear", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", brk.CharacterFormat.BreakClear.ToString().ToLower());
			}
			break;
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeCommentReference(WComment comment)
	{
		string text = null;
		text = ((!(comment.Format.TagBkmk != "-1")) ? GetNextID().ToString() : ((m_commentsId == null || !m_commentsId.ContainsKey(comment.Format.TagBkmk)) ? GetNextID().ToString() : m_commentsId[comment.Format.TagBkmk]));
		CommentCollection.Add(text, comment);
		m_hasComment = true;
		if (comment.AppendItems)
		{
			WriteCommItems(comment, text);
		}
		m_writer.WriteStartElement("r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteStartElement("commentReference", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void WriteCommItems(WComment comment, string commentId)
	{
		if (comment.CommentedBodyPart != null)
		{
			m_writer.WriteEndElement();
			SerializeCommentRangeStart(commentId);
			SerializeBodyItems(comment.CommentedBodyPart.BodyItems, isLastSection: false);
			SerializeCommentRangeEnd(commentId, comment.CommentRangeEnd);
			m_writer.WriteStartElement("p", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteStartElement("pPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeParagraphFormat(comment.OwnerParagraph.ParagraphFormat, comment.OwnerParagraph);
			m_writer.WriteEndElement();
		}
		else
		{
			if (comment.CommentedItems.Count <= 0)
			{
				return;
			}
			SerializeCommentRangeStart(commentId);
			foreach (ParagraphItem commentedItem in comment.CommentedItems)
			{
				SerializeParagraphItem(commentedItem, isFromCompression: false);
			}
			SerializeCommentRangeEnd(commentId, comment.CommentRangeEnd);
		}
	}

	private void SerializeCommentRangeStart(string commentId)
	{
		m_writer.WriteStartElement("commentRangeStart", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", commentId);
		m_writer.WriteEndElement();
	}

	private void SerializeCommentRangeEnd(string commentId, WCommentMark commentMark)
	{
		if (commentMark == null || !commentMark.IsAfterCellMark)
		{
			m_writer.WriteStartElement("commentRangeEnd", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", commentId);
			m_writer.WriteEndElement();
		}
		else
		{
			CommentMarkCollection.Add(commentMark);
		}
	}

	private void SerializeComments()
	{
		MemoryStream data = new MemoryStream();
		if (IsWord2003ML)
		{
			m_writer.WriteStartElement("pkg", "part", "http://schemas.microsoft.com/office/2006/xmlPackage");
			m_writer.WriteAttributeString("pkg", "name", null, "/word/comments.xml");
			m_writer.WriteAttributeString("pkg", "contentType", null, "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml");
			m_writer.WriteStartElement("pkg", "xmlData", "http://schemas.microsoft.com/office/2006/xmlPackage");
		}
		else
		{
			m_writer = CreateWriter(data);
		}
		m_writer.WriteStartElement("w", "comments", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "v", null, "urn:schemas-microsoft-com:vml");
		m_writer.WriteAttributeString("xmlns", "w10", null, "urn:schemas-microsoft-com:office:word");
		m_writer.WriteAttributeString("xmlns", "o", null, "urn:schemas-microsoft-com:office:office");
		m_writer.WriteAttributeString("xmlns", "ve", null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
		m_writer.WriteAttributeString("xmlns", "r", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
		m_writer.WriteAttributeString("xmlns", "m", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
		m_writer.WriteAttributeString("xmlns", "wne", null, "http://schemas.microsoft.com/office/word/2006/wordml");
		m_writer.WriteAttributeString("xmlns", "a", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "pic", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
		m_writer.WriteAttributeString("xmlns", "wp", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		m_writer.WriteAttributeString("xmlns", "w14", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.microsoft.com/office/word/2010/wordml");
		List<string> list = new List<string>();
		foreach (string key in CommentCollection.Keys)
		{
			WComment wComment = CommentCollection[key];
			if (wComment.ChildEntities.InnerList.Count == 0)
			{
				list.Add(key);
			}
			else
			{
				SerializeComment(wComment, key);
			}
		}
		if (list.Count > 0)
		{
			foreach (string item in list)
			{
				WComment wComment = CommentCollection[item];
				SerializeComment(wComment, item);
			}
		}
		m_writer.WriteEndElement();
		if (IsWord2003ML)
		{
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		else
		{
			m_writer.Flush();
			m_archive.AddItem("word\\comments.xml", data, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
	}

	internal void SerializeComment(WComment comment, string id)
	{
		m_writer.WriteStartElement("w", "comment", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", "id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", id);
		m_writer.WriteAttributeString("w", "author", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", comment.Format.User);
		m_writer.WriteAttributeString("w", "initials", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", comment.Format.UserInitials);
		m_writer.WriteAttributeString("w", "date", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", comment.Format.DateTime.ToString("yyyy-MM-ddTHH:mm:ssZ"));
		TextBodyItem textBodyItem = null;
		for (int i = 0; i < comment.TextBody.Items.Count; i++)
		{
			textBodyItem = comment.TextBody.Items[i];
			SerializeBodyItem(textBodyItem, isLastSection: true);
		}
		m_writer.WriteEndElement();
	}

	private void SerializeCommentMark(WCommentMark commMark)
	{
		string text = null;
		bool flag = false;
		if (!(commMark.CommentId != "-1"))
		{
			return;
		}
		if (commMark.Type == CommentMarkType.CommentStart)
		{
			if (commMark.CommentId != null)
			{
				flag = CommentIdCheck(commMark.CommentId);
			}
			if (!flag)
			{
				TagIdRandomizer.NoneChangeIds.Add(Convert.ToInt32(commMark.CommentId));
			}
			text = GetNextID().ToString();
			if (CommentsId != null && !string.IsNullOrEmpty(commMark.CommentId) && !CommentsId.ContainsKey(commMark.CommentId))
			{
				CommentsId.Add(commMark.CommentId, text);
			}
			SerializeCommentRangeStart(text);
		}
		else if (m_commentsId != null && m_commentsId.ContainsKey(commMark.CommentId))
		{
			text = m_commentsId[commMark.CommentId];
			SerializeCommentRangeEnd(text, commMark);
		}
	}

	private bool CommentIdCheck(string currCommentId)
	{
		if (currCommentId != null)
		{
			char[] array = currCommentId.ToCharArray();
			for (int i = 0; i < array.Length; i++)
			{
				if ((array[i] < '[' && array[i] >= 'A') || (array[i] < '{' && array[i] >= 'a'))
				{
					return true;
				}
			}
		}
		return false;
	}

	private void SerializeCommentsExtended()
	{
		MemoryStream data = new MemoryStream();
		m_writer = CreateWriter(data);
		m_writer.WriteStartElement("w", "commentsEx", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "v", null, "urn:schemas-microsoft-com:vml");
		m_writer.WriteAttributeString("xmlns", "w10", null, "urn:schemas-microsoft-com:office:word");
		m_writer.WriteAttributeString("xmlns", "o", null, "urn:schemas-microsoft-com:office:office");
		m_writer.WriteAttributeString("xmlns", "ve", null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
		m_writer.WriteAttributeString("xmlns", "r", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
		m_writer.WriteAttributeString("xmlns", "m", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
		m_writer.WriteAttributeString("xmlns", "wne", null, "http://schemas.microsoft.com/office/word/2006/wordml");
		m_writer.WriteAttributeString("xmlns", "a", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "pic", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/picture" : "http://schemas.openxmlformats.org/drawingml/2006/picture");
		m_writer.WriteAttributeString("xmlns", "wp", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
		m_writer.WriteAttributeString("xmlns", "w14", null, "http://schemas.microsoft.com/office/word/2010/wordml");
		m_writer.WriteAttributeString("xmlns", "w15", null, "http://schemas.microsoft.com/office/word/2012/wordml");
		foreach (WCommentExtended inner in m_document.CommentsEx.InnerList)
		{
			SerializeCommentExtended(inner);
		}
		m_writer.WriteEndElement();
		m_writer.Flush();
		m_archive.AddItem("word\\commentsExtended.xml", data, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
	}

	private void SerializeCommentExtended(WCommentExtended commentExtended)
	{
		m_writer.WriteStartElement("commentEx", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.microsoft.com/office/word/2012/wordml");
		m_writer.WriteAttributeString("paraId", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.microsoft.com/office/word/2012/wordml", commentExtended.ParaId);
		if (!string.IsNullOrEmpty(commentExtended.ParentParaId))
		{
			m_writer.WriteAttributeString("paraIdParent", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.microsoft.com/office/word/2012/wordml", commentExtended.ParentParaId);
		}
		m_writer.WriteAttributeString("done", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.microsoft.com/office/word/2012/wordml", commentExtended.IsResolved ? "1" : "0");
		m_writer.WriteEndElement();
	}

	private void SerializeTextRange(ParagraphItem item)
	{
		if (!(item is WTextRange))
		{
			return;
		}
		WTextRange wTextRange = item as WTextRange;
		if (string.IsNullOrEmpty(wTextRange.Text))
		{
			return;
		}
		WFootnote wFootnote = null;
		if (wTextRange.OwnerParagraph != null && wTextRange.OwnerParagraph.OwnerTextBody != null)
		{
			wFootnote = wTextRange.OwnerParagraph.OwnerTextBody.Owner as WFootnote;
		}
		if ((wFootnote != null && wTextRange.Text == '\u0002'.ToString()) || (wFootnote != null && wFootnote.IsAutoNumbered && wTextRange.PreviousSibling == null && wTextRange.OwnerParagraph.PreviousSibling == null))
		{
			m_writer.WriteStartElement("w", "r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeCharacterFormat(wTextRange.CharacterFormat);
			if (wFootnote.FootnoteType == FootnoteType.Endnote)
			{
				m_writer.WriteStartElement("endnoteRef", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
			}
			else
			{
				m_writer.WriteStartElement("footnoteRef", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
			return;
		}
		m_writer.WriteStartElement("w", "r", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeCharacterFormat(wTextRange.CharacterFormat);
		bool isDeletedText = false;
		if (wTextRange.RevisionsInternal.Count > 0)
		{
			foreach (Revision item2 in wTextRange.RevisionsInternal)
			{
				if (item2.RevisionType == RevisionType.Deletions)
				{
					isDeletedText = true;
					break;
				}
			}
		}
		SerializeText(wTextRange.Text, isDeletedText, IsFieldCode());
		m_writer.WriteEndElement();
	}

	private bool IsFieldCode()
	{
		if (m_fieldMarkStack != null && m_fieldMarkStack.Count > 0 && CurrentField != null)
		{
			if (CurrentField.FieldSeparator == null)
			{
				return CurrentField.FieldEnd == m_fieldMarkStack.Peek();
			}
			return CurrentField.FieldSeparator == m_fieldMarkStack.Peek();
		}
		return false;
	}

	private void SerializeText(string textToDisplay, bool isDeletedText, bool isInstrText)
	{
		char[] array = new char[32];
		for (int i = 0; i <= 31; i++)
		{
			array[i] = (char)i;
		}
		int startIndex = 0;
		for (int num = textToDisplay.IndexOfAny(array); num != -1; num = textToDisplay.IndexOfAny(array))
		{
			string text = textToDisplay.Substring(startIndex, num);
			char c = textToDisplay[num];
			if (text != string.Empty)
			{
				if (isInstrText)
				{
					SerializeInstrText(text, isDeletedText);
				}
				else
				{
					SerializeRawText(text, isDeletedText);
				}
			}
			switch (c)
			{
			case '\f':
				m_writer.WriteStartElement("w", "br", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("w", "type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "page");
				m_writer.WriteEndElement();
				break;
			case '\t':
				m_writer.WriteStartElement("w", "tab", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
				break;
			case '\v':
				m_writer.WriteStartElement("w", "br", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
				break;
			case '\u001e':
				m_writer.WriteStartElement("noBreakHyphen", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
				break;
			case '\u001f':
				m_writer.WriteStartElement("softHyphen", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
				break;
			case '\u0002':
				m_writer.WriteStartElement("footnoteRef", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
				break;
			case '\u0003':
				m_writer.WriteStartElement("separator", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
				break;
			case '\u0004':
				m_writer.WriteStartElement("continuationSeparator", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
				break;
			case '\u0005':
				m_writer.WriteStartElement("annotationRef", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
				break;
			case '\n':
				m_writer.WriteStartElement("w", "P", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
				break;
			case '\u000e':
				m_writer.WriteStartElement("w", "br", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("w", "type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "column");
				m_writer.WriteEndElement();
				break;
			}
			textToDisplay = textToDisplay.Substring(num + 1);
		}
		if (isInstrText)
		{
			SerializeInstrText(textToDisplay, isDeletedText);
		}
		else
		{
			SerializeRawText(textToDisplay, isDeletedText);
		}
	}

	private void SerializeRawText(string text, bool isDeletedText)
	{
		m_writer.WriteStartElement(isDeletedText ? "delText" : "t", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("xml", "space", "http://www.w3.org/XML/1998/namespace", "preserve");
		m_writer.WriteString(ReplaceInvalidSurrogateCharacters(text));
		m_writer.WriteEndElement();
	}

	private void SerializeInstrText(string text, bool isDeletedText)
	{
		m_writer.WriteStartElement(isDeletedText ? "delInstrText" : "instrText", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("xml", "space", "http://www.w3.org/XML/1998/namespace", "preserve");
		m_writer.WriteString(ReplaceInvalidSurrogateCharacters(text));
		m_writer.WriteEndElement();
	}

	private void SerializeTableOfContents(TableOfContent toc)
	{
		SerializeFieldBegin(toc.TOCField);
	}

	private string GetFieldTypeAsString(FieldType type)
	{
		return type switch
		{
			FieldType.FieldAdvance => "ADVANCE ", 
			FieldType.FieldAuthor => "AUTHOR ", 
			FieldType.FieldAutoNum => "AUTONUM ", 
			FieldType.FieldAutoNumLegal => "AUTONUMLGL ", 
			FieldType.FieldAutoNumOutline => "AUTONUMOUT ", 
			FieldType.FieldAutoText => "AUTOTEXT ", 
			FieldType.FieldAutoTextList => "AUTOTEXTLIST ", 
			FieldType.FieldAsk => "ASK ", 
			FieldType.FieldBarCode => "BARCODE ", 
			FieldType.FieldComments => "COMMENTS ", 
			FieldType.FieldCreateDate => "CREATEDATE ", 
			FieldType.FieldDate => "DATE ", 
			FieldType.FieldDocProperty => "DOCPROPERTY ", 
			FieldType.FieldDocVariable => "DOCVARIABLE ", 
			FieldType.FieldEditTime => "EDITTIME ", 
			FieldType.FieldIf => "IF ", 
			FieldType.FieldFillIn => "FILLIN ", 
			FieldType.FieldFileName => "FILENAME ", 
			FieldType.FieldFileSize => "FILESIZE ", 
			FieldType.FieldFormCheckBox => "FORMCHECKBOX ", 
			FieldType.FieldFormDropDown => "FORMDROPDOWN ", 
			FieldType.FieldFormTextInput => "FORMTEXT ", 
			FieldType.FieldFormula => "= ", 
			FieldType.FieldGoToButton => "GOTOBUTTON ", 
			FieldType.FieldHyperlink => "HYPERLINK ", 
			FieldType.FieldIncludePicture => "INCLUDEPICTURE ", 
			FieldType.FieldIncludeText => "INCLUDETEXT ", 
			FieldType.FieldIndex => "INDEX ", 
			FieldType.FieldInfo => "INFO ", 
			FieldType.FieldKeyWord => "KEYWORDS ", 
			FieldType.FieldLastSavedBy => "LASTSAVEDBY ", 
			FieldType.FieldLink => "LINK ", 
			FieldType.FieldListNum => "LISTNUM ", 
			FieldType.FieldMacroButton => "MACROBUTTON ", 
			FieldType.FieldMergeField => "MERGEFIELD ", 
			FieldType.FieldNoteRef => "NOTEREF ", 
			FieldType.FieldNumChars => "NUMCHARS ", 
			FieldType.FieldNumPages => "NUMPAGES ", 
			FieldType.FieldNumWords => "NUMWORDS ", 
			FieldType.FieldPage => "PAGE ", 
			FieldType.FieldPageRef => "PAGEREF ", 
			FieldType.FieldPrint => "PRINT ", 
			FieldType.FieldPrintDate => "PRINTDATE ", 
			FieldType.FieldPrivate => "PRIVATE ", 
			FieldType.FieldQuote => "QUOTE ", 
			FieldType.FieldRef => "REF ", 
			FieldType.FieldRevisionNum => "REVNUM ", 
			FieldType.FieldSaveDate => "SAVEDATE ", 
			FieldType.FieldSection => "SECTION ", 
			FieldType.FieldSectionPages => "SECTIONPAGES ", 
			FieldType.FieldSequence => "SEQ ", 
			FieldType.FieldSet => "SET ", 
			FieldType.FieldStyleRef => "STYLEREF ", 
			FieldType.FieldSubject => "SUBJECT ", 
			FieldType.FieldSymbol => "SYMBOL ", 
			FieldType.FieldTemplate => "TEMPLATE ", 
			FieldType.FieldTime => "TIME ", 
			FieldType.FieldTitle => "TITLE ", 
			FieldType.FieldTOA => "TOA ", 
			FieldType.FieldTOC => "TOC ", 
			FieldType.FieldUserAddress => "USERADDRESS ", 
			FieldType.FieldUserInitials => "USERINITIALS ", 
			FieldType.FieldUserName => "USERNAME ", 
			FieldType.FieldAddin => "ADDIN ", 
			FieldType.FieldAddressBlock => "ADDRESSBLOCK", 
			FieldType.FieldBidiOutline => "BIDIOUTLINE", 
			FieldType.FieldIndexEntry => "XE ", 
			_ => string.Empty, 
		};
	}

	private void SerializeSectionProperties(WSection section, bool isTrackrevision)
	{
		m_writer.WriteStartElement("w", "sectPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (!isTrackrevision)
		{
			SerializeHFReference(section.HeadersFooters);
		}
		if (IsNeedToSerializeSectionFootNoteProperties(section))
		{
			SerializeFootnoteProperties(section);
		}
		if (IsNeedToSerializeSectionEndNoteProperties(section))
		{
			SerializeEndnoteProperties(section);
		}
		SerializeSectionType(section.BreakCode);
		SerializePageSetup(section.PageSetup);
		SerializeColumns(section);
		SerializeSectionProtection(section);
		if (section.PageSetup.VerticalAlignment != 0)
		{
			m_writer.WriteStartElement("vAlign", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			switch (section.PageSetup.VerticalAlignment)
			{
			case PageAlignment.Top:
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "top");
				break;
			case PageAlignment.Middle:
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "center");
				break;
			case PageAlignment.Justified:
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "both");
				break;
			case PageAlignment.Bottom:
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "bottom");
				break;
			}
			m_writer.WriteEndElement();
		}
		if (section.PageSetup.DifferentFirstPage)
		{
			m_writer.WriteStartElement("titlePg", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		SerializeTextDirection(section);
		if (section.PageSetup.Bidi)
		{
			m_writer.WriteStartElement("bidi", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		SerializeDocGrid(section);
		if (section.SectionFormat.Revisions.Count > 0 && !m_isAlternativeSection)
		{
			foreach (Revision revision in section.SectionFormat.Revisions)
			{
				if (revision.RevisionType != RevisionType.Formatting)
				{
					continue;
				}
				SerializeTrackChangeProps("sectPrChange", revision.Author, revision.Date);
				if (section.SectionFormat.OldPropertiesHash.Count > 0 || section.PageSetup.OldPropertiesHash.Count > 0 || section.PageSetup.Margins.OldPropertiesHash.Count > 0 || section.PageSetup.PageNumbers.OldPropertiesHash.Count > 0)
				{
					m_isAlternativeSection = true;
					Dictionary<int, object> dictionary = new Dictionary<int, object>(section.SectionFormat.OldPropertiesHash);
					Dictionary<int, object> dictionary2 = new Dictionary<int, object>(section.PageSetup.OldPropertiesHash);
					Dictionary<int, object> dictionary3 = new Dictionary<int, object>(section.PageSetup.PageNumbers.OldPropertiesHash);
					Dictionary<int, object> dictionary4 = new Dictionary<int, object>(section.PageSetup.Margins.OldPropertiesHash);
					Dictionary<int, object> dictionary5 = new Dictionary<int, object>(section.SectionFormat.PropertiesHash);
					Dictionary<int, object> dictionary6 = new Dictionary<int, object>(section.PageSetup.PropertiesHash);
					Dictionary<int, object> dictionary7 = new Dictionary<int, object>(section.PageSetup.PageNumbers.PropertiesHash);
					Dictionary<int, object> dictionary8 = new Dictionary<int, object>(section.PageSetup.Margins.PropertiesHash);
					ColumnCollection columnCollection = new ColumnCollection(section);
					if (section.SectionFormat.SectFormattingColumnCollection != null)
					{
						for (int i = 0; i < section.Columns.Count; i++)
						{
							columnCollection.Add(section.Columns[i]);
						}
						if (section.Columns.Count > 0)
						{
							section.Columns.InnerList.Clear();
						}
						for (int j = 0; j < section.SectionFormat.SectFormattingColumnCollection.Count; j++)
						{
							Column column = new Column(section.Document);
							section.Columns.Add(column);
							foreach (KeyValuePair<int, object> item in section.SectionFormat.SectFormattingColumnCollection[j].OldPropertiesHash)
							{
								section.Columns[j].PropertiesHash[item.Key] = item.Value;
							}
						}
					}
					section.SectionFormat.PropertiesHash.Clear();
					section.SectionFormat.OldPropertiesHash.Clear();
					section.PageSetup.OldPropertiesHash.Clear();
					section.PageSetup.PropertiesHash.Clear();
					section.PageSetup.PageNumbers.OldPropertiesHash.Clear();
					section.PageSetup.PageNumbers.PropertiesHash.Clear();
					section.PageSetup.Margins.OldPropertiesHash.Clear();
					section.PageSetup.Margins.PropertiesHash.Clear();
					foreach (KeyValuePair<int, object> item2 in dictionary)
					{
						section.SectionFormat.PropertiesHash[item2.Key] = item2.Value;
					}
					foreach (KeyValuePair<int, object> item3 in dictionary2)
					{
						section.PageSetup.PropertiesHash[item3.Key] = item3.Value;
					}
					foreach (KeyValuePair<int, object> item4 in dictionary3)
					{
						section.PageSetup.PageNumbers.PropertiesHash[item4.Key] = item4.Value;
					}
					foreach (KeyValuePair<int, object> item5 in dictionary4)
					{
						section.PageSetup.Margins.PropertiesHash[item5.Key] = item5.Value;
					}
					SerializeSectionProperties(section, isTrackrevision: true);
					if (section.Columns.Count > 0)
					{
						section.Columns.InnerList.Clear();
					}
					for (int k = 0; k < columnCollection.Count; k++)
					{
						section.Columns.Add(columnCollection[k]);
					}
					columnCollection.Close();
					section.SectionFormat.PropertiesHash.Clear();
					section.PageSetup.PropertiesHash.Clear();
					section.PageSetup.PageNumbers.PropertiesHash.Clear();
					section.PageSetup.Margins.PropertiesHash.Clear();
					foreach (KeyValuePair<int, object> item6 in dictionary)
					{
						section.SectionFormat.OldPropertiesHash[item6.Key] = item6.Value;
					}
					foreach (KeyValuePair<int, object> item7 in dictionary5)
					{
						section.SectionFormat.PropertiesHash[item7.Key] = item7.Value;
					}
					foreach (KeyValuePair<int, object> item8 in dictionary6)
					{
						section.PageSetup.OldPropertiesHash[item8.Key] = item8.Value;
					}
					foreach (KeyValuePair<int, object> item9 in dictionary6)
					{
						section.PageSetup.PropertiesHash[item9.Key] = item9.Value;
					}
					foreach (KeyValuePair<int, object> item10 in dictionary3)
					{
						section.PageSetup.PageNumbers.OldPropertiesHash[item10.Key] = item10.Value;
					}
					foreach (KeyValuePair<int, object> item11 in dictionary7)
					{
						section.PageSetup.PageNumbers.PropertiesHash[item11.Key] = item11.Value;
					}
					foreach (KeyValuePair<int, object> item12 in dictionary4)
					{
						section.PageSetup.Margins.OldPropertiesHash[item12.Key] = item12.Value;
					}
					foreach (KeyValuePair<int, object> item13 in dictionary8)
					{
						section.PageSetup.Margins.PropertiesHash[item13.Key] = item13.Value;
					}
					m_isAlternativeSection = false;
				}
				m_writer.WriteEndElement();
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializeHFReference(WHeadersFooters headerFooters)
	{
		string empty = string.Empty;
		if (headerFooters.FirstPageHeader.Items.Count > 0 || headerFooters.FirstPageHeader.WriteWatermark)
		{
			m_writer.WriteStartElement("headerReference", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "first");
			empty = GetNextRelationShipID();
			m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", empty);
			AddHeaderFooter(headerFooters.FirstPageHeader, HeaderFooterType.FirstPageHeader, empty);
			m_writer.WriteEndElement();
		}
		if (headerFooters.FirstPageFooter.Items.Count > 0)
		{
			m_writer.WriteStartElement("footerReference", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "first");
			empty = GetNextRelationShipID();
			m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", empty);
			AddHeaderFooter(headerFooters.FirstPageFooter, HeaderFooterType.FirstPageFooter, empty);
			m_writer.WriteEndElement();
		}
		if (headerFooters.EvenHeader.Items.Count > 0 || headerFooters.EvenHeader.WriteWatermark)
		{
			m_writer.WriteStartElement("headerReference", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "even");
			empty = GetNextRelationShipID();
			m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", empty);
			AddHeaderFooter(headerFooters.EvenHeader, HeaderFooterType.EvenHeader, empty);
			m_writer.WriteEndElement();
		}
		if (headerFooters.EvenFooter.Items.Count > 0)
		{
			m_writer.WriteStartElement("footerReference", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "even");
			empty = GetNextRelationShipID();
			m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", empty);
			AddHeaderFooter(headerFooters.EvenFooter, HeaderFooterType.EvenFooter, empty);
			m_writer.WriteEndElement();
		}
		if (headerFooters.OddHeader.Items.Count > 0 || headerFooters.OddHeader.WriteWatermark)
		{
			m_writer.WriteStartElement("headerReference", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "default");
			empty = GetNextRelationShipID();
			m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", empty);
			AddHeaderFooter(headerFooters.OddHeader, HeaderFooterType.OddHeader, empty);
			m_writer.WriteEndElement();
		}
		if (headerFooters.OddFooter.Items.Count > 0)
		{
			m_writer.WriteStartElement("footerReference", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "default");
			empty = GetNextRelationShipID();
			m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", empty);
			AddHeaderFooter(headerFooters.OddFooter, HeaderFooterType.OddFooter, empty);
			m_writer.WriteEndElement();
		}
	}

	private void SerializeDocGrid(WSection section)
	{
		if (section.PageSetup.LinePitch > 0f)
		{
			m_writer.WriteStartElement("docGrid", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			switch (section.PageSetup.PitchType)
			{
			case GridPitchType.LinesOnly:
				m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "lines");
				break;
			case GridPitchType.CharsAndLine:
				m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "linesAndChars");
				break;
			case GridPitchType.SnapToChars:
				m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "snapToChars");
				break;
			}
			ushort num = (ushort)Math.Round(section.PageSetup.LinePitch * 20f);
			m_writer.WriteAttributeString("linePitch", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString());
			m_writer.WriteEndElement();
		}
	}

	private void SerializeSectionProtection(WSection section)
	{
		if (!section.ProtectForm)
		{
			m_writer.WriteStartElement("w", "formProt", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
			m_writer.WriteEndElement();
		}
	}

	private void SerializeTextDirection(WSection section)
	{
		if (section.TextDirection != 0)
		{
			m_writer.WriteStartElement("w", "textDirection", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			switch (section.TextDirection)
			{
			case DocTextDirection.LeftToRightRotated:
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "btLr");
				break;
			case DocTextDirection.RightToLeft:
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "lrTbV");
				break;
			case DocTextDirection.RightToLeftRotated:
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "tbRlV");
				break;
			case DocTextDirection.TopToBottom:
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "tbRl");
				break;
			case DocTextDirection.TopToBottomRotated:
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "lrTbV");
				break;
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeColumns(WSection section)
	{
		ColumnCollection columns = section.Columns;
		m_writer.WriteStartElement("cols", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (columns.Count > 0)
		{
			m_writer.WriteAttributeString("num", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", columns.Count.ToString());
		}
		if (section.PageSetup.DrawLinesBetweenCols)
		{
			m_writer.WriteAttributeString("sep", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
		}
		if (columns.OwnerSection.PageSetup.EqualColumnWidth)
		{
			m_writer.WriteAttributeString("equalWidth", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
			m_writer.WriteAttributeString("space", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (IsStrict ? ((columns.Count > 0) ? columns[0].Space : 36f).ToString() : ToString((columns.Count > 0) ? (columns[0].Space * 20f) : 720f)) + (IsStrict ? "pt" : ""));
		}
		else if (columns.Count > 0)
		{
			m_writer.WriteAttributeString("equalWidth", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
			foreach (Column item in columns)
			{
				m_writer.WriteStartElement("col", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", IsStrict ? item.Width.ToString() : (ToString(item.Width * 20f) + (IsStrict ? "pt" : "")));
				m_writer.WriteAttributeString("space", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", IsStrict ? item.Space.ToString() : (ToString(item.Space * 20f) + (IsStrict ? "pt" : "")));
				m_writer.WriteEndElement();
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializePageSetup(WPageSetup pageSetup)
	{
		SerializePageSize(pageSetup);
		SerializePageMargins(pageSetup);
		if (pageSetup.FirstPageTray > PrinterPaperTray.DefaultBin || pageSetup.OtherPagesTray > PrinterPaperTray.DefaultBin)
		{
			m_writer.WriteStartElement("paperSrc", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (pageSetup.FirstPageTray > PrinterPaperTray.DefaultBin)
			{
				m_writer.WriteAttributeString("first", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ((int)pageSetup.FirstPageTray).ToString());
			}
			if (pageSetup.OtherPagesTray > PrinterPaperTray.DefaultBin)
			{
				m_writer.WriteAttributeString("other", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ((int)pageSetup.OtherPagesTray).ToString());
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteStartElement("pgBorders", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (pageSetup.PageBordersApplyType == PageBordersApplyType.FirstPage)
		{
			m_writer.WriteAttributeString("display", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "firstPage");
		}
		else if (pageSetup.PageBordersApplyType == PageBordersApplyType.AllExceptFirstPage)
		{
			m_writer.WriteAttributeString("display", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "notFirstPage");
		}
		if (pageSetup.PageBorderOffsetFrom == PageBorderOffsetFrom.PageEdge)
		{
			m_writer.WriteAttributeString("offsetFrom", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "page");
		}
		if (!pageSetup.IsFrontPageBorder)
		{
			m_writer.WriteAttributeString("zOrder", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "back");
		}
		SerializePageBorders(pageSetup.Borders);
		m_writer.WriteEndElement();
		SerializeLineNumberType(pageSetup);
		SerializePageNumberType(pageSetup);
	}

	private void SerializePageBorders(Borders borders)
	{
		SerializeBorder(borders.Top, "top", 8);
		SerializeBorder(borders.Left, "left", 8);
		SerializeBorder(borders.Bottom, "bottom", 8);
		SerializeBorder(borders.Right, "right", 8);
	}

	private void SerializeTableCellBorders(CellFormat format)
	{
		Borders borders = format.Borders;
		if (!IsNoneBorder(borders))
		{
			m_writer.WriteStartElement("tcBorders", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeBorders(format.Borders, 8);
			m_writer.WriteEndElement();
		}
	}

	private bool IsNoneBorder(Border border)
	{
		if (border.BorderType != 0 || border.HasNoneStyle)
		{
			if (border.BorderType == BorderStyle.Cleared)
			{
				return border.HasNoneStyle;
			}
			return false;
		}
		return true;
	}

	private void SerializeBorders(Borders borders, int multipler)
	{
		SerializeBorder(borders.Top, "top", multipler);
		SerializeBorder(borders.Left, IsStrict ? "start" : "left", multipler);
		SerializeBorder(borders.Bottom, "bottom", multipler);
		SerializeBorder(borders.Right, IsStrict ? "end" : "right", multipler);
		SerializeBorder(borders.Horizontal, "insideH", multipler);
		SerializeBorder(borders.Vertical, "insideV", multipler);
		SerializeBorder(borders.DiagonalDown, "tl2br", multipler);
		SerializeBorder(borders.DiagonalUp, "tr2bl", multipler);
	}

	private void SerializePageMargins(WPageSetup pageSetup)
	{
		m_writer.WriteStartElement("pgMar", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		int num = (IsStrict ? ((int)Math.Round(pageSetup.Margins.Top)) : ((int)Math.Round(pageSetup.Margins.Top * 20f)));
		m_writer.WriteAttributeString("top", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num + (IsStrict ? "pt" : ""));
		num = (IsStrict ? ((int)Math.Round(pageSetup.Margins.Right)) : ((int)Math.Round(pageSetup.Margins.Right * 20f)));
		m_writer.WriteAttributeString("right", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num + (IsStrict ? "pt" : ""));
		num = (IsStrict ? ((int)Math.Round(pageSetup.Margins.Bottom)) : ((int)Math.Round(pageSetup.Margins.Bottom * 20f)));
		m_writer.WriteAttributeString("bottom", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num + (IsStrict ? "pt" : ""));
		num = (IsStrict ? ((int)Math.Round(pageSetup.Margins.Left)) : ((int)Math.Round(pageSetup.Margins.Left * 20f)));
		m_writer.WriteAttributeString("left", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num + (IsStrict ? "pt" : ""));
		if (pageSetup.HeaderDistance >= 0f)
		{
			m_writer.WriteAttributeString("header", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (IsStrict ? pageSetup.HeaderDistance.ToString() : ToString(pageSetup.HeaderDistance * 20f)) + (IsStrict ? "pt" : ""));
		}
		if (pageSetup.FooterDistance >= 0f)
		{
			m_writer.WriteAttributeString("footer", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (IsStrict ? pageSetup.FooterDistance.ToString() : ToString(pageSetup.FooterDistance * 20f)) + (IsStrict ? "pt" : ""));
		}
		num = (IsStrict ? ((int)Math.Round(pageSetup.Margins.Gutter)) : ((int)Math.Round(pageSetup.Margins.Gutter * 20f)));
		m_writer.WriteAttributeString("gutter", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num + (IsStrict ? "pt" : ""));
		m_writer.WriteEndElement();
	}

	private void SerializePageSize(WPageSetup pageSetup)
	{
		m_writer.WriteStartElement("pgSz", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (IsStrict ? pageSetup.PageSize.Width.ToString() : ToString(pageSetup.PageSize.Width * 20f)) + (IsStrict ? "pt" : ""));
		m_writer.WriteAttributeString("h", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (IsStrict ? pageSetup.PageSize.Height.ToString() : ToString(pageSetup.PageSize.Height * 20f)) + (IsStrict ? "pt" : ""));
		if (pageSetup.Orientation == PageOrientation.Landscape)
		{
			m_writer.WriteAttributeString("orient", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "landscape");
		}
		m_writer.WriteEndElement();
	}

	private void SerializePageNumberType(WPageSetup pageSetup)
	{
		m_writer.WriteStartElement("pgNumType", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		string pageNumType = GetPageNumType(pageSetup.PageNumberStyle);
		m_writer.WriteAttributeString("fmt", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", pageNumType);
		if (pageSetup.RestartPageNumbering)
		{
			m_writer.WriteAttributeString("start", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", pageSetup.PageStartingNumber.ToString());
		}
		if (pageSetup.PageNumbers.HeadingLevelForChapter != 0)
		{
			m_writer.WriteAttributeString("chapStyle", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", Convert.ToInt32(pageSetup.PageNumbers.HeadingLevelForChapter).ToString());
			switch (pageSetup.PageNumbers.ChapterPageSeparator)
			{
			case ChapterPageSeparatorType.Colon:
				m_writer.WriteAttributeString("chapSep", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "colon");
				break;
			case ChapterPageSeparatorType.Hyphen:
				m_writer.WriteAttributeString("chapSep", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "hyphen");
				break;
			case ChapterPageSeparatorType.Period:
				m_writer.WriteAttributeString("chapSep", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "period");
				break;
			case ChapterPageSeparatorType.EmDash:
				m_writer.WriteAttributeString("chapSep", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "emDash");
				break;
			case ChapterPageSeparatorType.EnDash:
				m_writer.WriteAttributeString("chapSep", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "enDash");
				break;
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializeLineNumberType(WPageSetup pageSetup)
	{
		if (pageSetup.LineNumberingStep != 0)
		{
			m_writer.WriteStartElement("lnNumType", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (pageSetup.LineNumberingStep != 0)
			{
				m_writer.WriteAttributeString("countBy", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", pageSetup.LineNumberingStep.ToString());
			}
			if (pageSetup.LineNumberingStartValue != 0)
			{
				int lineNumberingStartValue = pageSetup.LineNumberingStartValue;
				m_writer.WriteAttributeString("start", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (lineNumberingStartValue == -1) ? lineNumberingStartValue.ToString() : (lineNumberingStartValue - 1).ToString());
			}
			if (pageSetup.LineNumberingDistanceFromText != 0f)
			{
				m_writer.WriteAttributeString("distance", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(pageSetup.LineNumberingDistanceFromText * 20f));
			}
			switch (pageSetup.LineNumberingMode)
			{
			case LineNumberingMode.RestartPage:
				m_writer.WriteAttributeString("restart", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "newPage");
				break;
			case LineNumberingMode.RestartSection:
				m_writer.WriteAttributeString("restart", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "newSection");
				break;
			case LineNumberingMode.Continuous:
				m_writer.WriteAttributeString("restart", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "continuous");
				break;
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeSectionType(SectionBreakCode sectionBreakCode)
	{
		m_writer.WriteStartElement("w", "type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetSectionBreakCode(sectionBreakCode));
		m_writer.WriteEndElement();
	}

	private string GetSectionBreakCode(SectionBreakCode sectionBreakCode)
	{
		return sectionBreakCode switch
		{
			SectionBreakCode.NewColumn => "nextColumn", 
			SectionBreakCode.NewPage => "nextPage", 
			SectionBreakCode.EvenPage => "evenPage", 
			SectionBreakCode.Oddpage => "oddPage", 
			_ => "continuous", 
		};
	}

	private void SerializeEndnoteProperties(WSection section)
	{
		m_writer.WriteStartElement("endnotePr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeEndnoteFootnoteNumberFormat(section, isFootnote: false);
		if (section.PageSetup.InitialEndnoteNumber > 1)
		{
			SerializeEndnoteFootnoteElement("numStart", section.PageSetup.InitialEndnoteNumber.ToString());
		}
		if (section.PageSetup.RestartIndexForEndnote == EndnoteRestartIndex.RestartForEachSection)
		{
			SerializeEndnoteFootnoteElement("numRestart", "eachSect");
		}
		m_writer.WriteEndElement();
	}

	private void SerializeFootnoteProperties(WSection section)
	{
		m_writer.WriteStartElement("footnotePr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeFootnotePosition(section);
		SerializeEndnoteFootnoteNumberFormat(section, isFootnote: true);
		if (section.PageSetup.InitialFootnoteNumber > 1)
		{
			SerializeEndnoteFootnoteElement("numStart", section.PageSetup.InitialFootnoteNumber.ToString());
		}
		if (section.PageSetup.RestartIndexForFootnotes == FootnoteRestartIndex.RestartForEachPage)
		{
			SerializeEndnoteFootnoteElement("numRestart", "eachPage");
		}
		else if (section.PageSetup.RestartIndexForFootnotes == FootnoteRestartIndex.RestartForEachSection)
		{
			SerializeEndnoteFootnoteElement("numRestart", "eachSect");
		}
		m_writer.WriteEndElement();
	}

	private bool IsNeedToSerializeSectionFootNoteProperties(WSection section)
	{
		if (section.PageSetup.FootnotePosition == FootnotePosition.PrintAtBottomOfPage && section.PageSetup.InitialFootnoteNumber <= 1 && section.PageSetup.FootnoteNumberFormat == FootEndNoteNumberFormat.Arabic)
		{
			return section.PageSetup.RestartIndexForFootnotes != FootnoteRestartIndex.DoNotRestart;
		}
		return true;
	}

	private bool IsNeedToSerializeSectionEndNoteProperties(WSection section)
	{
		if (section.PageSetup.EndnotePosition == EndnotePosition.DisplayEndOfDocument && section.PageSetup.InitialEndnoteNumber <= 1 && section.PageSetup.EndnoteNumberFormat == FootEndNoteNumberFormat.LowerCaseRoman)
		{
			return section.PageSetup.RestartIndexForEndnote != EndnoteRestartIndex.DoNotRestart;
		}
		return true;
	}

	private bool IsNeedToSerializeDocumentFootNoteProperties()
	{
		if (m_document.FootnotePosition == FootnotePosition.PrintAtBottomOfPage && m_document.InitialFootnoteNumber <= 1 && m_document.FootnoteNumberFormat == FootEndNoteNumberFormat.Arabic && m_document.RestartIndexForFootnotes == FootnoteRestartIndex.DoNotRestart)
		{
			return HasFootnote;
		}
		return true;
	}

	private bool IsNeedToSerializeDocumentEndNoteProperties()
	{
		if (m_document.EndnotePosition == EndnotePosition.DisplayEndOfDocument && m_document.InitialEndnoteNumber <= 1 && m_document.EndnoteNumberFormat == FootEndNoteNumberFormat.LowerCaseRoman && m_document.RestartIndexForEndnote == EndnoteRestartIndex.DoNotRestart)
		{
			return HasEndnote;
		}
		return true;
	}

	private void SerializeEndnoteFootnoteElement(string elemName, string elemValue)
	{
		m_writer.WriteStartElement(elemName, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", elemValue);
		m_writer.WriteEndElement();
	}

	private void SerializeEndnoteFootnoteNumberFormat(WSection section, bool isFootnote)
	{
		switch (isFootnote ? section.PageSetup.FootnoteNumberFormat : section.PageSetup.EndnoteNumberFormat)
		{
		case FootEndNoteNumberFormat.Arabic:
			if (!isFootnote)
			{
				SerializeEndnoteFootnoteElement("numFmt", "decimal");
			}
			break;
		case FootEndNoteNumberFormat.LowerCaseLetter:
			SerializeEndnoteFootnoteElement("numFmt", "lowerLetter");
			break;
		case FootEndNoteNumberFormat.UpperCaseLetter:
			SerializeEndnoteFootnoteElement("numFmt", "upperLetter");
			break;
		case FootEndNoteNumberFormat.LowerCaseRoman:
			if (isFootnote)
			{
				SerializeEndnoteFootnoteElement("numFmt", "lowerRoman");
			}
			break;
		case FootEndNoteNumberFormat.UpperCaseRoman:
			SerializeEndnoteFootnoteElement("numFmt", "upperRoman");
			break;
		}
	}

	private void SerializeEndnoteFootnoteNumberFormat(bool isFootnote)
	{
		switch (isFootnote ? m_document.FootnoteNumberFormat : m_document.EndnoteNumberFormat)
		{
		case FootEndNoteNumberFormat.Arabic:
			if (!isFootnote)
			{
				SerializeEndnoteFootnoteElement("numFmt", "decimal");
			}
			break;
		case FootEndNoteNumberFormat.LowerCaseLetter:
			SerializeEndnoteFootnoteElement("numFmt", "lowerLetter");
			break;
		case FootEndNoteNumberFormat.UpperCaseLetter:
			SerializeEndnoteFootnoteElement("numFmt", "upperLetter");
			break;
		case FootEndNoteNumberFormat.LowerCaseRoman:
			if (isFootnote)
			{
				SerializeEndnoteFootnoteElement("numFmt", "lowerRoman");
			}
			break;
		case FootEndNoteNumberFormat.UpperCaseRoman:
			SerializeEndnoteFootnoteElement("numFmt", "upperRoman");
			break;
		}
	}

	private void AddHeaderFooter(HeaderFooter hf, HeaderFooterType hfType, string id)
	{
		if (!HeadersFooters.ContainsKey(hfType))
		{
			Dictionary<string, HeaderFooter> value = new Dictionary<string, HeaderFooter>();
			HeadersFooters.Add(hfType, value);
		}
		HeadersFooters[hfType].Add(id, hf);
	}

	private void SerializeThemes()
	{
		MemoryStream data = new MemoryStream();
		if (!IsWord2003ML)
		{
			m_writer = CreateWriter(data);
		}
		m_writer.WriteStartElement("a", "theme", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "a", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("name", "Office Theme");
		m_writer.WriteStartElement("themeElements", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeColorScheme();
		SerializeFontScheme();
		SerializeFormatScheme();
		m_writer.WriteEndElement();
		if (m_document.Themes.DocxProps.ContainsKey("objectDefaults"))
		{
			SerializeDocxStream(m_document.Themes.DocxProps, "objectDefaults");
		}
		if (m_document.Themes.DocxProps.ContainsKey("extraClrSchemeLst"))
		{
			SerializeDocxStream(m_document.Themes.DocxProps, "extraClrSchemeLst");
		}
		if (m_document.Themes.DocxProps.ContainsKey("extLst"))
		{
			SerializeDocxStream(m_document.Themes.DocxProps, "extLst");
		}
		m_writer.WriteEndElement();
		if (!IsWord2003ML)
		{
			m_writer.Flush();
			m_archive.AddItem("word\\theme\\theme1.xml", data, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
	}

	private void SerializeFormatScheme()
	{
		new Shape(m_document);
		m_writer.WriteStartElement("fmtScheme", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("name", m_document.Themes.FmtScheme.FmtName);
		m_writer.WriteStartElement("fillStyleLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeFillStyleList(m_document.Themes.FmtScheme.FillFormats);
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("lnStyleLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		for (int i = 0; i < m_document.Themes.FmtScheme.LnStyleScheme.Count; i++)
		{
			SerializeLineStyleList(m_document.Themes.FmtScheme.LnStyleScheme[i]);
		}
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("effectStyleLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		for (int j = 0; j < m_document.Themes.FmtScheme.EffectStyles.Count; j++)
		{
			if (m_document.Themes.FmtScheme.EffectStyles[j] != null)
			{
				EffectFormat effectFormat = m_document.Themes.FmtScheme.EffectStyles[j];
				m_writer.WriteStartElement("effectStyle", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteStartElement("a", "effectLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				SerializeEffectStyles(effectFormat);
				m_writer.WriteEndElement();
				if (effectFormat.IsSceneProperties)
				{
					SerializeThreeDSceneEffects(effectFormat.ThreeDFormat);
				}
				if (effectFormat.IsShapeProperties)
				{
					SerializeThreeDShapeEffects(effectFormat.ThreeDFormat);
				}
				m_writer.WriteEndElement();
			}
		}
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("bgFillStyleLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeFillStyleList(m_document.Themes.FmtScheme.BgFillFormats);
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeFillStyleList(List<FillFormat> fillFormats)
	{
		for (int i = 0; i < fillFormats.Count; i++)
		{
			FillFormat fillFormat = fillFormats[i];
			if (fillFormat.FillType == FillType.FillSolid)
			{
				SerializeThemeSolidFill(fillFormat);
			}
			else if (fillFormat.FillType == FillType.FillGradient)
			{
				SerializeThemeGradient(fillFormat.GradientFill);
			}
			else if (fillFormat.FillType == FillType.FillTextured || fillFormat.FillType == FillType.FillPicture)
			{
				Shape shape = new Shape(m_document);
				shape.FillFormat = m_document.Themes.FmtScheme.FillFormats[i];
				Entity baseEntity = shape.GetBaseEntity(shape);
				SerializeBlipFill(shape.FillFormat, baseEntity, null, null);
			}
			else if (fillFormat.FillType == FillType.FillPatterned)
			{
				SerializeThemePattern(fillFormat);
			}
			else if (fillFormat.FillType == FillType.None)
			{
				m_writer.WriteStartElement("noFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteEndElement();
			}
		}
	}

	private void SerializeThemePattern(FillFormat fillFormat)
	{
		m_writer.WriteStartElement("pattFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("prst", GetPatternFillType(fillFormat.Pattern));
		if (fillFormat.ForeColor == Color.Empty || fillFormat.Color == Color.Empty || fillFormat.FillSchemeColorTransforms.Count > 0)
		{
			m_writer.WriteStartElement("fgClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (fillFormat.ForeColor == Color.Empty || fillFormat.FillSchemeColorTransforms.Count > 0)
			{
				SerializeThemeColor(fillFormat.FillSchemeColorTransforms);
			}
			else
			{
				m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(fillFormat.ForeColor));
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
			m_writer.WriteStartElement("bgClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (fillFormat.Color == Color.Empty || fillFormat.FillSchemeColorTransforms.Count > 0)
			{
				SerializeThemeColor(fillFormat.FillSchemeColorTransforms);
			}
			else
			{
				m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(fillFormat.Color));
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeThemeColor(List<DictionaryEntry> fillSchemeColorTransforms)
	{
		m_writer.WriteStartElement("schemeClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("val", "phClr");
		if (fillSchemeColorTransforms.Count > 0)
		{
			for (int i = 0; i < fillSchemeColorTransforms.Count; i++)
			{
				string text = ((fillSchemeColorTransforms[i].Key.ToString().StartsWith("fgClr") || fillSchemeColorTransforms[i].Key.ToString().StartsWith("bgClr")) ? fillSchemeColorTransforms[i].Key.ToString().Remove(0, 5) : fillSchemeColorTransforms[i].Key.ToString());
				if (!string.IsNullOrEmpty(text))
				{
					m_writer.WriteStartElement(text, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					int num = 0;
					if (IsStrict)
					{
						num = Convert.ToInt32(fillSchemeColorTransforms[i].Value);
					}
					m_writer.WriteAttributeString("val", (IsStrict ? (num / 1000).ToString() : fillSchemeColorTransforms[i].Value.ToString()) + (IsStrict ? "%" : ""));
					m_writer.WriteEndElement();
				}
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializeThemeLinePattern(LineFormat lineFormat)
	{
		m_writer.WriteStartElement("pattFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("prst", GetPatternFillType(lineFormat.Pattern));
		if (lineFormat.ForeColor == Color.Empty || lineFormat.Color == Color.Empty)
		{
			m_writer.WriteStartElement("fgClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (lineFormat.ForeColor == Color.Empty || lineFormat.LineSchemeColorTransforms.Count > 0)
			{
				SerializeThemeColor(lineFormat.LineSchemeColorTransforms);
			}
			else
			{
				m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(lineFormat.ForeColor));
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
			m_writer.WriteStartElement("bgClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (lineFormat.Color == Color.Empty || lineFormat.LineSchemeColorTransforms.Count > 0)
			{
				SerializeThemeColor(lineFormat.LineSchemeColorTransforms);
			}
			else
			{
				m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(lineFormat.Color));
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeThemeSolidFill(FillFormat fillFormat)
	{
		if (fillFormat.Color == Color.Empty && fillFormat.FillSchemeColorTransforms.Count > 0)
		{
			m_writer.WriteStartElement("solidFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (fillFormat.Color == Color.Empty && fillFormat.FillSchemeColorTransforms.Count > 0)
			{
				SerializeThemeColor(fillFormat.FillSchemeColorTransforms);
			}
			m_writer.WriteEndElement();
		}
		else if (fillFormat.Color == Color.Empty)
		{
			m_writer.WriteStartElement("solidFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("schemeClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", "phClr");
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		else
		{
			SerializeSolidFill(fillFormat.Color, fillFormat.Transparency);
		}
	}

	private void SerializeThemeGradient(GradientFill gradientFill)
	{
		m_writer.WriteStartElement("gradFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (!gradientFill.IsEmptyElement)
		{
			if (gradientFill.Flip != 0)
			{
				m_writer.WriteAttributeString("flip", GetFlipOrientation(gradientFill.Flip));
			}
			m_writer.WriteAttributeString("rotWithShape", gradientFill.RotateWithShape ? "1" : "0");
			m_writer.WriteStartElement("gsLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			foreach (GradientStop gradientStop in gradientFill.GradientStops)
			{
				SerializeThemeGradientStop(gradientStop);
			}
			m_writer.WriteEndElement();
			if (gradientFill.LinearGradient != null)
			{
				m_writer.WriteStartElement("lin", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("ang", (gradientFill.LinearGradient.Angle * 60000).ToString());
				m_writer.WriteAttributeString("scaled", gradientFill.LinearGradient.Scaled ? "1" : "0");
				m_writer.WriteEndElement();
			}
			if (gradientFill.PathGradient != null)
			{
				m_writer.WriteStartElement("path", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("path", GetGradientShadeType(gradientFill.PathGradient.PathShade));
				m_writer.WriteStartElement("fillToRect", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				if (gradientFill.PathGradient.LeftOffset != 0)
				{
					m_writer.WriteAttributeString("l", (gradientFill.PathGradient.LeftOffset * 1000).ToString());
				}
				if (gradientFill.PathGradient.TopOffset != 0)
				{
					m_writer.WriteAttributeString("t", (gradientFill.PathGradient.TopOffset * 1000).ToString());
				}
				if (gradientFill.PathGradient.RightOffset != 0)
				{
					m_writer.WriteAttributeString("r", (gradientFill.PathGradient.RightOffset * 1000).ToString());
				}
				if (gradientFill.PathGradient.BottomOffset != 0)
				{
					m_writer.WriteAttributeString("b", (gradientFill.PathGradient.BottomOffset * 1000).ToString());
				}
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
			m_writer.WriteStartElement("tileRect", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (gradientFill.TileRectangle.LeftOffset != 0f)
			{
				m_writer.WriteAttributeString("l", (gradientFill.TileRectangle.LeftOffset * 1000f).ToString());
			}
			if (gradientFill.TileRectangle.TopOffset != 0f)
			{
				m_writer.WriteAttributeString("t", (gradientFill.TileRectangle.TopOffset * 1000f).ToString());
			}
			if (gradientFill.TileRectangle.RightOffset != 0f)
			{
				m_writer.WriteAttributeString("r", (gradientFill.TileRectangle.RightOffset * 1000f).ToString());
			}
			if (gradientFill.TileRectangle.BottomOffset != 0f)
			{
				m_writer.WriteAttributeString("b", (gradientFill.TileRectangle.BottomOffset * 1000f).ToString());
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeThemeGradientStop(GradientStop gradientStop)
	{
		m_writer.WriteStartElement("gs", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("pos", (IsStrict ? gradientStop.Position.ToString() : (gradientStop.Position * 1000).ToString()) + (IsStrict ? "%" : ""));
		if (gradientStop.FillSchemeColorTransforms.Count > 0)
		{
			SerializeThemeColor(gradientStop.FillSchemeColorTransforms);
		}
		else if (gradientStop.Color != Color.Empty)
		{
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", GetRGBCode(gradientStop.Color));
			if (gradientStop.Opacity != byte.MaxValue)
			{
				m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", (gradientStop.Opacity * 1000).ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		else
		{
			m_writer.WriteStartElement("schemeClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", "phClr");
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeEffectStyles(EffectFormat effectFormat)
	{
		if (effectFormat.IsShadowEffect)
		{
			SerializeShadowEffect(effectFormat.ShadowFormat);
		}
		if (effectFormat.IsReflection)
		{
			SerializeReflectionEffect(effectFormat.ReflectionFormat);
		}
		if (effectFormat.IsGlowEffect)
		{
			m_writer.WriteStartElement("a", "glow", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (effectFormat.GlowFormat.IsInlineRadius)
			{
				int num = (int)Math.Round(effectFormat.GlowFormat.Radius * 12700f);
				m_writer.WriteAttributeString("rad", num.ToString());
			}
			if (effectFormat.GlowFormat.IsInlineColor)
			{
				m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("val", GetRGBCode(effectFormat.GlowFormat.Color));
				if (effectFormat.GlowFormat.IsInlineTransparency)
				{
					m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
					double num2 = Math.Round(effectFormat.GlowFormat.Transparency * 100f * 1000f);
					m_writer.WriteAttributeString("val", num2.ToString(CultureInfo.InvariantCulture));
					m_writer.WriteEndElement();
				}
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		if (effectFormat.IsSoftEdge)
		{
			m_writer.WriteStartElement("a", "softEdge", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			if (!effectFormat.NoSoftEdges)
			{
				int num3 = (int)Math.Round(effectFormat.SoftEdgeRadius * 12700f);
				m_writer.WriteAttributeString("rad", num3.ToString());
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeLineStyleList(LineFormat lineFormat)
	{
		if (!lineFormat.Line)
		{
			m_writer.WriteStartElement("ln", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
			return;
		}
		m_writer.WriteStartElement("ln", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		float num = (float)Math.Round(lineFormat.Weight * 12700f);
		m_writer.WriteAttributeString("w", num.ToString(CultureInfo.InvariantCulture));
		m_writer.WriteAttributeString("cap", GetLineCapStyle(lineFormat.LineCap, is2007: false));
		if (lineFormat.InsetPen)
		{
			m_writer.WriteAttributeString("algn", "in");
		}
		m_writer.WriteAttributeString("cmpd", GetLineStyle(lineFormat.Style, is2007: false));
		if (lineFormat.Line)
		{
			if (lineFormat.LineFormatType == LineFormatType.Gradient)
			{
				SerializeThemeGradient(lineFormat.GradientFill);
			}
			else if (lineFormat.LineFormatType == LineFormatType.Patterned)
			{
				SerializeThemeLinePattern(lineFormat);
			}
			else if (lineFormat.LineSchemeColorTransforms.Count > 0 || lineFormat.Color == Color.Empty)
			{
				SerializeThemeLineSolidFill(lineFormat);
			}
			else
			{
				SerializeSolidFill(lineFormat.Color, lineFormat.Transparency);
			}
		}
		else
		{
			m_writer.WriteStartElement("noFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (lineFormat.DocxProps.ContainsKey("custDash"))
		{
			SerializeDocxStream(lineFormat.DocxProps, "custDash");
		}
		else
		{
			m_writer.WriteStartElement("prstDash", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", GetDashStyle(lineFormat.DashStyle, is2007: false));
			m_writer.WriteEndElement();
		}
		if (lineFormat.LineJoin == DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineJoin.Miter && !string.IsNullOrEmpty(lineFormat.MiterJoinLimit))
		{
			m_writer.WriteStartElement(GetLineJoinStyle(lineFormat.LineJoin), IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			int result = 0;
			if (IsStrict)
			{
				int.TryParse(lineFormat.MiterJoinLimit, NumberStyles.Number, CultureInfo.CurrentCulture, out result);
				result /= 1000;
			}
			m_writer.WriteAttributeString("lim", IsStrict ? (result + "%") : lineFormat.MiterJoinLimit);
			m_writer.WriteEndElement();
		}
		else if (lineFormat.LineJoin != DocGen.DocIO.ReaderWriter.DataStreamParser.Escher.LineJoin.Miter)
		{
			m_writer.WriteStartElement(GetLineJoinStyle(lineFormat.LineJoin), IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeThemeLineSolidFill(LineFormat lineFormat)
	{
		if (lineFormat.Color == Color.Empty || lineFormat.LineSchemeColorTransforms.Count > 0)
		{
			m_writer.WriteStartElement("solidFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("schemeClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", "phClr");
			if (lineFormat.LineSchemeColorTransforms.Count > 0)
			{
				for (int i = 0; i < lineFormat.LineSchemeColorTransforms.Count; i++)
				{
					if (lineFormat != null && lineFormat.LineSchemeColorTransforms != null && lineFormat.LineSchemeColorTransforms[i].Key != null && !string.IsNullOrEmpty(lineFormat.LineSchemeColorTransforms[i].Key.ToString()) && !lineFormat.LineSchemeColorTransforms[i].Key.ToString().StartsWith("fgClr") && !lineFormat.LineSchemeColorTransforms[i].Key.ToString().StartsWith("bgClr"))
					{
						string text = lineFormat.LineSchemeColorTransforms[i].Key.ToString();
						if (!string.IsNullOrEmpty(text))
						{
							m_writer.WriteStartElement(text, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
							m_writer.WriteAttributeString("val", lineFormat.LineSchemeColorTransforms[i].Value.ToString());
							m_writer.WriteEndElement();
						}
					}
				}
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		else if (lineFormat.Color == Color.Empty)
		{
			m_writer.WriteStartElement("solidFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("schemeClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", "phClr");
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		else
		{
			SerializeSolidFill(lineFormat.Color, lineFormat.Transparency);
		}
	}

	private void SerializeColorScheme()
	{
		string empty = string.Empty;
		m_writer.WriteStartElement("clrScheme", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("name", m_document.Themes.ColorSchemeName);
		if (m_document.Themes.SchemeColor.ContainsKey("dk1"))
		{
			m_writer.WriteStartElement("dk1", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			empty = GetRGBCode(m_document.Themes.SchemeColor["dk1"]);
			m_writer.WriteAttributeString("val", empty);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (m_document.Themes.SchemeColor.ContainsKey("lt1"))
		{
			m_writer.WriteStartElement("lt1", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			empty = GetRGBCode(m_document.Themes.SchemeColor["lt1"]);
			m_writer.WriteAttributeString("val", empty);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (m_document.Themes.SchemeColor.ContainsKey("dk2"))
		{
			m_writer.WriteStartElement("dk2", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			empty = GetRGBCode(m_document.Themes.SchemeColor["dk2"]);
			m_writer.WriteAttributeString("val", empty);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (m_document.Themes.SchemeColor.ContainsKey("lt2"))
		{
			m_writer.WriteStartElement("lt2", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			empty = GetRGBCode(m_document.Themes.SchemeColor["lt2"]);
			m_writer.WriteAttributeString("val", empty);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (m_document.Themes.SchemeColor.ContainsKey("accent1"))
		{
			m_writer.WriteStartElement("accent1", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			empty = GetRGBCode(m_document.Themes.SchemeColor["accent1"]);
			m_writer.WriteAttributeString("val", empty);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (m_document.Themes.SchemeColor.ContainsKey("accent2"))
		{
			m_writer.WriteStartElement("accent2", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			empty = GetRGBCode(m_document.Themes.SchemeColor["accent2"]);
			m_writer.WriteAttributeString("val", empty);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (m_document.Themes.SchemeColor.ContainsKey("accent3"))
		{
			m_writer.WriteStartElement("accent3", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			empty = GetRGBCode(m_document.Themes.SchemeColor["accent3"]);
			m_writer.WriteAttributeString("val", empty);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (m_document.Themes.SchemeColor.ContainsKey("accent4"))
		{
			m_writer.WriteStartElement("accent4", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			empty = GetRGBCode(m_document.Themes.SchemeColor["accent4"]);
			m_writer.WriteAttributeString("val", empty);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (m_document.Themes.SchemeColor.ContainsKey("accent5"))
		{
			m_writer.WriteStartElement("accent5", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			empty = GetRGBCode(m_document.Themes.SchemeColor["accent5"]);
			m_writer.WriteAttributeString("val", empty);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (m_document.Themes.SchemeColor.ContainsKey("accent6"))
		{
			m_writer.WriteStartElement("accent6", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			empty = GetRGBCode(m_document.Themes.SchemeColor["accent6"]);
			m_writer.WriteAttributeString("val", empty);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (m_document.Themes.SchemeColor.ContainsKey("hlink"))
		{
			m_writer.WriteStartElement("hlink", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			empty = GetRGBCode(m_document.Themes.SchemeColor["hlink"]);
			m_writer.WriteAttributeString("val", empty);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (m_document.Themes.SchemeColor.ContainsKey("folHlink"))
		{
			m_writer.WriteStartElement("folHlink", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			empty = GetRGBCode(m_document.Themes.SchemeColor["folHlink"]);
			m_writer.WriteAttributeString("val", empty);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		if (m_document.Themes.SchemeColor.ContainsKey("phClr"))
		{
			m_writer.WriteStartElement("phClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			empty = GetRGBCode(m_document.Themes.SchemeColor["phClr"]);
			m_writer.WriteAttributeString("val", empty);
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeFontScheme()
	{
		m_writer.WriteStartElement("fontScheme", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("name", m_document.Themes.FontScheme.FontSchemeName);
		m_writer.WriteStartElement("majorFont", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		for (int i = 0; i < m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList.Count; i++)
		{
			switch (m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList[i].Name)
			{
			case "latin":
			case "ea":
			case "cs":
				m_writer.WriteStartElement(m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList[i].Name, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("typeface", m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList[i].Typeface);
				if (m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList[i].Panose != null)
				{
					m_writer.WriteAttributeString("panose", m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList[i].Panose);
				}
				if (m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList[i].Charset != 0)
				{
					m_writer.WriteAttributeString("charset", m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList[i].Charset.ToString());
				}
				if (m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList[i].PitchFamily != 0)
				{
					m_writer.WriteAttributeString("pitchFamily", m_document.Themes.FontScheme.MajorFontScheme.FontSchemeList[i].PitchFamily.ToString());
				}
				m_writer.WriteEndElement();
				break;
			}
		}
		foreach (KeyValuePair<string, string> item in m_document.Themes.FontScheme.MajorFontScheme.FontTypeface)
		{
			m_writer.WriteStartElement("font", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("script", item.Key);
			m_writer.WriteAttributeString("typeface", item.Value);
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("minorFont", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		for (int j = 0; j < m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList.Count; j++)
		{
			switch (m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList[j].Name)
			{
			case "latin":
			case "ea":
			case "cs":
				m_writer.WriteStartElement(m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList[j].Name, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("typeface", m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList[j].Typeface);
				if (m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList[j].Panose != null)
				{
					m_writer.WriteAttributeString("panose", m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList[j].Panose);
				}
				if (m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList[j].Charset != 0)
				{
					m_writer.WriteAttributeString("charset", m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList[j].Charset.ToString());
				}
				if (m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList[j].PitchFamily != 0)
				{
					m_writer.WriteAttributeString("pitchFamily", m_document.Themes.FontScheme.MinorFontScheme.FontSchemeList[j].PitchFamily.ToString());
				}
				m_writer.WriteEndElement();
				break;
			}
		}
		foreach (KeyValuePair<string, string> item2 in m_document.Themes.FontScheme.MinorFontScheme.FontTypeface)
		{
			m_writer.WriteStartElement("font", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("script", item2.Key);
			m_writer.WriteAttributeString("typeface", item2.Value);
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeDefaultThemes()
	{
		MemoryStream data = new MemoryStream();
		if (!IsWord2003ML)
		{
			m_writer = CreateWriter(data);
		}
		m_writer.WriteStartElement("a", "theme", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "a", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("name", "Office Theme");
		m_writer.WriteStartElement("themeElements", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		bool isWord = IsWord2013 || IsWordLatest;
		SerializeDefaultColorScheme(isWord);
		SerializeDefaultFontScheme(isWord);
		SerializeDefaultFormatScheme(isWord);
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("objectDefaults", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("extraClrSchemeLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		if (!IsWord2003ML)
		{
			m_writer.Flush();
			m_archive.AddItem("word\\theme\\theme1.xml", data, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
	}

	private void SerializeDefaultColorScheme(bool isWord2013)
	{
		m_writer.WriteStartElement("clrScheme", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("name", "Office");
		m_writer.WriteStartElement("dk1", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("sysClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("val", "windowText");
		m_writer.WriteAttributeString("lastClr", "000000");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("lt1", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("sysClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("val", "window");
		m_writer.WriteAttributeString("lastClr", "FFFFFF");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("dk2", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeRGBColor(isWord2013 ? "44546A" : "1F497D", "");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("lt2", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeRGBColor(isWord2013 ? "E7E6E6" : "EEECE1", "");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("accent1", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeRGBColor(isWord2013 ? "5B9BD5" : "4F81BD", "");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("accent2", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeRGBColor(isWord2013 ? "ED7D31" : "C0504D", "");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("accent3", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeRGBColor(isWord2013 ? "A5A5A5" : "9BBB59", "");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("accent4", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeRGBColor(isWord2013 ? "FFC000" : "8064A2", "");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("accent5", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeRGBColor(isWord2013 ? "4472C4" : "4BACC6", "");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("accent6", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeRGBColor(isWord2013 ? "70AD47" : "F79646", "");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("hlink", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeRGBColor(isWord2013 ? "0563C1" : "0000FF", "");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("folHlink", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeRGBColor(isWord2013 ? "954F72" : "800080", "");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeRGBColor(string colorValue, string alphaColorValue)
	{
		m_writer.WriteStartElement("srgbClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("val", colorValue);
		if (!string.IsNullOrEmpty(alphaColorValue))
		{
			m_writer.WriteStartElement("alpha", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", alphaColorValue);
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeDefaultFontScheme(bool isWord2013)
	{
		m_writer.WriteStartElement("fontScheme", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("name", "Office");
		SerializeDefaultThemeFont("majorFont", isWord2013);
		SerializeDefaultThemeFont("minorFont", isWord2013);
		m_writer.WriteEndElement();
	}

	private void SerializeDefaultFormatScheme(bool isWord2013)
	{
		m_writer.WriteStartElement("fmtScheme", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("name", "Office");
		SerializeDefaultFillStyleList(isWord2013);
		SerializeDefaultLineStyleList(isWord2013);
		SerializeDefaultEffectStyleList(isWord2013);
		SerializeDefaultBackgroundFillStyleList(isWord2013);
		m_writer.WriteEndElement();
	}

	private void SerializeDefaultFillStyleList(bool isWord2013)
	{
		m_writer.WriteStartElement("fillStyleLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("solidFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeSchemeColor("phClr");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("gradFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("rotWithShape", "1");
		m_writer.WriteStartElement("gsLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("gs", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("pos", IsStrict ? "0%" : "0");
		SerializeSchemeColor("phClr");
		if (isWord2013)
		{
			SerializeGradientRelativePositions("110000", "105000", "67000", "");
		}
		else
		{
			SerializeGradientRelativePositions("", "300000", "50000", "");
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("gs", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("pos", isWord2013 ? "50000" : "37000");
		SerializeSchemeColor("phClr");
		if (isWord2013)
		{
			SerializeGradientRelativePositions("105000", "103000", "73000", "");
		}
		else
		{
			SerializeGradientRelativePositions("", "300000", "37000", "");
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("gs", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("pos", IsStrict ? "100000%" : "100000");
		SerializeSchemeColor("phClr");
		if (isWord2013)
		{
			SerializeGradientRelativePositions("105000", "109000", "81000", "");
		}
		else
		{
			SerializeGradientRelativePositions("", "350000", "15000", "");
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("lin", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("ang", isWord2013 ? "5400000" : "16200000");
		m_writer.WriteAttributeString("scaled", isWord2013 ? "0" : "1");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("gradFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("rotWithShape", "1");
		m_writer.WriteStartElement("gsLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("gs", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("pos", IsStrict ? "0%" : "0");
		SerializeSchemeColor("phClr");
		if (isWord2013)
		{
			SerializeGradientRelativePositions("103000", "102000", "94000", "");
		}
		else
		{
			SerializeGradientRelativePositions("", "130000", "", "51000");
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("gs", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("pos", isWord2013 ? "50000" : "80000");
		SerializeSchemeColor("phClr");
		if (isWord2013)
		{
			SerializeGradientRelativePositions("100000", "110000", "", "100000");
		}
		else
		{
			SerializeGradientRelativePositions("", "130000", "", "93000");
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("gs", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("pos", IsStrict ? "100000%" : "100000");
		SerializeSchemeColor("phClr");
		if (isWord2013)
		{
			SerializeGradientRelativePositions("99000", "120000", "", "78000");
		}
		else
		{
			SerializeGradientRelativePositions("", "350000", "", "94000");
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("lin", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("ang", isWord2013 ? "5400000" : "16200000");
		m_writer.WriteAttributeString("scaled", "0");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeDefaultLineStyleList(bool isWord2013)
	{
		m_writer.WriteStartElement("lnStyleLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (isWord2013)
		{
			SerializeDefaultLineStyle("6350", "flat", "sng", "ctr", isMiter: true);
			SerializeDefaultLineStyle("12700", "flat", "sng", "ctr", isMiter: true);
			SerializeDefaultLineStyle("19050", "flat", "sng", "ctr", isMiter: true);
		}
		else
		{
			m_writer.WriteStartElement("ln", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("w", "9525");
			m_writer.WriteAttributeString("cap", "flat");
			m_writer.WriteAttributeString("cmpd", "sng");
			m_writer.WriteAttributeString("algn", "ctr");
			m_writer.WriteStartElement("solidFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			SerializeSchemeColor("phClr");
			SerializeGradientRelativePositions("", "105000", "", "95000");
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			m_writer.WriteStartElement("prstDash", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", "solid");
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
			SerializeDefaultLineStyle("25400", "flat", "sng", "ctr", isMiter: false);
			SerializeDefaultLineStyle("38100", "flat", "sng", "ctr", isMiter: false);
		}
		m_writer.WriteEndElement();
	}

	private void SerializeDefaultLineStyle(string width, string lineCap, string lineType, string alignment, bool isMiter)
	{
		m_writer.WriteStartElement("ln", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("w", width);
		m_writer.WriteAttributeString("cap", lineCap);
		m_writer.WriteAttributeString("cmpd", lineType);
		m_writer.WriteAttributeString("algn", alignment);
		m_writer.WriteStartElement("solidFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeSchemeColor("phClr");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("prstDash", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("val", "solid");
		m_writer.WriteEndElement();
		if (isMiter)
		{
			m_writer.WriteStartElement("miter", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("lim", IsStrict ? (Convert.ToInt32(800000) / 1000 + "%") : "800000");
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeDefaultEffectStyleList(bool isWord2013)
	{
		m_writer.WriteStartElement("effectStyleLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		if (isWord2013)
		{
			for (int i = 0; i < 2; i++)
			{
				m_writer.WriteStartElement("effectStyle", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteStartElement("effectLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteEndElement();
				m_writer.WriteEndElement();
			}
			SerializeEffectStyle("57150", "19050", "63000", isAlign: true);
		}
		else
		{
			SerializeEffectStyle("40000", "20000", "38000", isAlign: false);
			SerializeEffectStyle("40000", "23000", "35000", isAlign: false);
			SerializeEffectStyle("40000", "23000", "35000", isAlign: false);
		}
		m_writer.WriteEndElement();
	}

	private void SerializeEffectStyle(string blurRadius, string distance, string alpha, bool isAlign)
	{
		m_writer.WriteStartElement("effectStyle", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("effectLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("outerShdw", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("blurRad", blurRadius);
		m_writer.WriteAttributeString("dist", distance);
		m_writer.WriteAttributeString("dir", "5400000");
		if (isAlign)
		{
			m_writer.WriteAttributeString("algn", "ctr");
		}
		m_writer.WriteAttributeString("rotWithShape", "0");
		SerializeRGBColor("000000", alpha);
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeDefaultBackgroundFillStyleList(bool isWord2013)
	{
		m_writer.WriteStartElement("bgFillStyleLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("solidFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		SerializeSchemeColor("phClr");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		if (isWord2013)
		{
			m_writer.WriteStartElement("solidFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			SerializeSchemeColor("phClr");
			SerializeGradientRelativePositions("", "170000", "95000", "");
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		m_writer.WriteStartElement("gradFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("rotWithShape", "1");
		m_writer.WriteStartElement("gsLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("gs", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("pos", "0");
		SerializeSchemeColor("phClr");
		if (isWord2013)
		{
			SerializeGradientRelativePositions("102000", "150000", "93000", "98000");
		}
		else
		{
			SerializeGradientRelativePositions("", "350000", "40000", "");
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("gs", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("pos", isWord2013 ? "50000" : "40000");
		SerializeSchemeColor("phClr");
		if (isWord2013)
		{
			SerializeGradientRelativePositions("103000", "130000", "98000", "90000");
		}
		else
		{
			SerializeGradientRelativePositions("", "350000", "45000", "99000");
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("gs", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("pos", "100000");
		SerializeSchemeColor("phClr");
		if (isWord2013)
		{
			SerializeGradientRelativePositions("", "120000", "", "63000");
		}
		else
		{
			SerializeGradientRelativePositions("", "255000", "", "20000");
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		if (isWord2013)
		{
			m_writer.WriteStartElement("lin", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("ang", "5400000");
			m_writer.WriteAttributeString("scaled", "0");
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
		else
		{
			SerializeDefaultBackgroundFillStyleList();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeDefaultBackgroundFillStyleList()
	{
		m_writer.WriteStartElement("path", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("path", "circle");
		m_writer.WriteStartElement("fillToRect");
		m_writer.WriteAttributeString("l", "50000");
		m_writer.WriteAttributeString("t", "-80000");
		m_writer.WriteAttributeString("r", "50000");
		m_writer.WriteAttributeString("b", "180000");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("gradFill", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("rotWithShape", "1");
		m_writer.WriteStartElement("gsLst", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteStartElement("gs", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("pos", "0");
		SerializeSchemeColor("phClr");
		SerializeGradientRelativePositions("", "300000", "80000", "");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("gs", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("pos", "100000");
		SerializeSchemeColor("phClr");
		SerializeGradientRelativePositions("", "200000", "", "30000");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("path", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("path", "circle");
		m_writer.WriteStartElement("fillToRect");
		m_writer.WriteAttributeString("l", "50000");
		m_writer.WriteAttributeString("t", "50000");
		m_writer.WriteAttributeString("r", "50000");
		m_writer.WriteAttributeString("b", "50000");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeSchemeColor(string value)
	{
		m_writer.WriteStartElement("schemeClr", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		m_writer.WriteAttributeString("val", value);
	}

	private void SerializeGradientRelativePositions(string lumMod, string satMod, string tint, string shade)
	{
		if (!string.IsNullOrEmpty(lumMod))
		{
			m_writer.WriteStartElement("lumMod", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? (Convert.ToInt32(lumMod) / 1000 + "%") : lumMod);
			m_writer.WriteEndElement();
		}
		if (!string.IsNullOrEmpty(satMod))
		{
			m_writer.WriteStartElement("satMod", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? (Convert.ToInt32(satMod) / 1000 + "%") : satMod);
			m_writer.WriteEndElement();
		}
		if (!string.IsNullOrEmpty(tint))
		{
			m_writer.WriteStartElement("tint", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? (Convert.ToInt32(tint) / 1000 + "%") : tint);
			m_writer.WriteEndElement();
		}
		if (!string.IsNullOrEmpty(shade))
		{
			m_writer.WriteStartElement("shade", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? (Convert.ToInt32(shade) / 1000 + "%") : shade);
			m_writer.WriteEndElement();
		}
	}

	private void SerializeDefaultThemeFont(string fontType, bool isWord2013)
	{
		m_writer.WriteStartElement(fontType, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
		MajorMinorFontScheme majorMinorFontScheme = ((fontType == "majorFont") ? m_document.Themes.FontScheme.MajorFontScheme : m_document.Themes.FontScheme.MinorFontScheme);
		if (majorMinorFontScheme == null || majorMinorFontScheme.FontSchemeList.Count == 0 || !m_document.DocHasThemes)
		{
			m_writer.WriteStartElement("latin", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			string value = ((!(fontType == "majorFont")) ? "Calibri" : (isWord2013 ? "Calibri Light" : "Cambria"));
			m_writer.WriteAttributeString("typeface", value);
			m_writer.WriteEndElement();
			m_writer.WriteStartElement("ea", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("typeface", "");
			m_writer.WriteEndElement();
			m_writer.WriteStartElement("cs", IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
			m_writer.WriteAttributeString("typeface", "");
			m_writer.WriteEndElement();
		}
		else
		{
			for (int i = 0; i < majorMinorFontScheme.FontSchemeList.Count; i++)
			{
				m_writer.WriteStartElement(majorMinorFontScheme.FontSchemeList[i].Name, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/main" : "http://schemas.openxmlformats.org/drawingml/2006/main");
				m_writer.WriteAttributeString("typeface", majorMinorFontScheme.FontSchemeList[i].Typeface);
				if (majorMinorFontScheme.FontSchemeList[i].Panose != null)
				{
					m_writer.WriteAttributeString("panose", majorMinorFontScheme.FontSchemeList[i].Panose);
				}
				if (majorMinorFontScheme.FontSchemeList[i].Charset != 0)
				{
					m_writer.WriteAttributeString("charset", majorMinorFontScheme.FontSchemeList[i].Charset.ToString());
				}
				if (majorMinorFontScheme.FontSchemeList[i].PitchFamily != 0)
				{
					m_writer.WriteAttributeString("pitchFamily", majorMinorFontScheme.FontSchemeList[i].PitchFamily.ToString());
				}
				m_writer.WriteEndElement();
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializeSettings()
	{
		MemoryStream data = new MemoryStream();
		if (!IsWord2003ML)
		{
			m_writer = CreateWriter(data);
		}
		m_writer.WriteStartElement("w", "settings", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "mc", null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
		m_writer.WriteAttributeString("xmlns", "o", null, "urn:schemas-microsoft-com:office:office");
		m_writer.WriteAttributeString("xmlns", "r", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
		m_writer.WriteAttributeString("xmlns", "m", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
		m_writer.WriteAttributeString("xmlns", "v", null, "urn:schemas-microsoft-com:vml");
		m_writer.WriteAttributeString("xmlns", "w10", null, "urn:schemas-microsoft-com:office:word");
		m_writer.WriteAttributeString("xmlns", "w14", null, "http://schemas.microsoft.com/office/word/2010/wordml");
		m_writer.WriteAttributeString("xmlns", "w15", null, "http://schemas.microsoft.com/office/word/2012/wordml");
		m_writer.WriteAttributeString("xmlns", "sl", null, "http://schemas.openxmlformats.org/schemaLibrary/2006/main");
		m_writer.WriteAttributeString("mc", "Ignorable", null, "w14 w15");
		ParseSettingsRelations();
		List<Stream> list = new List<Stream>();
		int i = 0;
		for (int count = m_document.DocxProps.Count; i < count; i++)
		{
			list.Add(m_document.DocxProps[i]);
		}
		if (m_document.WriteProtected)
		{
			m_writer.WriteStartElement("w", "writeProtection", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("recommended", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
			m_writer.WriteEndElement();
		}
		if (m_document.ViewSetup.DocumentViewType != DocumentViewType.PrintLayout && m_document.ViewSetup.DocumentViewType != DocumentViewType.NormalLayout)
		{
			m_writer.WriteStartElement("view", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			string value = string.Empty;
			if (m_document.ViewSetup.DocumentViewType == DocumentViewType.OutlineLayout)
			{
				value = "outline";
			}
			else if (m_document.ViewSetup.DocumentViewType == DocumentViewType.WebLayout)
			{
				value = "web";
			}
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value);
			m_writer.WriteEndElement();
		}
		m_writer.WriteStartElement("w", "zoom", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		switch (m_document.ViewSetup.ZoomType)
		{
		case ZoomType.FullPage:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "fullPage");
			break;
		case ZoomType.PageWidth:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "bestFit");
			break;
		case ZoomType.TextFit:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "textFit");
			break;
		default:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "none");
			break;
		}
		m_writer.WriteAttributeString("w", "percent", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.ViewSetup.ZoomPercent.ToString(CultureInfo.InvariantCulture));
		m_writer.WriteEndElement();
		SerializeDocxProps(list, "removePersonalInformation");
		SerializeDocxProps(list, "removeDateAndTime");
		if (m_document.DOP.Dop2000.NoMargPgvwSaved)
		{
			m_writer.WriteStartElement("doNotDisplayPageBoundaries", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.DisplayBackgrounds)
		{
			m_writer.WriteStartElement("displayBackgroundShape", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		SerializeDocxProps(list, "printFractionalCharacterWidth");
		SerializeDocxProps(list, "printFormsData");
		SerializeDocxProps(list, "embedTrueTypeFonts");
		SerializeDocxProps(list, "embedSystemFonts");
		SerializeDocxProps(list, "saveSubsetFonts");
		SerializeDocxProps(list, "saveFormsData");
		switch (m_document.MultiplePage)
		{
		case MultiplePage.MirrorMargins:
			m_writer.WriteStartElement("mirrorMargins", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
			break;
		case MultiplePage.BookFold:
			m_writer.WriteStartElement("bookFoldPrinting", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (m_document.SheetsPerBooklet != 0)
			{
				m_writer.WriteAttributeString("bookFoldPrintingSheets", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.SheetsPerBooklet.ToString());
			}
			m_writer.WriteEndElement();
			break;
		case MultiplePage.ReverseBookFold:
			m_writer.WriteStartElement("bookFoldRevPrinting", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (m_document.SheetsPerBooklet != 0)
			{
				m_writer.WriteAttributeString("bookFoldPrintingSheets", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.SheetsPerBooklet.ToString());
			}
			m_writer.WriteEndElement();
			break;
		case MultiplePage.TwoPagesPerSheet:
			m_writer.WriteStartElement("printTwoOnOne", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
			break;
		}
		SerializeDocxProps(list, "alignBordersAndEdges");
		if (!m_document.BordersSurroundHeader)
		{
			m_writer.WriteStartElement("bordersDoNotSurroundHeader", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (!m_document.BordersSurroundFooter)
		{
			m_writer.WriteStartElement("bordersDoNotSurroundFooter", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.DOP.GutterAtTop)
		{
			m_writer.WriteStartElement("gutterAtTop", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		SerializeDocxProps(list, "hideSpellingErrors");
		SerializeDocxProps(list, "hideGrammaticalErrors");
		SerializeDocxProps(list, "activeWritingStyle");
		if (m_document.DOP.Dop97.GramAllDone || m_document.DOP.SpellAllDone)
		{
			m_writer.WriteStartElement("proofState", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "spelling", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.DOP.SpellAllDone ? "clean" : "dirty");
			m_writer.WriteAttributeString("w", "grammar", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.DOP.Dop97.GramAllDone ? "clean" : "dirty");
			m_writer.WriteEndElement();
		}
		SerializeDocxProps(list, "formsDesign");
		if (!string.IsNullOrEmpty(m_document.AssociatedStrings.AttachedTemplate))
		{
			foreach (KeyValuePair<string, DictionaryEntry> settingsRelation in SettingsRelations)
			{
				if (Convert.ToString(SettingsRelations[settingsRelation.Key.ToString()].Key, CultureInfo.InvariantCulture) == "http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate")
				{
					SettingsRelations.Remove(settingsRelation.Key);
					break;
				}
			}
			m_writer.WriteStartElement("attachedTemplate", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			string text = "rId1";
			for (int j = 1; j <= SettingsRelations.Count; j++)
			{
				if (!SettingsRelations.ContainsKey(text))
				{
					break;
				}
				text = $"rId{j + 1}";
			}
			m_writer.WriteAttributeString("r", "id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", text);
			string text2 = m_document.AssociatedStrings.AttachedTemplate.ToString();
			if (!text2.StartsWith("file:///") && !text2.Contains("http") && !text2.Contains("www"))
			{
				text2 = "file:///" + text2;
			}
			SettingsRelations.Add(text, new DictionaryEntry("http://schemas.openxmlformats.org/officeDocument/2006/relationships/attachedTemplate", text2));
			m_writer.WriteEndElement();
		}
		if (m_document.DOP.LinkStyles)
		{
			m_writer.WriteStartElement("linkStyles", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		SerializeDocxProps(list, "stylePaneFormatFilter");
		SerializeDocxProps(list, "stylePaneSortMethod");
		SerializeDocxProps(list, "documentType");
		if (m_document.MailMerge.Settings.HasData)
		{
			SerializeMailMergeSettings();
		}
		SerializeDocxProps(list, "revisionView");
		if (m_document.TrackChanges)
		{
			m_writer.WriteStartElement("trackRevisions", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		SerializeDocxProps(list, "doNotTrackMoves");
		SerializeDocxProps(list, "doNotTrackFormatting");
		if (m_document.DOP.Dop2003.EnforceDocProt)
		{
			SerializeProtect((ProtectionType)m_document.DOP.Dop2003.DocProtCur);
		}
		SerializeDocxProps(list, "autoFormatOverride");
		SerializeDocxProps(list, "styleLockTheme");
		SerializeDocxProps(list, "styleLockQFSet");
		m_writer.WriteStartElement("defaultTabStop", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		int num = (int)Math.Round(m_document.DefaultTabWidth * 20f);
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString());
		m_writer.WriteEndElement();
		if (m_document.DOP.AutoHyphen)
		{
			m_writer.WriteStartElement("autoHyphenation", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.DOP.ConsecHypLim > 0)
		{
			m_writer.WriteStartElement("consecutiveHyphenLimit", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.DOP.ConsecHypLim.ToString());
			m_writer.WriteEndElement();
		}
		if (m_document.DOP.DxaHotZ != 360)
		{
			m_writer.WriteStartElement("hyphenationZone", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.DOP.DxaHotZ.ToString());
			m_writer.WriteEndElement();
		}
		if (!m_document.DOP.HyphCapitals)
		{
			m_writer.WriteStartElement("doNotHyphenateCaps", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		SerializeDocxProps(list, "showEnvelope");
		SerializeDocxProps(list, "summaryLength");
		SerializeDocxProps(list, "clickAndTypeStyle");
		SerializeDocxProps(list, "defaultTableStyle");
		if (m_document.DifferentOddAndEvenPages)
		{
			m_writer.WriteStartElement("evenAndOddHeaders", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		SerializeDocxProps(list, "drawingGridHorizontalSpacing");
		SerializeDocxProps(list, "drawingGridVerticalSpacing");
		SerializeDocxProps(list, "displayHorizontalDrawingGridEvery");
		SerializeDocxProps(list, "displayVerticalDrawingGridEvery");
		SerializeDocxProps(list, "doNotUseMarginsForDrawingGridOrigin");
		SerializeDocxProps(list, "drawingGridHorizontalOrigin");
		SerializeDocxProps(list, "drawingGridVerticalOrigin");
		if (!m_document.DOP.FormFieldShading)
		{
			m_writer.WriteStartElement("doNotShadeFormData", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		SerializeDocxProps(list, "noPunctuationKerning");
		m_writer.WriteStartElement("characterSpacingControl", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		switch (m_document.CharacterSpacingControl)
		{
		case CharacterSpacingControl.CompressPunctuation:
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "compressPunctuation");
			break;
		case CharacterSpacingControl.CompressPunctuationAndJapaneseKana:
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "compressPunctuationAndJapaneseKana");
			break;
		default:
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "doNotCompress");
			break;
		}
		m_writer.WriteEndElement();
		SerializeDocxProps(list, "strictFirstAndLastChars");
		SerializeDocxProps(list, "noLineBreaksAfter");
		SerializeDocxProps(list, "noLineBreaksBefore");
		SerializeDocxProps(list, "savePreviewPicture");
		SerializeDocxProps(list, "doNotValidateAgainstSchema");
		SerializeDocxProps(list, "saveInvalidXml");
		SerializeDocxProps(list, "ignoreMixedContent");
		SerializeDocxProps(list, "alwaysShowPlaceholderText");
		SerializeDocxProps(list, "doNotDemarcateInvalidXml");
		SerializeDocxProps(list, "saveXmlDataOnly");
		SerializeDocxProps(list, "useXSLTWhenSaving");
		SerializeDocxProps(list, "saveThroughXslt");
		SerializeDocxProps(list, "showXMLTags");
		SerializeDocxProps(list, "alwaysMergeEmptyNamespace");
		SerializeDocxProps(list, "updateFields");
		SerializeDocxProps(list, "hdrShapeDefaults");
		SerializeFootnoteSettings();
		SerializeCompatSettings();
		if (m_document.Variables.Count > 0)
		{
			SerializeDocVariables(m_document.Variables);
		}
		SerializeDocxProps(list, "rsids");
		if (m_document.Settings.MathProperties != null && !m_document.Settings.MathProperties.IsDefault)
		{
			new MathMLSerializer().SerializeMathProperties(m_writer, m_document.Settings.MathProperties);
		}
		SerializeDocxProps(list, "uiCompat97To2003");
		SerializeDocxProps(list, "attachedSchema");
		if (m_document.Settings.ThemeFontLanguages != null)
		{
			SerializeLanguage(m_document.Settings.ThemeFontLanguages, isThemeLang: true);
		}
		if (!SerializeDocxProps(list, "clrSchemeMapping"))
		{
			m_writer.WriteStartElement("clrSchemeMapping", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		SerializeDocxProps(list, "doNotIncludeSubdocsInStats");
		SerializeDocxProps(list, "doNotAutoCompressPictures");
		SerializeDocxProps(list, "forceUpgrade");
		SerializeDocxProps(list, "captions");
		SerializeDocxProps(list, "readModeInkLockDown");
		SerializeDocxProps(list, "smartTagType");
		SerializeDocxProps(list, "schemaLibrary");
		SerializeDocxProps(list, "shapeDefaults");
		SerializeDocxProps(list, "doNotEmbedSmartTags");
		SerializeDocxProps(list, "decimalSymbol");
		SerializeDocxProps(list, "listSeparator");
		m_writer.WriteEndElement();
		if (!IsWord2003ML)
		{
			m_writer.Flush();
			m_archive.AddItem("word\\settings.xml", data, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
	}

	private void SerializeMailMergeSettings()
	{
		m_writer.WriteStartElement("mailMerge", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (m_document.MailMerge.Settings.HasKey(12))
		{
			SerializeMailMergeSettingsMainDocumentType();
		}
		if (m_document.MailMerge.Settings.HasKey(9))
		{
			SerializeBoolProperty("linkToQuery", m_document.MailMerge.Settings.LinkToQuery);
		}
		if (m_document.MailMerge.Settings.HasKey(5))
		{
			SerializeMailMergeSettingsDataType();
		}
		if (m_document.MailMerge.Settings.HasKey(3))
		{
			m_writer.WriteStartElement("connectString", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.MailMerge.Settings.ConnectString);
			m_writer.WriteEndElement();
		}
		if (m_document.MailMerge.Settings.HasKey(13))
		{
			m_writer.WriteStartElement("query", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.MailMerge.Settings.Query);
			m_writer.WriteEndElement();
		}
		if (m_document.MailMerge.Settings.HasKey(4))
		{
			SerializeMailMergeSettingsDataSource();
		}
		if (m_document.MailMerge.Settings.HasKey(8))
		{
			SerializeMailMergeSettingsHeaderSource();
		}
		if (m_document.MailMerge.Settings.HasKey(7))
		{
			SerializeBoolProperty("doNotSuppressBlankLines", m_document.MailMerge.Settings.DoNotSupressBlankLines);
		}
		if (m_document.MailMerge.Settings.HasKey(14))
		{
			SerializeBoolProperty("viewMergedData", m_document.MailMerge.Settings.ViewMergedData);
		}
		if (m_document.MailMerge.Settings.HasKey(6))
		{
			SerializeMailMergeSettingsDestination();
		}
		if (m_document.MailMerge.Settings.HasKey(1))
		{
			m_writer.WriteStartElement("addressFieldName", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.MailMerge.Settings.AddressFieldName);
			m_writer.WriteEndElement();
		}
		if (m_document.MailMerge.Settings.HasKey(11))
		{
			m_writer.WriteStartElement("mailSubject", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.MailMerge.Settings.MailSubject);
			m_writer.WriteEndElement();
		}
		if (m_document.MailMerge.Settings.HasKey(10))
		{
			SerializeBoolProperty("mailAsAttachment", m_document.MailMerge.Settings.MailAsAttachment);
		}
		if (m_document.MailMerge.Settings.HasKey(0))
		{
			m_writer.WriteStartElement("activeRecord", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.MailMerge.Settings.ActiveRecord.ToString());
			m_writer.WriteEndElement();
		}
		if (m_document.MailMerge.Settings.HasKey(2))
		{
			SerializeMailMergeSettingsCheckErrors();
		}
		if (m_document.MailMerge.Settings.HasKey(15) && m_document.MailMerge.Settings.ODSOSettings != null)
		{
			XmlReader xmlReader = CreateReader(m_document.MailMerge.Settings.ODSOSettings);
			xmlReader.MoveToContent();
			m_writer.WriteNode(xmlReader, defattr: false);
		}
		m_writer.WriteEndElement();
	}

	private void SerializeMailMergeSettingsMainDocumentType()
	{
		m_writer.WriteStartElement("mainDocumentType", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		switch (m_document.MailMerge.Settings.MainDocumentType)
		{
		case MailMergeMainDocumentType.Catalog:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "catalog");
			break;
		case MailMergeMainDocumentType.EMail:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "email");
			break;
		case MailMergeMainDocumentType.Envelopes:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "envelopes");
			break;
		case MailMergeMainDocumentType.Fax:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "fax");
			break;
		case MailMergeMainDocumentType.FormLetters:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "formLetters");
			break;
		case MailMergeMainDocumentType.MailingLabels:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "mailingLabels");
			break;
		}
		m_writer.WriteEndElement();
	}

	private void SerializeMailMergeSettingsDataType()
	{
		m_writer.WriteStartElement("dataType", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		switch (m_document.MailMerge.Settings.DataType)
		{
		case MailMergeDataType.Database:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "database");
			break;
		case MailMergeDataType.Native:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "native");
			break;
		case MailMergeDataType.ODBC:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "odbc");
			break;
		case MailMergeDataType.Query:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "query");
			break;
		case MailMergeDataType.Spreadsheet:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "spreadsheet");
			break;
		case MailMergeDataType.TextFile:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "textFile");
			break;
		}
		m_writer.WriteEndElement();
	}

	private void SerializeMailMergeSettingsDataSource()
	{
		m_writer.WriteStartElement("dataSource", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		string text = string.Empty;
		int num = 0;
		foreach (KeyValuePair<string, DictionaryEntry> settingsRelation in SettingsRelations)
		{
			DictionaryEntry dictionaryEntry = SettingsRelations[settingsRelation.Key.ToString()];
			if (dictionaryEntry.Value.ToString() == "file:///" + m_document.MailMerge.Settings.DataSource && dictionaryEntry.Key.ToString().Contains("mailMergeSource"))
			{
				text = settingsRelation.Key.ToString();
				break;
			}
			num++;
		}
		if (num == SettingsRelations.Count)
		{
			text = "rId" + (SettingsRelations.Count + 1);
			string key = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/mailMergeSource";
			SettingsRelations.Add(text, new DictionaryEntry(key, "file:///" + m_document.MailMerge.Settings.DataSource));
		}
		m_writer.WriteAttributeString("r", "id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", text);
		m_writer.WriteEndElement();
	}

	private void SerializeMailMergeSettingsHeaderSource()
	{
		m_writer.WriteStartElement("headerSource", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		string value = string.Empty;
		foreach (KeyValuePair<string, DictionaryEntry> settingsRelation in SettingsRelations)
		{
			DictionaryEntry dictionaryEntry = SettingsRelations[settingsRelation.Key.ToString()];
			if (dictionaryEntry.Value.ToString() == m_document.MailMerge.Settings.HeaderSource && dictionaryEntry.Key.ToString().Contains("mailMergeHeaderSource"))
			{
				value = settingsRelation.Key.ToString();
				break;
			}
		}
		m_writer.WriteAttributeString("r", "id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", value);
		m_writer.WriteEndElement();
	}

	private void SerializeMailMergeSettingsDestination()
	{
		m_writer.WriteStartElement("mainDocumentType", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		switch (m_document.MailMerge.Settings.Destination)
		{
		case MailMergeDestination.EMail:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "email");
			break;
		case MailMergeDestination.Fax:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "fax");
			break;
		case MailMergeDestination.NewDocument:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "newDocument");
			break;
		case MailMergeDestination.Printer:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "printer");
			break;
		}
		m_writer.WriteEndElement();
	}

	private void SerializeMailMergeSettingsCheckErrors()
	{
		m_writer.WriteStartElement("checkErrors", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		switch (m_document.MailMerge.Settings.CheckErrors)
		{
		case MailMergeCheckErrors.CollectErrors:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "3");
			break;
		case MailMergeCheckErrors.PauseOnError:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "2");
			break;
		case MailMergeCheckErrors.Simulate:
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
			break;
		}
		m_writer.WriteEndElement();
	}

	private void SerializeSettingsRelation()
	{
		if (SettingsRelations.Count == 0)
		{
			return;
		}
		MemoryStream memoryStream = new MemoryStream();
		if (!IsWord2003ML)
		{
			m_writer = CreateWriter(memoryStream);
		}
		m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
		foreach (KeyValuePair<string, DictionaryEntry> settingsRelation in SettingsRelations)
		{
			DictionaryEntry dictionaryEntry = SettingsRelations[settingsRelation.Key.ToString()];
			SerializeRelationShip(memoryStream, settingsRelation.Key.ToString(), dictionaryEntry.Key.ToString(), dictionaryEntry.Value.ToString());
		}
		m_writer.WriteEndElement();
		if (!IsWord2003ML)
		{
			m_writer.Flush();
			m_archive.AddItem("word\\_rels\\settings.xml.rels", memoryStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
	}

	private void ParseSettingsRelations()
	{
		if (m_document.DocxPackage != null && m_document.DocxPackage.XmlPartContainers.ContainsKey("word/"))
		{
			PartContainer partContainer = m_document.DocxPackage.FindPartContainer("word/");
			if (partContainer != null && partContainer.Relations.ContainsKey("word/_rels/settings.xml.rels"))
			{
				Stream dataStream = partContainer.Relations["word/_rels/settings.xml.rels"].DataStream;
				dataStream.Position = 0L;
				XmlReader relReader = DocGen.DocIO.DLS.Convertors.UtilityMethods.CreateReader(dataStream);
				ParseRelations(relReader, SettingsRelations);
			}
		}
	}

	private bool SerializeDocxProps(List<Stream> tempDocxProps, string propertyName)
	{
		int i = 0;
		for (int count = tempDocxProps.Count; i < count; i++)
		{
			XmlReader xmlReader = CreateReader(tempDocxProps[i]);
			xmlReader.MoveToContent();
			if (xmlReader.LocalName == propertyName)
			{
				tempDocxProps.RemoveAt(i);
				m_writer.WriteNode(xmlReader, defattr: false);
				return true;
			}
		}
		return false;
	}

	private void SerializeDocxProps(Dictionary<string, Stream> tempDocxProps, string propertyName)
	{
		if (tempDocxProps.ContainsKey(propertyName))
		{
			XmlReader xmlReader = CreateReader(tempDocxProps[propertyName]);
			xmlReader.MoveToContent();
			m_writer.WriteNode(xmlReader, defattr: false);
		}
	}

	private void SerializeCompatibilityProperties()
	{
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.OrigWordTableRules])
		{
			m_writer.WriteStartElement("useSingleBorderforContiguousCells", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.WPJust])
		{
			m_writer.WriteStartElement("wpJustification", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.NoTabForInd])
		{
			m_writer.WriteStartElement("noTabHangInd", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.NoExtLeading])
		{
			m_writer.WriteStartElement("noLeading", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.NoColumnBalance])
		{
			m_writer.WriteStartElement("noColumnBalance", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.TruncDxaExpand])
		{
			m_writer.WriteStartElement("spacingInWholePoints", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.LineWrapLikeWord6])
		{
			m_writer.WriteStartElement("lineWrapLikeWord6", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.PrintBodyBeforeHdr])
		{
			m_writer.WriteStartElement("printBodyTextBeforeHeader", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.MapPrintTextColor])
		{
			m_writer.WriteStartElement("printColBlack", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.WPSpace])
		{
			m_writer.WriteStartElement("wpSpaceWidth", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.ShowBreaksInFrames])
		{
			m_writer.WriteStartElement("showBreaksInFrames", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.SubOnSize])
		{
			m_writer.WriteStartElement("subFontBySize", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.SuppressTopSpacingMac5])
		{
			m_writer.WriteStartElement("suppressSpacingAtTopOfPage", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.F2ptExtLeadingOnly])
		{
			m_writer.WriteStartElement("suppressTopSpacingWP", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.SuppressSpBfAfterPgBrk])
		{
			m_writer.WriteStartElement("suppressSpBfAfterPgBrk", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.SwapBordersFacingPgs])
		{
			m_writer.WriteStartElement("swapBordersFacingPages", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.ConvMailMergeEsc])
		{
			m_writer.WriteStartElement("convMailMergeEsc", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.TruncFontHeight])
		{
			m_writer.WriteStartElement("truncateFontHeightsLikeWP6", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.MWSmallCaps])
		{
			m_writer.WriteStartElement("mwSmallCaps", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.PrintMet])
		{
			m_writer.WriteStartElement("usePrinterMetrics", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.WW6BorderRules])
		{
			m_writer.WriteStartElement("doNotSuppressParagraphBorders", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.WrapTrailSpaces])
		{
			m_writer.WriteStartElement("wrapTrailSpaces", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.FtnLayoutLikeWW8])
		{
			m_writer.WriteStartElement("footnoteLayoutLikeWW8", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.SpLayoutLikeWW8])
		{
			m_writer.WriteStartElement("shapeLayoutLikeWW8", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.AlignTablesRowByRow])
		{
			m_writer.WriteStartElement("alignTablesRowByRow", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.ForgetLastTabAlign])
		{
			m_writer.WriteStartElement("forgetLastTabAlignment", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.UseAutospaceForFullWidthAlpha])
		{
			m_writer.WriteStartElement("autoSpaceLikeWord95", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.NoSpaceRaiseLower])
		{
			m_writer.WriteStartElement("noSpaceRaiseLower", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.DontUseHTMLParagraphAutoSpacing])
		{
			m_writer.WriteStartElement("doNotUseHTMLParagraphAutoSpacing", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.LayoutRawTableWidth])
		{
			m_writer.WriteStartElement("layoutRawTableWidth", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.LayoutTableRowsApart])
		{
			m_writer.WriteStartElement("layoutTableRowsApart", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.UseWord97LineBreakingRules])
		{
			m_writer.WriteStartElement("useWord97LineBreakRules", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.DontBreakWrappedTables])
		{
			m_writer.WriteStartElement("doNotBreakWrappedTables", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.DontSnapToGridInCell])
		{
			m_writer.WriteStartElement("doNotSnapToGridInCell", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.DontAllowFieldEndSelect])
		{
			m_writer.WriteStartElement("selectFldWithFirstOrLastChar", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.DontWrapTextWithPunct])
		{
			m_writer.WriteStartElement("doNotWrapTextWithPunct", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.DontUseAsianBreakRules])
		{
			m_writer.WriteStartElement("doNotUseEastAsianBreakRules", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.UseWord2002TableStyleRules])
		{
			m_writer.WriteStartElement("useWord2002TableStyleRules", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.GrowAutoFit])
		{
			m_writer.WriteStartElement("growAutofit", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.UseNormalStyleForList])
		{
			m_writer.WriteStartElement("useNormalStyleForList", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.DontUseIndentAsNumberingTabStop])
		{
			m_writer.WriteStartElement("doNotUseIndentAsNumberingTabStop", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.FELineBreak11])
		{
			m_writer.WriteStartElement("useAltKinsokuLineBreakRules", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.AllowSpaceOfSameStyleInTable])
		{
			m_writer.WriteStartElement("allowSpaceOfSameStyleInTable", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.WW11IndentRules])
		{
			m_writer.WriteStartElement("doNotSuppressIndentation", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.DontAutofitConstrainedTables])
		{
			m_writer.WriteStartElement("doNotAutofitConstrainedTables", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.AutofitLikeWW11])
		{
			m_writer.WriteStartElement("autofitToFirstFixedWidthCell", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.UnderlineTabInNumList])
		{
			m_writer.WriteStartElement("underlineTabInNumList", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.HangulWidthLikeWW11])
		{
			m_writer.WriteStartElement("displayHangulFixedWidth", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.SplitPgBreakAndParaMark])
		{
			m_writer.WriteStartElement("splitPgBreakAndParaMark", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.DontVertAlignCellWithSp])
		{
			m_writer.WriteStartElement("doNotVertAlignCellWithSp", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.DontBreakConstrainedForcedTables])
		{
			m_writer.WriteStartElement("doNotBreakConstrainedForcedTable", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.DontVertAlignInTxbx])
		{
			m_writer.WriteStartElement("doNotVertAlignInTxbx", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.Word11KerningPairs])
		{
			m_writer.WriteStartElement("useAnsiKerningPairs", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.CachedColBalance])
		{
			m_writer.WriteStartElement("cachedColBalance", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
	}

	private void SerializeCommonCompatibilityOptions()
	{
		if (!m_document.Settings.CompatibilityOptions[CompatibilityOption.DontMakeSpaceForUL])
		{
			m_writer.WriteStartElement("spaceForUL", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (!m_document.Settings.CompatibilityOptions[CompatibilityOption.DntBlnSbDbWid])
		{
			m_writer.WriteStartElement("balanceSingleByteDoubleByteWidth", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.ExactOnTop])
		{
			m_writer.WriteStartElement("noExtraLineSpacing", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (!m_document.Settings.CompatibilityOptions[CompatibilityOption.LeaveBackslashAlone])
		{
			m_writer.WriteStartElement("doNotLeaveBackslashAlone", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (!m_document.Settings.CompatibilityOptions[CompatibilityOption.DntULTrlSpc])
		{
			m_writer.WriteStartElement("ulTrailSpace", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (!m_document.Settings.CompatibilityOptions[CompatibilityOption.ExpShRtn])
		{
			m_writer.WriteStartElement("doNotExpandShiftReturn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.ExtraAfter])
		{
			m_writer.WriteStartElement("suppressBottomSpacing", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.SuppressTopSpacing])
		{
			m_writer.WriteStartElement("suppressTopSpacing", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (!m_document.Settings.CompatibilityOptions[CompatibilityOption.DontAdjustLineHeightInTable])
		{
			m_writer.WriteStartElement("adjustLineHeightInTable", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (m_document.Settings.CompatibilityOptions[CompatibilityOption.ApplyBreakingRules])
		{
			m_writer.WriteStartElement("applyBreakingRules", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
	}

	private void SerializeCompatSettings()
	{
		string text = "15";
		if (m_document.Settings.CompatibilityMode == CompatibilityMode.Word2003)
		{
			text = "11";
		}
		if (m_document.Settings.CompatibilityMode == CompatibilityMode.Word2007)
		{
			text = "12";
		}
		if (m_document.Settings.CompatibilityMode == CompatibilityMode.Word2010)
		{
			text = "14";
		}
		m_writer.WriteStartElement("compat", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeCommonCompatibilityOptions();
		if (m_document.SaveOptions.MaintainCompatibilityMode)
		{
			SerializeCompatibilityProperties();
		}
		else if (!m_document.Settings.CompatibilityModeEnabled)
		{
			if (IsWord2007)
			{
				text = "12";
			}
			if (IsWord2010)
			{
				text = "14";
			}
			if (IsWord2013 || IsWordLatest)
			{
				text = "15";
			}
		}
		m_writer.WriteStartElement("compatSetting", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", "name", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "compatibilityMode");
		m_writer.WriteAttributeString("w", "uri", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "http://schemas.microsoft.com/office/word");
		m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
		m_writer.WriteEndElement();
		if (text == "14" || text == "15")
		{
			bool flag = true;
			if (m_document.Settings.CompatibilityOptions.PropertiesHash.ContainsKey(CompatibilityOption.overrideTableStyleFontSizeAndJustification))
			{
				flag = m_document.Settings.CompatibilityOptions[CompatibilityOption.overrideTableStyleFontSizeAndJustification];
			}
			if (flag)
			{
				m_writer.WriteStartElement("compatSetting", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("w", "name", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "overrideTableStyleFontSizeAndJustification");
				m_writer.WriteAttributeString("w", "uri", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "http://schemas.microsoft.com/office/word");
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
				m_writer.WriteEndElement();
			}
			flag = true;
			if (m_document.Settings.CompatibilityOptions.PropertiesHash.ContainsKey(CompatibilityOption.enableOpenTypeFeatures))
			{
				flag = m_document.Settings.CompatibilityOptions[CompatibilityOption.enableOpenTypeFeatures];
			}
			if (flag)
			{
				m_writer.WriteStartElement("compatSetting", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("w", "name", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "enableOpenTypeFeatures");
				m_writer.WriteAttributeString("w", "uri", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "http://schemas.microsoft.com/office/word");
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
				m_writer.WriteEndElement();
			}
			flag = true;
			if (m_document.Settings.CompatibilityOptions.PropertiesHash.ContainsKey(CompatibilityOption.doNotFlipMirrorIndents))
			{
				flag = m_document.Settings.CompatibilityOptions[CompatibilityOption.doNotFlipMirrorIndents];
			}
			if (flag)
			{
				m_writer.WriteStartElement("compatSetting", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("w", "name", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "doNotFlipMirrorIndents");
				m_writer.WriteAttributeString("w", "uri", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "http://schemas.microsoft.com/office/word");
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
				m_writer.WriteEndElement();
			}
			if (text == "15")
			{
				flag = true;
				if (m_document.Settings.CompatibilityOptions.PropertiesHash.ContainsKey(CompatibilityOption.doNotFlipMirrorIndents))
				{
					flag = m_document.Settings.CompatibilityOptions[CompatibilityOption.doNotFlipMirrorIndents];
				}
				if (flag)
				{
					m_writer.WriteStartElement("compatSetting", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
					m_writer.WriteAttributeString("w", "name", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "differentiateMultirowTableHeaders");
					m_writer.WriteAttributeString("w", "uri", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "http://schemas.microsoft.com/office/word");
					m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
					m_writer.WriteEndElement();
				}
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializeProtect(ProtectionType protectionType)
	{
		string text = string.Empty;
		switch (protectionType)
		{
		case ProtectionType.AllowOnlyComments:
			text = "comments";
			break;
		case ProtectionType.AllowOnlyFormFields:
			text = "forms";
			break;
		case ProtectionType.AllowOnlyRevisions:
			text = "trackedChanges";
			break;
		case ProtectionType.AllowOnlyReading:
			text = "readOnly";
			break;
		}
		if (!(text != string.Empty))
		{
			return;
		}
		m_writer.WriteStartElement("documentProtection", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (m_document.DOP.LockRev)
		{
			m_writer.WriteAttributeString("edit", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "trackedChanges");
			m_writer.WriteAttributeString("enforcement", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
		}
		else if (m_document.DOP.ProtEnabled)
		{
			m_writer.WriteAttributeString("edit", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "forms");
			m_writer.WriteAttributeString("enforcement", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
		}
		else if (m_document.DOP.LockAtn)
		{
			if (m_document.DOP.Dop2003.TreatLockAtnAsReadOnly)
			{
				m_writer.WriteAttributeString("edit", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "readOnly");
				m_writer.WriteAttributeString("enforcement", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
			}
			else
			{
				m_writer.WriteAttributeString("edit", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "comments");
				m_writer.WriteAttributeString("enforcement", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
			}
		}
		else
		{
			m_writer.WriteAttributeString("edit", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
			m_writer.WriteAttributeString("enforcement", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
		}
		if (m_document.RestrictFormatting)
		{
			m_writer.WriteAttributeString("formatting", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
		}
		if (m_document.DOP.ProtectionKey != 0)
		{
			DocxProtection docxProtection = new DocxProtection();
			m_writer.WriteAttributeString("cryptProviderType", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.Settings.CryptProviderTypeValue);
			m_writer.WriteAttributeString("cryptAlgorithmClass", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.Settings.CryptAlgorithmClassValue);
			m_writer.WriteAttributeString("cryptAlgorithmType", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.Settings.CryptAlgorithmTypeValue);
			m_writer.WriteAttributeString("cryptAlgorithmSid", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.Settings.CryptAlgorithmSidValue);
			m_writer.WriteAttributeString("cryptSpinCount", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.Settings.CryptSpinCountValue);
			byte[] array = docxProtection.CreateSalt(16);
			byte[] inArray = docxProtection.ComputeHash(array, m_document.DOP.ProtectionKey);
			m_writer.WriteAttributeString("hash", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", Convert.ToBase64String(inArray));
			m_writer.WriteAttributeString("salt", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", Convert.ToBase64String(array));
		}
		else if (!string.IsNullOrEmpty(m_document.Settings.HashValue) && !string.IsNullOrEmpty(m_document.Settings.SaltValue))
		{
			m_writer.WriteAttributeString("cryptProviderType", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.Settings.CryptProviderTypeValue);
			m_writer.WriteAttributeString("cryptAlgorithmClass", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.Settings.CryptAlgorithmClassValue);
			m_writer.WriteAttributeString("cryptAlgorithmType", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.Settings.CryptAlgorithmTypeValue);
			m_writer.WriteAttributeString("cryptAlgorithmSid", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.Settings.CryptAlgorithmSidValue);
			m_writer.WriteAttributeString("cryptSpinCount", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.Settings.CryptSpinCountValue);
			m_writer.WriteAttributeString("hash", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.Settings.HashValue);
			m_writer.WriteAttributeString("salt", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.Settings.SaltValue);
		}
		m_writer.WriteEndElement();
	}

	private void SerializeDocVariables(DocVariables docVariables)
	{
		m_writer.WriteStartElement("docVars", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		string text = string.Empty;
		foreach (string key in docVariables.Items.Keys)
		{
			if (docVariables.Items.ContainsKey(key))
			{
				text = docVariables.Items[key];
			}
			m_writer.WriteStartElement("docVar", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("name", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", key);
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ConvertToValidXmlString(text));
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeFootnoteSettings()
	{
		if (IsNeedToSerializeDocumentFootNoteProperties())
		{
			m_writer.WriteStartElement("footnotePr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeFootnotePosition();
			SerializeEndnoteFootnoteNumberFormat(isFootnote: true);
			if (m_document.InitialFootnoteNumber > 1)
			{
				SerializeEndnoteFootnoteElement("numStart", m_document.InitialFootnoteNumber.ToString());
			}
			if (m_document.RestartIndexForFootnotes == FootnoteRestartIndex.RestartForEachPage)
			{
				SerializeEndnoteFootnoteElement("numRestart", "eachPage");
			}
			else if (m_document.RestartIndexForFootnotes == FootnoteRestartIndex.RestartForEachSection)
			{
				SerializeEndnoteFootnoteElement("numRestart", "eachSect");
			}
			if (HasFootnote)
			{
				WriteFootEndnoteID(isFootnote: true, -1);
				WriteFootEndnoteID(isFootnote: true, 0);
				if (m_document.Footnotes.ContinuationNotice.Count > 0)
				{
					WriteFootEndnoteID(isFootnote: true, 1);
				}
			}
			m_writer.WriteEndElement();
		}
		if (!IsNeedToSerializeDocumentEndNoteProperties())
		{
			return;
		}
		m_writer.WriteStartElement("endnotePr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		WriteEntPosition();
		SerializeEndnoteFootnoteNumberFormat(isFootnote: false);
		if (m_document.InitialEndnoteNumber > 1)
		{
			SerializeEndnoteFootnoteElement("numStart", m_document.InitialEndnoteNumber.ToString());
		}
		if (m_document.RestartIndexForEndnote == EndnoteRestartIndex.RestartForEachSection)
		{
			SerializeEndnoteFootnoteElement("numRestart", "eachSect");
		}
		if (HasEndnote)
		{
			WriteFootEndnoteID(isFootnote: false, -1);
			WriteFootEndnoteID(isFootnote: false, 0);
			if (m_document.Endnotes.ContinuationNotice.Count > 0)
			{
				WriteFootEndnoteID(isFootnote: false, 1);
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializeFootnotePosition()
	{
		if (m_document.FootnotePosition == FootnotePosition.PrintImmediatelyBeneathText)
		{
			m_writer.WriteStartElement("pos", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "beneathText");
			m_writer.WriteEndElement();
		}
		else if (m_document.FootnotePosition == FootnotePosition.PrintAsEndnotes)
		{
			WriteEntPosition();
		}
	}

	private void WriteEntPosition()
	{
		if (m_document.EndnotePosition == EndnotePosition.DisplayEndOfSection)
		{
			m_writer.WriteStartElement("pos", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "sectEnd");
			m_writer.WriteEndElement();
		}
	}

	private void SerializeFootnotePosition(WSection section)
	{
		if (section.PageSetup.FootnotePosition == FootnotePosition.PrintImmediatelyBeneathText)
		{
			m_writer.WriteStartElement("pos", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "beneathText");
			m_writer.WriteEndElement();
		}
	}

	private void WriteFootEndnoteID(bool isFootnote, int id)
	{
		string localName = (isFootnote ? "footnote" : "endnote");
		m_writer.WriteStartElement(localName, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", id.ToString());
		m_writer.WriteEndElement();
	}

	private void SerializeNumberings()
	{
		if (m_document.ListStyles.Count != 0 || m_document.ListOverrides.Count != 0)
		{
			MemoryStream data = new MemoryStream();
			if (!IsWord2003ML)
			{
				m_writer = CreateWriter(data);
			}
			HasNumbering = true;
			m_writer.WriteStartElement("w", "numbering", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("xmlns", "wpc", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas");
			m_writer.WriteAttributeString("xmlns", "mc", null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
			m_writer.WriteAttributeString("xmlns", "o", null, "urn:schemas-microsoft-com:office:office");
			m_writer.WriteAttributeString("xmlns", "r", null, "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
			m_writer.WriteAttributeString("xmlns", "m", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/math" : "http://schemas.openxmlformats.org/officeDocument/2006/math");
			m_writer.WriteAttributeString("xmlns", "v", null, "urn:schemas-microsoft-com:vml");
			m_writer.WriteAttributeString("xmlns", "wp14", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing");
			m_writer.WriteAttributeString("xmlns", "wp", null, IsStrict ? "http://purl.oclc.org/ooxml/drawingml/wordprocessingDrawing" : "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing");
			m_writer.WriteAttributeString("xmlns", "w", null, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("xmlns", "w10", null, "urn:schemas-microsoft-com:office:word");
			m_writer.WriteAttributeString("xmlns", "w14", null, "http://schemas.microsoft.com/office/word/2010/wordml");
			m_writer.WriteAttributeString("xmlns", "w15", null, "http://schemas.microsoft.com/office/word/2012/wordml");
			m_writer.WriteAttributeString("xmlns", "wpg", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup");
			m_writer.WriteAttributeString("xmlns", "wpi", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingInk");
			m_writer.WriteAttributeString("xmlns", "wne", null, "http://schemas.microsoft.com/office/word/2006/wordml");
			m_writer.WriteAttributeString("xmlns", "wps", null, "http://schemas.microsoft.com/office/word/2010/wordprocessingShape");
			m_writer.WriteAttributeString("mc", "Ignorable", null, "w14 w15 wp14");
			if (m_document.ListStyles.Count > 0)
			{
				SerializePictureBullets(m_document.ListStyles);
				SerializeAbstractListStyles(m_document.ListStyles);
				SerializeListInstances(m_document.ListStyles);
				SerializeListOverrides(m_document.ListOverrides);
			}
			m_writer.WriteEndElement();
			if (!IsWord2003ML)
			{
				m_writer.Flush();
				m_archive.AddItem("word\\numbering.xml", data, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
			}
		}
	}

	private void SerializeListOverrides(ListOverrideStyleCollection listOverrideStyles)
	{
		if (m_lstStyleReferences == null || m_lstStyleReferences.Count == 0)
		{
			return;
		}
		foreach (int key in m_lstStyleReferences.Keys)
		{
			Dictionary<int, string> dictionary = m_lstStyleReferences[key];
			string empty = string.Empty;
			foreach (int key2 in dictionary.Keys)
			{
				empty = dictionary[key2];
				m_writer.WriteStartElement("num", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("numId", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", key2.ToString());
				m_writer.WriteStartElement("abstractNumId", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", key.ToString());
				m_writer.WriteEndElement();
				ListOverrideStyle listOverrideStyle = listOverrideStyles.FindByName(empty);
				if (listOverrideStyle != null)
				{
					SerializeOverrideStyle(listOverrideStyle);
				}
				m_writer.WriteEndElement();
			}
		}
	}

	private void SerializeOverrideStyle(ListOverrideStyle listOverrideStyle)
	{
		foreach (KeyValuePair<short, short> item in listOverrideStyle.OverrideLevels.LevelIndex)
		{
			SerializeOverrideLevel(item.Key, listOverrideStyle.OverrideLevels[item.Key]);
		}
	}

	private void SerializeOverrideLevel(int levelIndex, OverrideLevelFormat level)
	{
		m_writer.WriteStartElement("lvlOverride", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("ilvl", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", levelIndex.ToString());
		if (level.OverrideStartAtValue)
		{
			m_writer.WriteStartElement("startOverride", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", level.StartAt.ToString());
			m_writer.WriteEndElement();
		}
		if (level.OverrideFormatting)
		{
			SerializeListLevel(level.OverrideListLevel, levelIndex);
		}
		m_writer.WriteEndElement();
	}

	private void SerializeListInstances(ListStyleCollection listStyles)
	{
		for (int i = 0; i < listStyles.Count; i++)
		{
			m_writer.WriteStartElement("num", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("numId", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (i + 1).ToString());
			m_writer.WriteStartElement("abstractNumId", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", i.ToString());
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
	}

	private void SerializeAbstractListStyles(ListStyleCollection listStyles)
	{
		int num = 0;
		foreach (ListStyle listStyle in listStyles)
		{
			m_writer.WriteStartElement("abstractNum", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("abstractNumId", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString());
			m_writer.WriteStartElement("nsid", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", listStyle.ListID.ToString("X8"));
			m_writer.WriteEndElement();
			if (!string.IsNullOrEmpty(listStyle.StyleLink))
			{
				m_writer.WriteStartElement("styleLink", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", listStyle.StyleLink);
				m_writer.WriteEndElement();
			}
			if (!string.IsNullOrEmpty(listStyle.BaseListStyleName))
			{
				m_writer.WriteStartElement("numStyleLink", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", listStyle.BaseListStyleName);
				m_writer.WriteEndElement();
			}
			else
			{
				int i = 0;
				for (int count = listStyle.Levels.Count; i < count; i++)
				{
					SerializeListLevel(listStyle.Levels[i], i);
				}
			}
			m_writer.WriteEndElement();
			num++;
		}
	}

	private void SerializeListLevel(WListLevel listLevel, int levelIndex)
	{
		m_writer.WriteStartElement("lvl", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("ilvl", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", levelIndex.ToString());
		m_writer.WriteStartElement("start", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", listLevel.StartAt.ToString());
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("numFmt", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetPatternType(listLevel));
		m_writer.WriteEndElement();
		if (listLevel.NoRestartByHigher)
		{
			m_writer.WriteStartElement("lvlRestart", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
			m_writer.WriteEndElement();
		}
		if (listLevel.ParaStyleName != null)
		{
			string text = GetStyleId(listLevel.ParaStyleName);
			if (text == null)
			{
				text = listLevel.ParaStyleName.Replace(" ", string.Empty);
			}
			m_writer.WriteStartElement("pStyle", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
			m_writer.WriteEndElement();
		}
		if (listLevel.IsLegalStyleNumbering)
		{
			m_writer.WriteStartElement("isLgl", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		SerializeLevelFollow(listLevel);
		SerializeLevelText(listLevel, levelIndex + 1);
		SerializeLegacyProperties(listLevel);
		if (listLevel.PicBulletId > 0)
		{
			m_writer.WriteStartElement("lvlPicBulletId", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", listLevel.PicBulletId.ToString());
			m_writer.WriteEndElement();
		}
		if (listLevel.NumberAlignment != 0)
		{
			m_writer.WriteStartElement("lvlJc", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			string empty = string.Empty;
			empty = ((listLevel.NumberAlignment != ListNumberAlignment.Right) ? "center" : "right");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", empty);
			m_writer.WriteEndElement();
		}
		m_writer.WriteStartElement("pPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		SerializeParagraphFormat(listLevel.ParagraphFormat, null);
		m_writer.WriteEndElement();
		SerializeCharacterFormat(listLevel.CharacterFormat);
		m_writer.WriteEndElement();
	}

	private void SerializeLegacyProperties(WListLevel listLevel)
	{
		if (listLevel.Word6Legacy)
		{
			m_writer.WriteStartElement("legacy", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("legacy", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
			m_writer.WriteAttributeString("legacySpace", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", listLevel.LegacySpace.ToString());
			m_writer.WriteAttributeString("legacyIndent", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", listLevel.LegacyIndent.ToString());
			m_writer.WriteEndElement();
		}
	}

	private void SerializeLevelFollow(WListLevel listLevel)
	{
		string empty = string.Empty;
		empty = ((listLevel.FollowCharacter == FollowCharacterType.Space) ? "space" : ((listLevel.FollowCharacter != 0) ? "nothing" : "tab"));
		m_writer.WriteStartElement("suff", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", empty);
		m_writer.WriteEndElement();
	}

	private string RemoveIllegalXMLCharacters(string text)
	{
		_ = new char[30];
		for (int i = 0; i < 30; i++)
		{
			text = text.Replace((char)i, '\0');
		}
		if (text != null)
		{
			return text.Replace("\0", string.Empty);
		}
		return text;
	}

	private void SerializeLevelText(WListLevel listLevel, int lvlIndex)
	{
		m_writer.WriteStartElement("lvlText", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		bool flag = false;
		if (listLevel.PatternType == ListPatternType.None && listLevel.BulletCharacter != null && listLevel.BulletCharacter.Length > 0 && listLevel.ParaStyleName == null)
		{
			flag = true;
		}
		if ((listLevel.PatternType == ListPatternType.Bullet || flag) && listLevel.BulletCharacter != null)
		{
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", RemoveIllegalXMLCharacters(listLevel.BulletCharacter));
		}
		else
		{
			string text = string.Empty;
			if (listLevel.NumberPrefix != null && listLevel.NumberPrefix.Length > 0)
			{
				text = UpdateNumberPrefOrSuf(listLevel.NumberPrefix);
			}
			string text2 = text;
			if (!listLevel.NoLevelText && listLevel.NumberSuffix != null)
			{
				char listSymbol = GetListSymbol(listLevel.LevelNumber);
				listLevel.NumberSuffix = listLevel.NumberSuffix.Replace(listSymbol.ToString(), string.Empty);
				char[] trimChars = new char[1];
				text2 = text2 + "%" + lvlIndex + UpdateNumberPrefOrSuf(listLevel.NumberSuffix.Trim(trimChars));
			}
			if (listLevel.LevelText != null && string.IsNullOrEmpty(text2))
			{
				text2 = listLevel.LevelText;
			}
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text2);
		}
		m_writer.WriteEndElement();
	}

	private void SerializePictureBullets(ListStyleCollection listStyleCollection)
	{
		foreach (ListStyle item in listStyleCollection)
		{
			int i = 0;
			for (int count = item.Levels.Count; i < count; i++)
			{
				WListLevel wListLevel = item.Levels[i];
				if (wListLevel.PicBullet != null)
				{
					SerializePictureBullet(wListLevel);
				}
			}
		}
	}

	private void SerializePictureBullet(WListLevel listLevel)
	{
		WPicture picBullet = listLevel.PicBullet;
		string value = AddImageRelation(PictureBullets, picBullet.ImageRecord, IsNeedToSkipImageRelation(picBullet));
		m_hasImages = true;
		int nextID = GetNextID();
		listLevel.PicBulletId = (short)nextID;
		StringBuilder stringBuilder = new StringBuilder("width:");
		stringBuilder.Append(picBullet.Width.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt;height:");
		stringBuilder.Append(picBullet.Height.ToString(CultureInfo.InvariantCulture));
		stringBuilder.Append("pt");
		stringBuilder.Replace(",", ".");
		m_writer.WriteStartElement("numPicBullet", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("numPicBulletId", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", nextID.ToString());
		m_writer.WriteStartElement("pict", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteStartElement("shape", "urn:schemas-microsoft-com:vml");
		m_writer.WriteAttributeString("type", "#_x0000_t75");
		m_writer.WriteAttributeString("style", stringBuilder.ToString());
		m_writer.WriteAttributeString("bullet", "urn:schemas-microsoft-com:office:office", "t");
		if (!listLevel.IsEmptyPicture)
		{
			m_writer.WriteStartElement("imagedata", "urn:schemas-microsoft-com:vml");
			m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships", value);
			m_writer.WriteAttributeString("title", "urn:schemas-microsoft-com:office:office", string.Empty);
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeStyles()
	{
		MemoryStream data = new MemoryStream();
		if (!IsWord2003ML)
		{
			m_writer = CreateWriter(data);
		}
		m_writer.WriteStartElement("w", "styles", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "mc", null, "http://schemas.openxmlformats.org/markup-compatibility/2006");
		m_writer.WriteAttributeString("xmlns", "r", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
		m_writer.WriteAttributeString("xmlns", "w", null, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("xmlns", "w14", null, "http://schemas.microsoft.com/office/word/2010/wordml");
		m_writer.WriteAttributeString("xmlns", "w15", null, "http://schemas.microsoft.com/office/word/2012/wordml");
		m_writer.WriteAttributeString("mc", "Ignorable", null, "w14 w15");
		SerializeDefaultStyles();
		SerializeDocumentStyles();
		m_writer.WriteEndElement();
		if (!IsWord2003ML)
		{
			m_writer.Flush();
			m_archive.AddItem("word\\styles.xml", data, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
	}

	private void SerializeDocumentStyles()
	{
		Dictionary<string, int> dictionary = new Dictionary<string, int>();
		foreach (Style style in m_document.Styles)
		{
			string text = ((style.StyleType == StyleType.CharacterStyle) ? style.StyleType.ToString() : StyleType.ParagraphStyle.ToString());
			while (dictionary.ContainsKey(style.Name + "_" + text))
			{
				style.IsCustom = true;
				string name = style.Name;
				style.SetStyleName(style.Name + "_" + dictionary[style.Name + "_" + text]);
				dictionary[name + "_" + text]++;
			}
			SerializeStyle(style, m_document);
			dictionary.Add(style.Name + "_" + text, 0);
		}
	}

	private string GetStyleId(string styleName)
	{
		Dictionary<string, string> styleNameIds = m_document.StyleNameIds;
		foreach (string key in styleNameIds.Keys)
		{
			if (styleNameIds[key] == styleName)
			{
				return key;
			}
		}
		return null;
	}

	private void SerializeStyle(Style style, WordDocument document)
	{
		string name = style.Name;
		string empty = string.Empty;
		string empty2 = string.Empty;
		switch (style.TypeCode)
		{
		case WordStyleType.TableStyle:
			switch (name)
			{
			case "Table Normal":
				return;
			case "NormalTable":
				return;
			case "Normal Table":
				return;
			}
			empty2 = "table";
			break;
		case WordStyleType.ListStyle:
			empty2 = "numbering";
			break;
		default:
			empty2 = ((style is WTableStyle) ? "table" : ((style is WParagraphStyle) ? "paragraph" : ((style is WNumberingStyle) ? "numbering" : "character")));
			break;
		}
		m_writer.WriteStartElement("w", "style", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", empty2);
		string text = name;
		Dictionary<string, string> styleNameIds = document.StyleNameIds;
		if (styleNameIds.ContainsValue(name))
		{
			string styleIDName = style.StyleIDName;
			foreach (string key in styleNameIds.Keys)
			{
				if (styleIDName != null)
				{
					if (key == styleIDName)
					{
						m_writer.WriteAttributeString("styleId", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", key.Replace(" ", string.Empty));
						break;
					}
				}
				else if (styleNameIds[key] == name)
				{
					m_writer.WriteAttributeString("styleId", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", key.Replace(" ", string.Empty));
					break;
				}
			}
		}
		else
		{
			if (text == "Normal Table")
			{
				text = "TableNormal";
			}
			m_writer.WriteAttributeString("styleId", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text.Replace(" ", string.Empty));
		}
		if (style.GetBuiltinStyles().ContainsKey(name.ToLower()))
		{
			style.IsCustom = false;
		}
		else
		{
			style.IsCustom = true;
		}
		if (style.IsCustom)
		{
			m_writer.WriteAttributeString("customStyle", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
		}
		else if (IsDefaultStyle(style))
		{
			m_writer.WriteAttributeString("default", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
		}
		m_writer.WriteStartElement("name", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", name);
		m_writer.WriteEndElement();
		if (style.BaseStyle != null)
		{
			empty = style.BaseStyle.Name;
			m_writer.WriteStartElement("basedOn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			string styleId = GetStyleId(empty);
			if (!string.IsNullOrEmpty(styleId))
			{
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", styleId.Replace(" ", string.Empty));
			}
			else
			{
				if (empty == "Normal Table")
				{
					empty = "TableNormal";
				}
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", empty.Replace(" ", string.Empty));
			}
			m_writer.WriteEndElement();
		}
		if (!string.IsNullOrEmpty(style.NextStyle))
		{
			string nextStyle = style.NextStyle;
			if (nextStyle != style.Name)
			{
				m_writer.WriteStartElement("next", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				string styleId2 = GetStyleId(nextStyle);
				if (!string.IsNullOrEmpty(styleId2))
				{
					m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", styleId2);
				}
				else
				{
					m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", nextStyle.Replace(" ", string.Empty));
				}
				m_writer.WriteEndElement();
			}
		}
		if (!string.IsNullOrEmpty(style.LinkedStyleName))
		{
			m_writer.WriteStartElement("link", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", style.LinkedStyleName.Replace(" ", string.Empty));
			m_writer.WriteEndElement();
		}
		if (style.UIPriority != int.MinValue)
		{
			m_writer.WriteStartElement("uiPriority", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", style.UIPriority.ToString());
			m_writer.WriteEndElement();
		}
		if (style.IsSemiHidden)
		{
			m_writer.WriteStartElement("semiHidden", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (style.UnhideWhenUsed)
		{
			m_writer.WriteStartElement("unhideWhenUsed", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (style.IsPrimaryStyle)
		{
			m_writer.WriteStartElement("qFormat", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (style is WParagraphStyle)
		{
			WParagraphStyle wParagraphStyle = style as WParagraphStyle;
			if (wParagraphStyle.ListIndex >= 0)
			{
				SerializeNumPr(wParagraphStyle.ListIndex, wParagraphStyle.ListLevel);
			}
			else if (wParagraphStyle.ListFormat.CurrentListStyle != null || wParagraphStyle.ListFormat.IsEmptyList)
			{
				int listId = 0;
				int listLevel = -1;
				if (!wParagraphStyle.ListFormat.IsEmptyList)
				{
					listId = GetListId(wParagraphStyle.ListFormat);
					_ = wParagraphStyle.ParagraphFormat.OutlineLevel;
					if (wParagraphStyle.ListFormat.PropertiesHash.ContainsKey(0))
					{
						listLevel = wParagraphStyle.ListFormat.ListLevelNumber;
					}
				}
				SerializeNumPr(listId, listLevel);
			}
			else if (wParagraphStyle.ListFormat.HasKey(0))
			{
				SerializeNumPr(-1, wParagraphStyle.ListFormat.ListLevelNumber);
			}
			m_writer.WriteStartElement("pPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeParagraphFormat(wParagraphStyle.ParagraphFormat, null);
			m_writer.WriteEndElement();
			SerializeCharacterFormat(style.CharacterFormat);
		}
		else if (style is WTableStyle)
		{
			SerializeTableStyle(style as WTableStyle);
		}
		else if (style is WNumberingStyle)
		{
			WNumberingStyle wNumberingStyle = style as WNumberingStyle;
			if (wNumberingStyle.ListIndex >= 0)
			{
				SerializeNumPr(wNumberingStyle.ListIndex, wNumberingStyle.ListLevel);
			}
			else if (wNumberingStyle.ListFormat.CurrentListStyle != null || wNumberingStyle.ListFormat.IsEmptyList)
			{
				int listId2 = 0;
				int listLevel2 = -1;
				if (!wNumberingStyle.ListFormat.IsEmptyList)
				{
					listId2 = GetListId(wNumberingStyle.ListFormat);
					listLevel2 = wNumberingStyle.ListFormat.ListLevelNumber;
				}
				SerializeNumPr(listId2, listLevel2);
			}
			else if (wNumberingStyle.ListFormat.ListLevelNumber > 0)
			{
				SerializeNumPr(-1, wNumberingStyle.ListFormat.ListLevelNumber);
			}
		}
		else
		{
			SerializeCharacterFormat(style.CharacterFormat);
		}
		m_writer.WriteEndElement();
	}

	private void SerializeTableStyle(WTableStyle style)
	{
		if (!style.ParagraphFormat.IsDefault)
		{
			m_writer.WriteStartElement("pPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (style.ListFormat.CurrentListStyle != null || style.ListFormat.IsEmptyList)
			{
				int listId = 0;
				int listLevel = -1;
				if (!style.ListFormat.IsEmptyList)
				{
					listId = GetListId(style.ListFormat);
					listLevel = style.ListFormat.ListLevelNumber;
				}
				SerializeNumPr(listId, listLevel);
			}
			else if (style.ListFormat.ListLevelNumber > 0)
			{
				SerializeNumPr(-1, style.ListFormat.ListLevelNumber);
			}
			SerializeParagraphFormat(style.ParagraphFormat, null);
			m_writer.WriteEndElement();
		}
		if (!style.CharacterFormat.IsDefault)
		{
			SerializeCharacterFormat(style.CharacterFormat);
		}
		if (!style.TableProperties.IsDefault)
		{
			SerializeTableStyleTableProperties(style.TableProperties);
		}
		if (!style.RowProperties.IsDefault)
		{
			SerializeTableStyleRowProperties(style.RowProperties);
		}
		if (!style.CellProperties.IsDefault)
		{
			SerializeTableStyleCellProperties(style.CellProperties);
		}
		foreach (ConditionalFormattingStyle conditionalFormattingStyle in style.ConditionalFormattingStyles)
		{
			SerializeConditionalFormattingStyle(conditionalFormattingStyle.ConditionalFormattingType, conditionalFormattingStyle);
		}
	}

	private void SerializeConditionalFormattingStyle(ConditionalFormattingType code, ConditionalFormattingStyle style)
	{
		m_writer.WriteStartElement("w", "tblStylePr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetConditionalStyleType(code));
		if (!style.ParagraphFormat.IsDefault)
		{
			m_writer.WriteStartElement("pPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeParagraphFormat(style.ParagraphFormat, null);
			m_writer.WriteEndElement();
		}
		if (!style.CharacterFormat.IsDefault)
		{
			SerializeCharacterFormat(style.CharacterFormat);
		}
		if (!style.TableProperties.IsDefault)
		{
			SerializeTableStyleTableProperties(style.TableProperties);
		}
		if (!style.RowProperties.IsDefault)
		{
			SerializeTableStyleRowProperties(style.RowProperties);
		}
		if (!style.CellProperties.IsDefault)
		{
			SerializeTableStyleCellProperties(style.CellProperties);
		}
		m_writer.WriteEndElement();
	}

	private string GetConditionalStyleType(ConditionalFormattingType code)
	{
		string result = "";
		switch (code)
		{
		case ConditionalFormattingType.FirstRow:
			result = "firstRow";
			break;
		case ConditionalFormattingType.LastRow:
			result = "lastRow";
			break;
		case ConditionalFormattingType.OddRowBanding:
			result = "band1Horz";
			break;
		case ConditionalFormattingType.EvenRowBanding:
			result = "band2Horz";
			break;
		case ConditionalFormattingType.FirstColumn:
			result = "firstCol";
			break;
		case ConditionalFormattingType.LastColumn:
			result = "lastCol";
			break;
		case ConditionalFormattingType.OddColumnBanding:
			result = "band1Vert";
			break;
		case ConditionalFormattingType.EvenColumnBanding:
			result = "band2Vert";
			break;
		case ConditionalFormattingType.FirstRowLastCell:
			result = "neCell";
			break;
		case ConditionalFormattingType.FirstRowFirstCell:
			result = "nwCell";
			break;
		case ConditionalFormattingType.LastRowLastCell:
			result = "seCell";
			break;
		case ConditionalFormattingType.LastRowFirstCell:
			result = "swCell";
			break;
		}
		return result;
	}

	private void SerializeTableStyleCellProperties(TableStyleCellProperties props)
	{
		m_writer.WriteStartElement("tcPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (!props.Borders.IsDefault && props.HasValue(1))
		{
			m_writer.WriteStartElement("tcBorders", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeBorders(props.Borders, 8);
			m_writer.WriteEndElement();
		}
		SerializeShading(props);
		if (!props.TextWrap)
		{
			m_writer.WriteStartElement("noWrap", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (!props.Paddings.IsDefault && props.HasValue(3))
		{
			m_writer.WriteStartElement("tcMar", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializePaddings(props.Paddings);
			m_writer.WriteEndElement();
		}
		SerializeCellVerticalAlign(props.VerticalAlignment);
		m_writer.WriteEndElement();
	}

	private void SerializeTableStyleRowProperties(TableStyleRowProperties props)
	{
		m_writer.WriteStartElement("trPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (!props.IsBreakAcrossPages)
		{
			m_writer.WriteStartElement("cantSplit", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (props.IsHeader)
		{
			m_writer.WriteStartElement("tblHeader", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		if (props.HasValue(52))
		{
			m_writer.WriteStartElement("tblCellSpacing", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(props.CellSpacing * 20f));
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
			m_writer.WriteEndElement();
		}
		if (props.HasValue(105))
		{
			m_writer.WriteStartElement("jc", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			switch (props.HorizontalAlignment)
			{
			case RowAlignment.Right:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", IsStrict ? "end" : "right");
				break;
			case RowAlignment.Center:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "center");
				break;
			default:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", IsStrict ? "start" : "left");
				break;
			}
			m_writer.WriteEndElement();
		}
		if (props.IsHidden)
		{
			m_writer.WriteStartElement("hidden", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private void SerializeTableStyleTableProperties(TableStyleTableProperties props)
	{
		m_writer.WriteStartElement("tblPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (props.OwnerBase is WTableStyle && props.HasValue(5))
		{
			m_writer.WriteStartElement("tblStyleRowBandSize", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", props.RowStripe.ToString());
			m_writer.WriteEndElement();
		}
		if (props.OwnerBase is WTableStyle && props.HasValue(4))
		{
			m_writer.WriteStartElement("tblStyleColBandSize", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", props.ColumnStripe.ToString());
			m_writer.WriteEndElement();
		}
		if (props.HasValue(105))
		{
			m_writer.WriteStartElement("jc", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			switch (props.HorizontalAlignment)
			{
			case RowAlignment.Right:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "right");
				break;
			case RowAlignment.Center:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "center");
				break;
			default:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "left");
				break;
			}
			m_writer.WriteEndElement();
		}
		if (props.HasValue(52))
		{
			m_writer.WriteStartElement("tblCellSpacing", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(props.CellSpacing * 20f));
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
			m_writer.WriteEndElement();
		}
		if (props.HasValue(53))
		{
			m_writer.WriteStartElement("tblInd", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(props.LeftIndent * 20f));
			m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
			m_writer.WriteEndElement();
		}
		if (!props.Borders.IsDefault && props.HasValue(1))
		{
			m_writer.WriteStartElement("tblBorders", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeBorders(props.Borders, 8);
			m_writer.WriteEndElement();
		}
		if (!props.Paddings.IsDefault && props.HasValue(3))
		{
			m_writer.WriteStartElement("tblCellMar", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializePaddings(props.Paddings);
			m_writer.WriteEndElement();
		}
		SerializeShading(props);
		m_writer.WriteEndElement();
	}

	private void SerializeShading(TableStyleCellProperties props)
	{
		if (props.HasValue(4) || props.HasValue(5) || props.HasValue(7))
		{
			m_writer.WriteStartElement("shd", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			string textureStyle = GetTextureStyle(props.TextureStyle);
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", textureStyle);
			if (props.ForeColor == Color.Empty)
			{
				m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
			}
			else if (props.ForeColor != Color.Empty)
			{
				m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode(props.ForeColor));
			}
			if (props.BackColor == Color.Empty)
			{
				m_writer.WriteAttributeString("fill", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
			}
			else if (props.BackColor != Color.Empty)
			{
				m_writer.WriteAttributeString("fill", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode(props.BackColor));
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeShading(TableStyleTableProperties props)
	{
		if (props.HasValue(108) || props.HasValue(111) || props.HasValue(110))
		{
			m_writer.WriteStartElement("shd", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			string textureStyle = GetTextureStyle(props.TextureStyle);
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", textureStyle);
			if (props.ForeColor == Color.Empty)
			{
				m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
			}
			else if (props.ForeColor != Color.Empty)
			{
				m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode(props.ForeColor));
			}
			if (props.BackColor == Color.Empty)
			{
				m_writer.WriteAttributeString("fill", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
			}
			else if (props.BackColor != Color.Empty)
			{
				m_writer.WriteAttributeString("fill", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode(props.BackColor));
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeLatentStyles()
	{
		if (m_document.LatentStyles2010 != null)
		{
			XmlReader reader = CreateReader(m_document.LatentStyles2010);
			m_writer.WriteNode(reader, defattr: false);
		}
	}

	private void SerializeDefaultStyles()
	{
		m_writer.WriteStartElement("docDefaults", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteStartElement("rPrDefault", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (m_document.DefCharFormat != null)
		{
			SerializeCharacterFormat(m_document.DefCharFormat);
		}
		else
		{
			m_writer.WriteStartElement("rPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteStartElement("rFonts", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (!string.IsNullOrEmpty(m_document.StandardAsciiFont))
			{
				m_writer.WriteAttributeString("ascii", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.StandardAsciiFont);
			}
			if (!string.IsNullOrEmpty(m_document.StandardFarEastFont))
			{
				m_writer.WriteAttributeString("eastAsia", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.StandardFarEastFont);
			}
			if (!string.IsNullOrEmpty(m_document.StandardNonFarEastFont))
			{
				m_writer.WriteAttributeString("hAnsi", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.StandardNonFarEastFont);
			}
			if (!string.IsNullOrEmpty(m_document.StandardBidiFont))
			{
				m_writer.WriteAttributeString("cs", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", m_document.StandardBidiFont);
			}
			m_writer.WriteEndElement();
			float defFontSize = GetDefFontSize(m_document, 3);
			if (defFontSize != 0f)
			{
				m_writer.WriteStartElement("sz", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (defFontSize * 2f).ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			defFontSize = GetDefFontSize(m_document, 62);
			if (defFontSize != 0f)
			{
				m_writer.WriteStartElement("szCs", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (defFontSize * 2f).ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("pPrDefault", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (m_document.m_defParaFormat != null)
		{
			m_writer.WriteStartElement("pPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			SerializeParagraphFormat(m_document.m_defParaFormat, null);
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		SerializeLatentStyles();
		if (m_document.Styles.Count == 0 || m_document.Styles.FindByName("Normal") == null)
		{
			SerializeDefaultParagraphStyle();
		}
		if (!IsDocumentContainsDefaultTableStyle())
		{
			SerializeTableNormalStyle();
		}
		if (m_document.Styles.FindByName("No List") == null && m_document.Styles.FindByName("NoList") == null)
		{
			SerializeNoListStyle();
		}
		if (m_document.Styles.FindByName("Table Grid") == null && m_document.Styles.FindByName("TableGrid") == null)
		{
			SerializeTableGridStyle();
		}
	}

	private void SerializeTableGridStyle()
	{
		m_writer.WriteStartElement("w", "style", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "table");
		m_writer.WriteAttributeString("styleId", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "TableGrid");
		m_writer.WriteStartElement("name", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "Table Grid");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("basedOn", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "TableNormal");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("tblPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteStartElement("tblInd", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
		m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("tblBorders", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteStartElement("top", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "single");
		m_writer.WriteAttributeString("sz", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "4");
		m_writer.WriteAttributeString("space", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
		m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "000000");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("left", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "single");
		m_writer.WriteAttributeString("sz", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "4");
		m_writer.WriteAttributeString("space", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
		m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "000000");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("bottom", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "single");
		m_writer.WriteAttributeString("sz", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "4");
		m_writer.WriteAttributeString("space", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
		m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "000000");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("right", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "single");
		m_writer.WriteAttributeString("sz", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "4");
		m_writer.WriteAttributeString("space", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
		m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "000000");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("insideH", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "single");
		m_writer.WriteAttributeString("sz", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "4");
		m_writer.WriteAttributeString("space", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
		m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "000000");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("insideV", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "single");
		m_writer.WriteAttributeString("sz", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "4");
		m_writer.WriteAttributeString("space", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
		m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "000000");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeNoListStyle()
	{
		m_writer.WriteStartElement("w", "style", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "numbering");
		m_writer.WriteAttributeString("default", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
		m_writer.WriteAttributeString("styleId", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "NoList");
		m_writer.WriteStartElement("name", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "No List");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("uiPriority", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "99");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("semiHidden", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("unhideWhenUsed", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeTableNormalStyle()
	{
		m_writer.WriteStartElement("w", "style", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "table");
		m_writer.WriteAttributeString("default", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
		m_writer.WriteAttributeString("styleId", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "TableNormal");
		m_writer.WriteStartElement("name", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "Normal Table");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("uiPriority", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "99");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("semiHidden", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("unhideWhenUsed", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("qFormat", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("tblPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteStartElement("tblInd", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
		m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("tblCellMar", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteStartElement("top", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
		m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("left", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "108");
		m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("bottom", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
		m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("right", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "108");
		m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "dxa");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeDefaultParagraphStyle()
	{
		m_writer.WriteStartElement("w", "style", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "paragraph");
		m_writer.WriteAttributeString("default", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
		m_writer.WriteAttributeString("styleId", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "Normal");
		m_writer.WriteStartElement("name", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "Normal");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("qFormat", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("w", "style", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("type", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "character");
		m_writer.WriteAttributeString("default", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
		m_writer.WriteAttributeString("styleId", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "DefaultParagraphFont");
		m_writer.WriteStartElement("name", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "Default Paragraph Font");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("uiPriority", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("semiHidden", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteEndElement();
		m_writer.WriteStartElement("unhideWhenUsed", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteEndElement();
		m_writer.WriteEndElement();
	}

	private void SerializeCharacterFormat(WCharacterFormat characterFormat)
	{
		List<Stream> list = new List<Stream>();
		int i = 0;
		for (int count = characterFormat.XmlProps.Count; i < count; i++)
		{
			list.Add(characterFormat.XmlProps[i]);
		}
		m_writer.WriteStartElement("rPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (characterFormat.OwnerBase is WParagraph && characterFormat.Revisions.Count > 0)
		{
			SerializeRevisionsInFormatting(characterFormat.Revisions);
		}
		if (characterFormat.CharStyleName != null && characterFormat.CharStyleName.Length != 0)
		{
			string text = GetStyleId(characterFormat.CharStyleName);
			if (string.IsNullOrEmpty(text))
			{
				text = characterFormat.CharStyleName;
			}
			m_writer.WriteStartElement("rStyle", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text.Replace(" ", string.Empty));
			m_writer.WriteEndElement();
		}
		if (HasFont(characterFormat))
		{
			m_writer.WriteStartElement("rFonts", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (characterFormat.HasValue(68))
			{
				string localName = "ascii";
				if (characterFormat.IsThemeFont(characterFormat.FontNameAscii))
				{
					localName = "asciiTheme";
				}
				m_writer.WriteAttributeString(localName, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", characterFormat.FontNameAscii);
			}
			if (characterFormat.HasValue(70))
			{
				string localName = "hAnsi";
				if (characterFormat.IsThemeFont(characterFormat.FontNameNonFarEast))
				{
					localName = "hAnsiTheme";
				}
				m_writer.WriteAttributeString(localName, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", characterFormat.FontNameNonFarEast);
			}
			if (characterFormat.HasValue(69))
			{
				string localName = "eastAsia";
				if (characterFormat.IsThemeFont(characterFormat.FontNameFarEast))
				{
					localName = "eastAsiaTheme";
				}
				m_writer.WriteAttributeString(localName, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", characterFormat.FontNameFarEast);
			}
			if (characterFormat.HasValue(61))
			{
				string localName = "cs";
				if (characterFormat.IsThemeFont(characterFormat.FontNameBidi))
				{
					localName = "cstheme";
				}
				m_writer.WriteAttributeString(localName, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", characterFormat.FontNameBidi);
			}
			if (characterFormat.HasValue(72))
			{
				m_writer.WriteAttributeString("hint", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", characterFormat.GetFontHint());
			}
			m_writer.WriteEndElement();
		}
		if (characterFormat.HasValue(4))
		{
			SerializeBoolProperty("b", characterFormat.Bold);
		}
		if (characterFormat.HasValue(59))
		{
			SerializeBoolProperty("bCs", characterFormat.BoldBidi);
		}
		if (characterFormat.HasValue(5))
		{
			SerializeBoolProperty("i", characterFormat.Italic);
		}
		if (characterFormat.HasValue(60))
		{
			SerializeBoolProperty("iCs", characterFormat.ItalicBidi);
		}
		if (characterFormat.HasValue(54))
		{
			SerializeBoolProperty("caps", characterFormat.AllCaps);
		}
		if (characterFormat.HasValue(55))
		{
			SerializeBoolProperty("smallCaps", characterFormat.SmallCaps);
		}
		if (characterFormat.HasValue(6))
		{
			SerializeBoolProperty("strike", characterFormat.Strikeout);
		}
		if (characterFormat.HasValue(14))
		{
			SerializeBoolProperty("dstrike", characterFormat.DoubleStrike);
		}
		if (characterFormat.HasValue(71))
		{
			SerializeBoolProperty("outline", characterFormat.OutLine);
		}
		if (characterFormat.HasValue(50))
		{
			SerializeBoolProperty("shadow", characterFormat.Shadow);
		}
		SerializeDocxProps(list, "shadow");
		if (characterFormat.HasValue(51))
		{
			SerializeBoolProperty("emboss", characterFormat.Emboss);
		}
		if (characterFormat.HasValue(52))
		{
			SerializeBoolProperty("imprint", characterFormat.Engrave);
		}
		if (characterFormat.HasValue(76))
		{
			SerializeBoolProperty("noProof", characterFormat.NoProof);
		}
		if (characterFormat.HasValue(81))
		{
			m_writer.WriteStartElement("snapToGrid", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (!characterFormat.SnapToGrid)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "off");
			}
			m_writer.WriteEndElement();
		}
		SerializeDocxProps(list, "glow");
		SerializeDocxProps(list, "reflection");
		SerializeDocxProps(list, "textOutline");
		SerializeDocxProps(list, "textFill");
		if (characterFormat.HasValue(53))
		{
			SerializeBoolProperty("vanish", characterFormat.Hidden);
		}
		if (characterFormat.HasValue(92))
		{
			SerializeBoolProperty("webHidden", characterFormat.WebHidden);
		}
		if (characterFormat.HasValue(1))
		{
			m_writer.WriteStartElement("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (characterFormat.TextColor == Color.Empty)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
			}
			else
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode(characterFormat.TextColor));
			}
			m_writer.WriteEndElement();
		}
		if (characterFormat.HasValue(18))
		{
			m_writer.WriteStartElement("spacing", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(characterFormat.CharacterSpacing * 20f));
			m_writer.WriteEndElement();
		}
		if (characterFormat.HasValue(127))
		{
			m_writer.WriteStartElement("w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(characterFormat.Scaling));
			m_writer.WriteEndElement();
		}
		if (characterFormat.HasValue(125))
		{
			m_writer.WriteStartElement("kern", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(characterFormat.Kern * 2f));
			m_writer.WriteEndElement();
		}
		if (characterFormat.HasValue(17))
		{
			m_writer.WriteStartElement("position", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(characterFormat.Position * 2f));
			m_writer.WriteEndElement();
		}
		if (characterFormat.HasValue(3))
		{
			m_writer.WriteStartElement("sz", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(characterFormat.FontSize * 2f));
			m_writer.WriteEndElement();
		}
		if (characterFormat.HasValue(62))
		{
			m_writer.WriteStartElement("szCs", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(characterFormat.FontSizeBidi * 2f));
			m_writer.WriteEndElement();
		}
		if (characterFormat.HasValue(63) && characterFormat.HighlightColor != Color.Empty)
		{
			m_writer.WriteStartElement("highlight", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			Color color = WordColor.ColorsArray[WordColor.ConvertColorToId(characterFormat.HighlightColor)];
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetHighlightColor(color));
			m_writer.WriteEndElement();
		}
		if (characterFormat.HasValue(7))
		{
			m_writer.WriteStartElement("u", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetUnderlineStyle(characterFormat.UnderlineStyle));
			if (characterFormat.HasValue(90))
			{
				m_writer.WriteAttributeString("w", "color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode(characterFormat.UnderlineColor));
			}
			m_writer.WriteEndElement();
		}
		if (characterFormat.HasValue(79))
		{
			m_writer.WriteStartElement("em", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetEmphasisType(characterFormat.EmphasisType));
			m_writer.WriteEndElement();
		}
		if (characterFormat.HasValue(80))
		{
			m_writer.WriteStartElement("effect", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetTextEffect(characterFormat.TextEffect));
			m_writer.WriteEndElement();
		}
		if (characterFormat.HasValue(13))
		{
			m_writer.WriteStartElement("eastAsianLayout", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", characterFormat.CFELayout.ID.ToString());
			CFELayout cFELayout = characterFormat.CFELayout;
			if (cFELayout.Combine)
			{
				m_writer.WriteAttributeString("w", "combine", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "on");
			}
			if (cFELayout.Vertical)
			{
				m_writer.WriteAttributeString("w", "vert", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "on");
			}
			if (cFELayout.VerticalCompress)
			{
				m_writer.WriteAttributeString("w", "vertCompress", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "on");
			}
			if (cFELayout.HasCombineBracketsType())
			{
				m_writer.WriteAttributeString("w", "combineBrackets", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", cFELayout.CombineBracketsType.ToString().ToLower());
			}
			m_writer.WriteEndElement();
		}
		SerializeBorder(characterFormat.Border, "bdr", 8);
		if (characterFormat.HasValue(9) || characterFormat.HasValue(77))
		{
			SerializeCharacterShading(characterFormat);
		}
		if (characterFormat.HasValue(16))
		{
			m_writer.WriteStartElement("fitText", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (characterFormat.HasValue(19))
			{
				m_writer.WriteAttributeString("w", "id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(characterFormat.FitTextID));
			}
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(characterFormat.FitTextWidth * 20));
			m_writer.WriteEndElement();
		}
		if (characterFormat.HasValue(10))
		{
			m_writer.WriteStartElement("vertAlign", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			switch (characterFormat.SubSuperScript)
			{
			case SubSuperScript.SubScript:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "subscript");
				break;
			case SubSuperScript.SuperScript:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "superscript");
				break;
			default:
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "baseline");
				break;
			}
			m_writer.WriteEndElement();
		}
		if (characterFormat.HasValue(58))
		{
			SerializeBoolProperty("rtl", characterFormat.Bidi);
		}
		if (characterFormat.HasKey(99))
		{
			SerializeBoolProperty("cs", characterFormat.ComplexScript);
		}
		SerializeLanguage(characterFormat, isThemeLang: false);
		if (characterFormat.HasKey(24))
		{
			SerializeBoolProperty("specVanish", characterFormat.SpecVanish);
		}
		SerializeDocxProps(list, "oMath");
		SerializeLigatures(characterFormat);
		SerializeStylisticSet(characterFormat);
		SerializeNumberForm(characterFormat);
		SerializeNumberSpacing(characterFormat);
		SerializeContextualAlternates(characterFormat);
		if (characterFormat.Revisions.Count > 0 && !m_isAlternativeCharFormat)
		{
			foreach (Revision revision in characterFormat.Revisions)
			{
				if (revision.RevisionType != RevisionType.Formatting && revision.RevisionType != RevisionType.StyleDefinitionChange)
				{
					continue;
				}
				SerializeTrackChangeProps("rPrChange", revision.Author, revision.Date);
				if (characterFormat.OldPropertiesHash.Count > 0)
				{
					m_isAlternativeCharFormat = true;
					Dictionary<int, object> dictionary = new Dictionary<int, object>(characterFormat.OldPropertiesHash);
					Dictionary<int, object> dictionary2 = new Dictionary<int, object>(characterFormat.PropertiesHash);
					characterFormat.PropertiesHash.Clear();
					characterFormat.OldPropertiesHash.Clear();
					foreach (KeyValuePair<int, object> item in dictionary)
					{
						characterFormat.PropertiesHash[item.Key] = item.Value;
					}
					SerializeCharacterFormat(characterFormat);
					characterFormat.PropertiesHash.Clear();
					foreach (KeyValuePair<int, object> item2 in dictionary)
					{
						characterFormat.OldPropertiesHash[item2.Key] = item2.Value;
					}
					foreach (KeyValuePair<int, object> item3 in dictionary2)
					{
						characterFormat.PropertiesHash[item3.Key] = item3.Value;
					}
					m_isAlternativeCharFormat = false;
				}
				else
				{
					m_writer.WriteStartElement("rPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
					m_writer.WriteEndElement();
				}
				m_writer.WriteEndElement();
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializeLigatures(WCharacterFormat characterFormat)
	{
		if (characterFormat.HasValue(121))
		{
			m_writer.WriteStartElement("ligatures", "http://schemas.microsoft.com/office/word/2010/wordml");
			switch (characterFormat.Ligatures)
			{
			case LigatureType.None:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "none");
				break;
			case LigatureType.Standard:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "standard");
				break;
			case LigatureType.Contextual:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "contextual");
				break;
			case LigatureType.StandardContextual:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "standardContextual");
				break;
			case LigatureType.Historical:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "historical");
				break;
			case LigatureType.StandardHistorical:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "standardHistorical");
				break;
			case LigatureType.ContextualHistorical:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "contextualHistorical");
				break;
			case LigatureType.StandardContextualHistorical:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "standardContextualHistorical");
				break;
			case LigatureType.Discretional:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "discretional");
				break;
			case LigatureType.StandardDiscretional:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "standardDiscretional");
				break;
			case LigatureType.ContextualDiscretional:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "contextualDiscretional");
				break;
			case LigatureType.StandardContextualDiscretional:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "standardContextualDiscretional");
				break;
			case LigatureType.HistoricalDiscretional:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "historicalDiscretional");
				break;
			case LigatureType.StandardHistoricalDiscretional:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "standardHistoricalDiscretional");
				break;
			case LigatureType.ContextualHistoricalDiscretional:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "contextualHistoricalDiscretional");
				break;
			case LigatureType.All:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "all");
				break;
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeNumberForm(WCharacterFormat characterFormat)
	{
		if (characterFormat.HasValue(122))
		{
			m_writer.WriteStartElement("numForm", "http://schemas.microsoft.com/office/word/2010/wordml");
			switch (characterFormat.NumberForm)
			{
			case NumberFormType.Default:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "default");
				break;
			case NumberFormType.Lining:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "lining");
				break;
			case NumberFormType.OldStyle:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "oldStyle");
				break;
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeNumberSpacing(WCharacterFormat characterFormat)
	{
		if (characterFormat.HasValue(123))
		{
			m_writer.WriteStartElement("numSpacing", "http://schemas.microsoft.com/office/word/2010/wordml");
			switch (characterFormat.NumberSpacing)
			{
			case NumberSpacingType.Default:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "default");
				break;
			case NumberSpacingType.Proportional:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "proportional");
				break;
			case NumberSpacingType.Tabular:
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "tabular");
				break;
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeStylisticSet(WCharacterFormat characterFormat)
	{
		if (characterFormat.HasValue(124))
		{
			m_writer.WriteStartElement("stylisticSets", "http://schemas.microsoft.com/office/word/2010/wordml");
			m_writer.WriteStartElement("styleSet", "http://schemas.microsoft.com/office/word/2010/wordml");
			switch (characterFormat.StylisticSet)
			{
			case StylisticSetType.StylisticSetDefault:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "0");
				break;
			case StylisticSetType.StylisticSet01:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "1");
				break;
			case StylisticSetType.StylisticSet02:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "2");
				break;
			case StylisticSetType.StylisticSet03:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "3");
				break;
			case StylisticSetType.StylisticSet04:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "4");
				break;
			case StylisticSetType.StylisticSet05:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "5");
				break;
			case StylisticSetType.StylisticSet06:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "6");
				break;
			case StylisticSetType.StylisticSet07:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "7");
				break;
			case StylisticSetType.StylisticSet08:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "8");
				break;
			case StylisticSetType.StylisticSet09:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "9");
				break;
			case StylisticSetType.StylisticSet10:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "10");
				break;
			case StylisticSetType.StylisticSet11:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "11");
				break;
			case StylisticSetType.StylisticSet12:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "12");
				break;
			case StylisticSetType.StylisticSet13:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "13");
				break;
			case StylisticSetType.StylisticSet14:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "14");
				break;
			case StylisticSetType.StylisticSet15:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "15");
				break;
			case StylisticSetType.StylisticSet16:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "16");
				break;
			case StylisticSetType.StylisticSet17:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "17");
				break;
			case StylisticSetType.StylisticSet18:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "18");
				break;
			case StylisticSetType.StylisticSet19:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "19");
				break;
			case StylisticSetType.StylisticSet20:
				m_writer.WriteAttributeString("w14", "id", "http://schemas.microsoft.com/office/word/2010/wordml", "20");
				break;
			}
			m_writer.WriteEndElement();
			m_writer.WriteEndElement();
		}
	}

	private void SerializeContextualAlternates(WCharacterFormat characterFormat)
	{
		if (characterFormat.HasValue(120))
		{
			m_writer.WriteStartElement("cntxtAlts", "http://schemas.microsoft.com/office/word/2010/wordml");
			if (!characterFormat.UseContextualAlternates)
			{
				m_writer.WriteAttributeString("w14", "val", "http://schemas.microsoft.com/office/word/2010/wordml", "false");
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeCharacterShading(WCharacterFormat characterFormat)
	{
		m_writer.WriteStartElement("shd", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetTextureStyle(characterFormat.TextureStyle));
		if (characterFormat.ForeColor != Color.Empty)
		{
			m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode(characterFormat.ForeColor));
		}
		else
		{
			m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
		}
		if (characterFormat.TextBackgroundColor != Color.Empty)
		{
			m_writer.WriteAttributeString("fill", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode(characterFormat.TextBackgroundColor));
		}
		else
		{
			m_writer.WriteAttributeString("fill", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
		}
		m_writer.WriteEndElement();
	}

	private void SerializeCharacterShading(WCharacterFormat characterFormat, Dictionary<int, object> oldPropertiesHash)
	{
		if (oldPropertiesHash.ContainsKey(78))
		{
			m_writer.WriteStartElement("shd", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetTextureStyle((TextureStyle)oldPropertiesHash[78]));
			if ((Color)oldPropertiesHash[77] != Color.Empty)
			{
				m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode((Color)oldPropertiesHash[77]));
			}
			else
			{
				m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
			}
			if ((Color)oldPropertiesHash[9] != Color.Empty)
			{
				m_writer.WriteAttributeString("fill", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode((Color)oldPropertiesHash[9]));
			}
			else
			{
				m_writer.WriteAttributeString("fill", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeParagraphFormat(WParagraphFormat paragraphFormat, WParagraph paragraph)
	{
		if (paragraph != null)
		{
			IWParagraphStyle style = paragraph.GetStyle();
			if (style != null && style.Name != "Normal")
			{
				m_writer.WriteStartElement("pStyle", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				string styleId = GetStyleId(style.Name);
				if (!string.IsNullOrEmpty(styleId))
				{
					m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", styleId.Replace(" ", string.Empty));
				}
				else
				{
					m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", style.Name.Replace(" ", string.Empty));
				}
				m_writer.WriteEndElement();
			}
		}
		if (paragraphFormat.HasValue(47))
		{
			string paragraphStyleName = paragraphFormat.ParagraphStyleName;
			if (!string.IsNullOrEmpty(paragraphStyleName))
			{
				m_writer.WriteStartElement("pStyle", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", paragraphStyleName.Replace(" ", string.Empty));
				m_writer.WriteEndElement();
			}
		}
		if (paragraphFormat.HasValue(10))
		{
			m_writer.WriteStartElement("keepNext", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (!paragraphFormat.KeepFollow)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
			}
			m_writer.WriteEndElement();
		}
		if (paragraphFormat.HasValue(6))
		{
			m_writer.WriteStartElement("keepLines", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (!paragraphFormat.Keep)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
			}
			m_writer.WriteEndElement();
		}
		if (paragraphFormat.HasValue(12))
		{
			m_writer.WriteStartElement("pageBreakBefore", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (!paragraphFormat.PageBreakBefore)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
			}
			m_writer.WriteEndElement();
		}
		if (paragraphFormat.IsContainFrameKey() && (paragraphFormat.OwnerBase is WParagraphStyle || (paragraph != null && !(paragraph.OwnerTextBody.Owner is WTextBox) && !(paragraph.OwnerTextBody.Owner is Shape))))
		{
			WParagraphFormat wParagraphFormat = null;
			if (paragraphFormat.BaseFormat != null)
			{
				wParagraphFormat = GetBaseFormat(paragraphFormat.BaseFormat as WParagraphFormat);
			}
			if ((wParagraphFormat != null && wParagraphFormat.IsInFrame()) || paragraphFormat.IsInFrame())
			{
				SerializeFrame(paragraphFormat);
			}
		}
		if (paragraphFormat.HasValue(11))
		{
			m_writer.WriteStartElement("widowControl", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (paragraphFormat.WidowControl)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "true");
			}
			else
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
			}
			m_writer.WriteEndElement();
		}
		if (paragraph != null)
		{
			SerializeListParagraph(paragraph);
		}
		else if (!m_isAlternativeParaFormat)
		{
			SerializeListStyle(paragraphFormat);
		}
		if (paragraphFormat.HasValue(38))
		{
			m_writer.WriteStartElement("suppressLineNumbers", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (!paragraphFormat.SuppressLineNumbers)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
			}
			m_writer.WriteEndElement();
		}
		SerializeParagraphBorders(paragraphFormat, 8);
		SerializeParagraphShading(paragraphFormat);
		if (paragraphFormat.Tabs.Count > 0)
		{
			SerializeTabs(paragraphFormat.Tabs);
		}
		SerializeSuppressAutoHyphens(paragraphFormat);
		if (paragraphFormat.HasValue(40))
		{
			m_writer.WriteStartElement("kinsoku", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (!paragraphFormat.Kinsoku)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
			}
			m_writer.WriteEndElement();
		}
		if (paragraphFormat.HasValue(89))
		{
			m_writer.WriteStartElement("wordWrap", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (paragraphFormat.WordWrap)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "true");
			}
			else
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
			}
			m_writer.WriteEndElement();
		}
		if (paragraphFormat.HasValue(41))
		{
			m_writer.WriteStartElement("overflowPunct", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (paragraphFormat.OverflowPunctuation)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "true");
			}
			else
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
			}
			m_writer.WriteEndElement();
		}
		if (paragraphFormat.HasValue(42))
		{
			m_writer.WriteStartElement("topLinePunct", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (paragraphFormat.TopLinePunctuation)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "true");
			}
			else
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
			}
			m_writer.WriteEndElement();
		}
		if (paragraphFormat.HasValue(81))
		{
			m_writer.WriteStartElement("autoSpaceDE", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (paragraphFormat.AutoSpaceDE)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "true");
			}
			else
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
			}
			m_writer.WriteEndElement();
		}
		if (paragraphFormat.HasValue(82))
		{
			m_writer.WriteStartElement("autoSpaceDN", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (paragraphFormat.AutoSpaceDN)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "true");
			}
			else
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
			}
			m_writer.WriteEndElement();
		}
		if (paragraphFormat.HasValue(31))
		{
			m_writer.WriteStartElement("bidi", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (!paragraphFormat.Bidi)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", paragraphFormat.Bidi.ToString().ToLower());
			}
			m_writer.WriteEndElement();
		}
		if (paragraphFormat.HasValue(80))
		{
			m_writer.WriteStartElement("adjustRightInd", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (paragraphFormat.AdjustRightIndent)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "true");
			}
			else
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
			}
			m_writer.WriteEndElement();
		}
		if (paragraphFormat.HasValue(35))
		{
			m_writer.WriteStartElement("snapToGrid", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (!paragraphFormat.SnapToGrid)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "off");
			}
			m_writer.WriteEndElement();
		}
		SerializeParagraphSpacing(paragraphFormat);
		SerializeIndentation(paragraphFormat);
		if (paragraphFormat.HasValue(92))
		{
			m_writer.WriteStartElement("contextualSpacing", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (!paragraphFormat.ContextualSpacing)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
			}
			m_writer.WriteEndElement();
		}
		SerializeMirrorIndents(paragraphFormat);
		if (paragraphFormat.HasValue(36))
		{
			m_writer.WriteStartElement("suppressOverlap", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (!paragraphFormat.SuppressOverlap)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
			}
			m_writer.WriteEndElement();
		}
		if (paragraphFormat.HasValue(0))
		{
			SerializeParagraphAlignment((byte)paragraphFormat.LogicalJustification);
		}
		SerializeDocxProps(paragraphFormat.XmlProps, "textDirection");
		if (paragraphFormat.HasValue(34))
		{
			SerializeParagraphTextAlignment((byte)paragraphFormat.BaseLineAlignment);
		}
		if (paragraphFormat.HasValue(37))
		{
			SerializeParagraphTextboxTightWrap((byte)paragraphFormat.TextboxTightWrap);
		}
		if (((paragraphFormat.HasValue(56) && paragraph != null && paragraph.ParaStyle != null && !paragraphFormat.IsBuiltInHeadingStyle(paragraph.ParaStyle.Name)) || (paragraph == null && (!(paragraphFormat.OwnerBase is WParagraph) || (paragraphFormat.HasValue(56) && paragraphFormat.HasValue(47) && !paragraphFormat.IsBuiltInHeadingStyle(paragraphFormat.ParagraphStyleName.ToString()))))) && (byte)paragraphFormat.OutlineLevel < 9)
		{
			m_writer.WriteStartElement("outlineLvl", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ((byte)paragraphFormat.OutlineLevel).ToString());
			m_writer.WriteEndElement();
		}
		SerializeDocxProps(paragraphFormat.XmlProps, "divId");
		if (paragraph != null && paragraph.IsInCell && IsParagraphContainsCnfStyle)
		{
			IsParagraphContainsCnfStyle = false;
			SerializeCnfStyleElement(paragraph);
		}
		if (paragraph != null)
		{
			SerializeCharacterFormat(paragraph.BreakCharacterFormat);
		}
		if (paragraph != null && paragraph.IsParagraphHasSectionBreak())
		{
			WSection ownerSection = paragraph.GetOwnerSection();
			if (ownerSection != null && ownerSection.NextSibling != null && !ModifyText(paragraph.Text).Contains(ControlChar.CarriegeReturn))
			{
				SerializeSectionProperties(ownerSection, isTrackrevision: false);
			}
		}
		if (paragraphFormat.Revisions.Count <= 0 || m_isAlternativeParaFormat)
		{
			return;
		}
		foreach (Revision revision in paragraphFormat.Revisions)
		{
			if (revision.RevisionType != RevisionType.Formatting && revision.RevisionType != RevisionType.StyleDefinitionChange)
			{
				continue;
			}
			SerializeTrackChangeProps("pPrChange", revision.Author, revision.Date);
			if (paragraphFormat.OldPropertiesHash.Count > 0)
			{
				m_isAlternativeParaFormat = true;
				m_writer.WriteStartElement("pPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				Dictionary<int, object> dictionary = new Dictionary<int, object>(paragraphFormat.OldPropertiesHash);
				Dictionary<int, object> dictionary2 = new Dictionary<int, object>(paragraphFormat.PropertiesHash);
				paragraphFormat.PropertiesHash.Clear();
				paragraphFormat.OldPropertiesHash.Clear();
				foreach (KeyValuePair<int, object> item in dictionary)
				{
					paragraphFormat.PropertiesHash[item.Key] = item.Value;
				}
				SerializeParagraphFormat(paragraphFormat, null);
				if (paragraph != null && paragraph.ListFormat.OldPropertiesHash.Count > 0)
				{
					Dictionary<int, object> dictionary3 = new Dictionary<int, object>(paragraph.ListFormat.OldPropertiesHash);
					Dictionary<int, object> dictionary4 = new Dictionary<int, object>(paragraph.ListFormat.PropertiesHash);
					paragraph.ListFormat.PropertiesHash.Clear();
					paragraph.ListFormat.OldPropertiesHash.Clear();
					foreach (KeyValuePair<int, object> item2 in dictionary3)
					{
						paragraph.ListFormat.PropertiesHash[item2.Key] = item2.Value;
					}
					SerializeListParagraph(paragraph);
					paragraph.ListFormat.PropertiesHash.Clear();
					foreach (KeyValuePair<int, object> item3 in dictionary4)
					{
						paragraph.ListFormat.PropertiesHash[item3.Key] = item3.Value;
					}
					foreach (KeyValuePair<int, object> item4 in dictionary3)
					{
						paragraph.ListFormat.OldPropertiesHash[item4.Key] = item4.Value;
					}
				}
				else if (paragraph == null && paragraphFormat.OwnerBase is WParagraphStyle && (paragraphFormat.OwnerBase as WParagraphStyle).ListFormat.OldPropertiesHash.Count > 0)
				{
					WParagraphStyle wParagraphStyle = paragraphFormat.OwnerBase as WParagraphStyle;
					Dictionary<int, object> dictionary5 = new Dictionary<int, object>(wParagraphStyle.ListFormat.OldPropertiesHash);
					Dictionary<int, object> dictionary6 = new Dictionary<int, object>(wParagraphStyle.ListFormat.PropertiesHash);
					wParagraphStyle.ListFormat.PropertiesHash.Clear();
					wParagraphStyle.ListFormat.OldPropertiesHash.Clear();
					foreach (KeyValuePair<int, object> item5 in dictionary5)
					{
						wParagraphStyle.ListFormat.PropertiesHash[item5.Key] = item5.Value;
					}
					SerializeListStyle(paragraphFormat);
					wParagraphStyle.ListFormat.PropertiesHash.Clear();
					foreach (KeyValuePair<int, object> item6 in dictionary6)
					{
						wParagraphStyle.ListFormat.PropertiesHash[item6.Key] = item6.Value;
					}
					foreach (KeyValuePair<int, object> item7 in dictionary5)
					{
						wParagraphStyle.ListFormat.OldPropertiesHash[item7.Key] = item7.Value;
					}
				}
				paragraphFormat.PropertiesHash.Clear();
				foreach (KeyValuePair<int, object> item8 in dictionary2)
				{
					paragraphFormat.PropertiesHash[item8.Key] = item8.Value;
				}
				foreach (KeyValuePair<int, object> item9 in dictionary)
				{
					paragraphFormat.OldPropertiesHash[item9.Key] = item9.Value;
				}
				m_writer.WriteEndElement();
				m_isAlternativeParaFormat = false;
			}
			else
			{
				m_writer.WriteStartElement("pPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
				m_writer.WriteEndElement();
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeMirrorIndents(WParagraphFormat paragraphFormat)
	{
		if (paragraphFormat.HasValue(75))
		{
			m_writer.WriteStartElement("mirrorIndents", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (!paragraphFormat.MirrorIndents)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeSuppressAutoHyphens(WParagraphFormat paragraphFormat)
	{
		if (paragraphFormat.HasValue(78))
		{
			m_writer.WriteStartElement("suppressAutoHyphens", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (!paragraphFormat.SuppressAutoHyphens)
			{
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "false");
			}
			m_writer.WriteEndElement();
		}
	}

	private string GetNextTChangeId()
	{
		return m_trackChangeId++.ToString();
	}

	private bool SerializeDirectionalOverride(ParagraphItem item)
	{
		if (item.GetCharFormat().BiDirectionalOverride != 0)
		{
			m_writer.WriteStartElement("bdo", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", item.GetCharFormat().BiDirectionalOverride.ToString().ToLower());
			return true;
		}
		return false;
	}

	private void SerializeRevisionStart(ParagraphItem item)
	{
		if (item.RevisionsInternal.Count == 0)
		{
			return;
		}
		for (int num = item.RevisionsInternal.Count - 1; num >= 0; num--)
		{
			Revision revision = item.RevisionsInternal[num];
			ParagraphItem paragraphItem = null;
			for (int i = 0; i < revision.Range.Count; i++)
			{
				if (revision.Range.Items[i] is Entity)
				{
					paragraphItem = revision.Range.Items[i] as ParagraphItem;
					break;
				}
			}
			if (paragraphItem == item || !item.Document.HasRenderableItemBefore(item) || IsFirstOrLastRevItem(item, revision, isStart: true))
			{
				switch (revision.RevisionType)
				{
				case RevisionType.Insertions:
					SerializeTrackChangeProps("ins", revision.Author, revision.Date);
					break;
				case RevisionType.Deletions:
					SerializeTrackChangeProps("del", revision.Author, revision.Date);
					break;
				case RevisionType.MoveFrom:
					if (MovingRevisionDetails == null)
					{
						SerializeTrackChangeProps("moveFromRangeStart", revision.Author, revision.Date, revision.Name);
						m_writer.WriteEndElement();
						ParagraphItem paragraphItem3 = null;
						for (int num3 = revision.Range.Count - 1; num3 >= 0; num3--)
						{
							if (revision.Range.Items[num3] is Entity)
							{
								paragraphItem3 = revision.Range.Items[num3] as ParagraphItem;
								break;
							}
						}
						MovingRevisionDetails = new Dictionary<int, Dictionary<ParagraphItem, RevisionType>>();
						Dictionary<ParagraphItem, RevisionType> dictionary2 = new Dictionary<ParagraphItem, RevisionType>();
						if (paragraphItem3 != null)
						{
							dictionary2.Add(paragraphItem3, RevisionType.MoveFrom);
						}
						MovingRevisionDetails.Add(m_trackChangeId - 1, dictionary2);
					}
					SerializeTrackChangeProps("moveFrom", revision.Author, revision.Date);
					break;
				case RevisionType.MoveTo:
					if (MovingRevisionDetails == null)
					{
						SerializeTrackChangeProps("moveToRangeStart", revision.Author, revision.Date, revision.Name);
						m_writer.WriteEndElement();
						ParagraphItem paragraphItem2 = null;
						for (int num2 = revision.Range.Count - 1; num2 >= 0; num2--)
						{
							if (revision.Range.Items[num2] is Entity)
							{
								paragraphItem2 = revision.Range.Items[num2] as ParagraphItem;
								break;
							}
						}
						MovingRevisionDetails = new Dictionary<int, Dictionary<ParagraphItem, RevisionType>>();
						Dictionary<ParagraphItem, RevisionType> dictionary = new Dictionary<ParagraphItem, RevisionType>();
						if (paragraphItem2 != null)
						{
							dictionary.Add(paragraphItem2, RevisionType.MoveTo);
						}
						MovingRevisionDetails.Add(m_trackChangeId - 1, dictionary);
					}
					SerializeTrackChangeProps("moveTo", revision.Author, revision.Date);
					break;
				}
			}
			else if ((revision.RevisionType == RevisionType.MoveTo || revision.RevisionType == RevisionType.MoveFrom) && item.PreviousSibling is Entity && !(item.PreviousSibling as Entity).RevisionsInternal.Contains(revision))
			{
				SerializeTrackChangeProps((revision.RevisionType == RevisionType.MoveTo) ? "moveTo" : "moveFrom", revision.Author, revision.Date);
			}
		}
	}

	private bool IsFirstOrLastRevItem(ParagraphItem item, Revision revision, bool isStart)
	{
		bool result = false;
		if (item.OwnerParagraph.IsInCell && item.OwnerParagraph.Owner is WTableCell)
		{
			RowFormat rowFormat = (item.OwnerParagraph.Owner as WTableCell).OwnerRow.RowFormat;
			if (rowFormat != null && rowFormat.Revisions.Count > 0 && rowFormat.Revisions.Contains(revision))
			{
				ParagraphItem paragraphItem = (isStart ? (item.PreviousSibling as ParagraphItem) : (item.NextSibling as ParagraphItem));
				if (paragraphItem == null || paragraphItem.RevisionsInternal.Count == 0 || !paragraphItem.RevisionsInternal.Contains(revision))
				{
					return true;
				}
				result = ((paragraphItem.IsInsertRevision != item.IsInsertRevision || paragraphItem.IsDeleteRevision != item.IsDeleteRevision || !(paragraphItem.AuthorName == item.AuthorName)) ? true : false);
			}
		}
		return result;
	}

	private void SerializeRevisionEnd(ParagraphItem item)
	{
		if (item.RevisionsInternal.Count == 0 && MovingRevisionDetails == null)
		{
			return;
		}
		if (item.RevisionsInternal.Count > 0)
		{
			for (int num = item.RevisionsInternal.Count - 1; num >= 0; num--)
			{
				Revision revision = item.RevisionsInternal[num];
				ParagraphItem paragraphItem = null;
				for (int num2 = revision.Range.Count - 1; num2 >= 0; num2--)
				{
					if (revision.Range.Items[num2] is Entity)
					{
						paragraphItem = revision.Range.Items[num2] as ParagraphItem;
						break;
					}
				}
				if (paragraphItem is WFieldMark && SkipFieldItem(item))
				{
					for (int num3 = revision.Range.Count - 1; num3 >= 0; num3--)
					{
						if (revision.Range.Items[num3] is WOleObject)
						{
							paragraphItem = revision.Range.Items[num3] as ParagraphItem;
							break;
						}
					}
				}
				Entity entity = item.OwnerParagraph.LastItem;
				do
				{
					entity = ((!(entity is InlineContentControl)) ? entity : (((entity as InlineContentControl).ParagraphItems.Count > 0) ? (entity as InlineContentControl).ParagraphItems.LastItem : entity));
					while (entity is BookmarkStart || entity is BookmarkEnd || entity is EditableRangeStart || entity is EditableRangeEnd)
					{
						entity = entity.PreviousSibling as Entity;
					}
				}
				while (entity is InlineContentControl && (entity as InlineContentControl).ParagraphItems.Count > 0);
				if (paragraphItem == item || entity == item || IsFirstOrLastRevItem(item, revision, isStart: false) || ((revision.RevisionType == RevisionType.MoveTo || revision.RevisionType == RevisionType.MoveFrom) && item.NextSibling is Entity && !(item.NextSibling as Entity).RevisionsInternal.Contains(revision)))
				{
					m_writer.WriteEndElement();
				}
			}
		}
		if (MovingRevisionDetails == null)
		{
			return;
		}
		int idValue = 0;
		ParagraphItem paragraphItem2 = null;
		RevisionType revisionType = RevisionType.MoveFrom;
		foreach (KeyValuePair<int, Dictionary<ParagraphItem, RevisionType>> movingRevisionDetail in MovingRevisionDetails)
		{
			idValue = movingRevisionDetail.Key;
			foreach (KeyValuePair<ParagraphItem, RevisionType> item2 in movingRevisionDetail.Value)
			{
				paragraphItem2 = item2.Key;
				revisionType = item2.Value;
			}
		}
		if (paragraphItem2 != item)
		{
			return;
		}
		if (paragraphItem2.RevisionsInternal.Count > 0)
		{
			foreach (Revision item3 in paragraphItem2.RevisionsInternal)
			{
				if (item3.RevisionType == RevisionType.MoveFrom || item3.RevisionType == RevisionType.MoveTo)
				{
					if (!item3.IsAfterParagraphMark && !item3.IsAfterCellMark && !item3.IsAfterRowMark && !item3.IsAfterTableMark)
					{
						WriteMoveRangeEnd(revisionType, idValue);
					}
					else
					{
						MovingRevisionCollection.Add(item3);
					}
				}
			}
			return;
		}
		if (MovingRevisionCollection.Count == 0)
		{
			WriteMoveRangeEnd(revisionType, idValue);
		}
	}

	private void WriteMoveRangeEnd(RevisionType revisionType, int idValue)
	{
		if (revisionType == RevisionType.MoveFrom)
		{
			m_writer.WriteStartElement("moveFromRangeEnd", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", idValue.ToString());
		}
		else
		{
			m_writer.WriteStartElement("moveToRangeEnd", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", idValue.ToString());
		}
		m_writer.WriteEndElement();
		MovingRevisionDetails.Clear();
		MovingRevisionDetails = null;
	}

	private void SerializeMoveRangeEnd()
	{
		int idValue = 0;
		RevisionType revisionType = RevisionType.MoveFrom;
		foreach (KeyValuePair<int, Dictionary<ParagraphItem, RevisionType>> movingRevisionDetail in MovingRevisionDetails)
		{
			idValue = movingRevisionDetail.Key;
			foreach (KeyValuePair<ParagraphItem, RevisionType> item in movingRevisionDetail.Value)
			{
				revisionType = item.Value;
			}
		}
		WriteMoveRangeEnd(revisionType, idValue);
		MovingRevisionCollection.Remove(MovingRevisionCollection[0]);
	}

	private void SerializeRevisionsInFormatting(List<Revision> revisions)
	{
		foreach (Revision revision in revisions)
		{
			switch (revision.RevisionType)
			{
			case RevisionType.Insertions:
				SerializeTrackChangeProps("ins", revision.Author, revision.Date);
				m_writer.WriteEndElement();
				break;
			case RevisionType.Deletions:
				SerializeTrackChangeProps("del", revision.Author, revision.Date);
				m_writer.WriteEndElement();
				break;
			case RevisionType.MoveFrom:
				SerializeTrackChangeProps("moveFrom", revision.Author, revision.Date);
				m_writer.WriteEndElement();
				break;
			case RevisionType.MoveTo:
				SerializeTrackChangeProps("moveTo", revision.Author, revision.Date);
				m_writer.WriteEndElement();
				break;
			}
		}
	}

	private void SerializeTrackChangeProps(string type, string authorName, DateTime dt)
	{
		m_writer.WriteStartElement(type, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetNextTChangeId());
		if (!string.IsNullOrEmpty(authorName))
		{
			m_writer.WriteAttributeString("author", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", authorName);
		}
		if (dt != DateTime.MinValue)
		{
			m_writer.WriteAttributeString("date", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dt.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ", CultureInfo.InvariantCulture));
		}
	}

	private void SerializeTrackChangeProps(string type, string authorName, DateTime dt, string name)
	{
		m_writer.WriteStartElement(type, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("id", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetNextTChangeId());
		if (!string.IsNullOrEmpty(authorName))
		{
			m_writer.WriteAttributeString("author", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", authorName);
		}
		if (dt != DateTime.MinValue)
		{
			m_writer.WriteAttributeString("date", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", dt.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ", CultureInfo.InvariantCulture));
		}
		if (!string.IsNullOrEmpty(name))
		{
			m_writer.WriteAttributeString("name", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", name);
		}
	}

	private void SerializeParagraphAlignment(byte value)
	{
		m_writer.WriteStartElement("jc", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		string value2 = "left";
		switch (value)
		{
		case 1:
			value2 = "center";
			break;
		case 2:
			value2 = "right";
			break;
		case 3:
			value2 = "both";
			break;
		case 4:
			value2 = "distribute";
			break;
		case 5:
			value2 = "mediumKashida";
			break;
		case 6:
			value2 = "numTab";
			break;
		case 7:
			value2 = "highKashida";
			break;
		case 8:
			value2 = "lowKashida";
			break;
		case 9:
			value2 = "thaiDistribute";
			break;
		}
		m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value2);
		m_writer.WriteEndElement();
	}

	private void SerializeParagraphTextAlignment(byte value)
	{
		m_writer.WriteStartElement("textAlignment", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		string value2 = "auto";
		switch (value)
		{
		case 0:
			value2 = "top";
			break;
		case 1:
			value2 = "center";
			break;
		case 2:
			value2 = "baseline";
			break;
		case 3:
			value2 = "bottom";
			break;
		}
		m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value2);
		m_writer.WriteEndElement();
	}

	private void SerializeParagraphTextboxTightWrap(byte value)
	{
		m_writer.WriteStartElement("textboxTightWrap", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		string value2 = "none";
		switch (value)
		{
		case 1:
			value2 = "allLines";
			break;
		case 2:
			value2 = "firstAndLastLine";
			break;
		case 3:
			value2 = "firstLineOnly";
			break;
		case 4:
			value2 = "lastLineOnly";
			break;
		}
		m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value2);
		m_writer.WriteEndElement();
	}

	private void SerializeIndentation(WParagraphFormat paragraphFormat)
	{
		if (!paragraphFormat.HasValue(2) && !paragraphFormat.HasValue(3) && !paragraphFormat.HasValue(5) && !paragraphFormat.HasValue(85) && !paragraphFormat.HasValue(87) && !paragraphFormat.HasValue(86))
		{
			return;
		}
		m_writer.WriteStartElement("ind", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (paragraphFormat.HasValue(2))
		{
			m_writer.WriteAttributeString(IsStrict ? "start" : "left", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (IsStrict ? paragraphFormat.LeftIndent.ToString() : ToString(paragraphFormat.LeftIndent * 20f)) + (IsStrict ? "pt" : ""));
		}
		if (paragraphFormat.HasValue(85))
		{
			m_writer.WriteAttributeString("leftChars", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(paragraphFormat.LeftIndentChars * 100f));
		}
		if (paragraphFormat.HasValue(3))
		{
			m_writer.WriteAttributeString(IsStrict ? "end" : "right", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (IsStrict ? paragraphFormat.RightIndent.ToString() : ToString(paragraphFormat.RightIndent * 20f)) + (IsStrict ? "pt" : ""));
		}
		if (paragraphFormat.HasValue(87))
		{
			m_writer.WriteAttributeString("rightChars", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(paragraphFormat.RightIndentChars * 100f));
		}
		if (paragraphFormat.HasValue(5))
		{
			if (paragraphFormat.FirstLineIndent < 0f)
			{
				m_writer.WriteAttributeString("hanging", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (IsStrict ? (-1f * paragraphFormat.FirstLineIndent).ToString() : ToString(-1f * paragraphFormat.FirstLineIndent * 20f)) + (IsStrict ? "pt" : ""));
			}
			else
			{
				m_writer.WriteAttributeString("firstLine", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (IsStrict ? paragraphFormat.FirstLineIndent.ToString() : ToString(paragraphFormat.FirstLineIndent * 20f)) + (IsStrict ? "pt" : ""));
			}
		}
		if (paragraphFormat.HasValue(86))
		{
			if (paragraphFormat.FirstLineIndentChars < 0f)
			{
				m_writer.WriteAttributeString("hangingChars", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(-1f * paragraphFormat.FirstLineIndentChars * 100f));
			}
			else
			{
				m_writer.WriteAttributeString("firstLineChars", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(paragraphFormat.FirstLineIndentChars * 100f));
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializeParagraphSpacing(WParagraphFormat paragraphFormat)
	{
		m_writer.WriteStartElement("spacing", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (paragraphFormat.HasValue(90))
		{
			short num = (short)Math.Round(paragraphFormat.BeforeLines * 100f);
			m_writer.WriteAttributeString("beforeLines", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(num));
		}
		if (paragraphFormat.HasValue(91))
		{
			short num2 = (short)Math.Round(paragraphFormat.AfterLines * 100f);
			m_writer.WriteAttributeString("afterLines", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(num2));
		}
		if (paragraphFormat.HasValue(8))
		{
			m_writer.WriteAttributeString("before", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (IsStrict ? paragraphFormat.BeforeSpacing.ToString() : ToString(paragraphFormat.BeforeSpacing * 20f)) + (IsStrict ? "pt" : ""));
		}
		if (paragraphFormat.HasValue(54))
		{
			if (paragraphFormat.SpaceBeforeAuto)
			{
				m_writer.WriteAttributeString("beforeAutospacing", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
			}
			else
			{
				m_writer.WriteAttributeString("beforeAutospacing", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
			}
		}
		if (paragraphFormat.HasValue(9))
		{
			m_writer.WriteAttributeString("after", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (IsStrict ? paragraphFormat.AfterSpacing.ToString() : ToString(paragraphFormat.AfterSpacing * 20f)) + (IsStrict ? "pt" : ""));
		}
		if (paragraphFormat.HasValue(55))
		{
			if (paragraphFormat.SpaceAfterAuto)
			{
				m_writer.WriteAttributeString("afterAutospacing", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
			}
			else
			{
				m_writer.WriteAttributeString("afterAutospacing", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
			}
		}
		if (paragraphFormat.HasValue(52))
		{
			m_writer.WriteAttributeString("line", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", (IsStrict ? paragraphFormat.LineSpacing.ToString() : ToString(Math.Abs(paragraphFormat.LineSpacing) * 20f)) + (IsStrict ? "pt" : ""));
			switch (paragraphFormat.LineSpacingRule)
			{
			case LineSpacingRule.AtLeast:
				m_writer.WriteAttributeString("lineRule", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "atLeast");
				break;
			case LineSpacingRule.Exactly:
				m_writer.WriteAttributeString("lineRule", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "exact");
				break;
			default:
				m_writer.WriteAttributeString("lineRule", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
				break;
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializeTabs(TabCollection tabs)
	{
		if (tabs.Count > 0)
		{
			m_writer.WriteStartElement("tabs", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			for (int i = 0; i < tabs.Count && i < 64; i++)
			{
				SerializeTab(tabs[i]);
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeTab(Tab tab)
	{
		int num = 0;
		m_writer.WriteStartElement("tab", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (tab.Position == 0f && tab.HasKey(1))
		{
			num = (int)Math.Round(tab.DeletePosition);
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "clear");
		}
		else
		{
			num = (IsStrict ? ((int)Math.Round(tab.Position)) : ((int)Math.Round(tab.Position * 20f)));
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetTabJustification(tab.Justification));
		}
		if (tab.TabLeader != 0)
		{
			m_writer.WriteAttributeString("leader", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetTabLeader(tab.TabLeader));
		}
		m_writer.WriteAttributeString("pos", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num + (IsStrict ? "pt" : ""));
		m_writer.WriteEndElement();
	}

	private void SerializeParagraphShading(WParagraphFormat paragraphFormat)
	{
		if (paragraphFormat.HasShading())
		{
			m_writer.WriteStartElement("shd", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			string textureStyle = GetTextureStyle(paragraphFormat.TextureStyle);
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", textureStyle);
			if (paragraphFormat.ForeColor != Color.Empty)
			{
				m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode(paragraphFormat.ForeColor));
			}
			else
			{
				m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
			}
			if (paragraphFormat.BackColor != Color.Empty)
			{
				m_writer.WriteAttributeString("fill", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode(paragraphFormat.BackColor));
			}
			else
			{
				m_writer.WriteAttributeString("fill", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeParagraphBorders(WParagraphFormat paragraphFormat, int multiplier)
	{
		if (!paragraphFormat.Borders.IsDefault)
		{
			Borders borders = paragraphFormat.Borders;
			m_writer.WriteStartElement("pBdr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			if (paragraphFormat.HasValue(59) || paragraphFormat.HasValue(63) || (paragraphFormat.Borders.Top.IsBorderDefined && !paragraphFormat.Borders.Top.IsDefault))
			{
				SerializeBorder(borders.Top, "top", multiplier);
			}
			if (paragraphFormat.HasValue(57) || paragraphFormat.HasValue(61) || (paragraphFormat.Borders.Left.IsBorderDefined && !paragraphFormat.Borders.Left.IsDefault))
			{
				SerializeBorder(borders.Left, "left", multiplier);
			}
			if (paragraphFormat.HasValue(60) || paragraphFormat.HasValue(64) || (paragraphFormat.Borders.Bottom.IsBorderDefined && !paragraphFormat.Borders.Bottom.IsDefault))
			{
				SerializeBorder(borders.Bottom, "bottom", multiplier);
			}
			if (paragraphFormat.HasValue(58) || paragraphFormat.HasValue(62) || (paragraphFormat.Borders.Right.IsBorderDefined && !paragraphFormat.Borders.Right.IsDefault))
			{
				SerializeBorder(borders.Right, "right", multiplier);
			}
			if (paragraphFormat.HasValue(66) || paragraphFormat.HasValue(93) || (paragraphFormat.Borders.Horizontal.IsBorderDefined && !paragraphFormat.Borders.Horizontal.IsDefault))
			{
				SerializeBorder(borders.Horizontal, "between", multiplier);
			}
			if (paragraphFormat.HasValue(67) || paragraphFormat.HasValue(94) || (paragraphFormat.Borders.Vertical.IsBorderDefined && !paragraphFormat.Borders.Vertical.IsDefault))
			{
				SerializeBorder(borders.Vertical, "bar", multiplier);
			}
			m_writer.WriteEndElement();
		}
	}

	private void SerializeListParagraph(WParagraph paragraph)
	{
		if (paragraph != null)
		{
			if (paragraph.ListFormat.ListType != ListType.NoList)
			{
				SerializeListFormat(paragraph.ListFormat);
			}
			else if (paragraph.ListFormat.IsEmptyList)
			{
				SerializeNumPr(0, 0);
			}
			else if (paragraph.ListFormat.ListLevelNumber > 0)
			{
				SerializeNumPr(-1, paragraph.ListFormat.ListLevelNumber);
			}
		}
	}

	private void SerializeListStyle(WParagraphFormat paragraphFormat)
	{
		if (!(paragraphFormat.OwnerBase is WParagraphStyle))
		{
			return;
		}
		WParagraphStyle wParagraphStyle = paragraphFormat.OwnerBase as WParagraphStyle;
		if (wParagraphStyle.ListIndex >= 0)
		{
			SerializeNumPr(wParagraphStyle.ListIndex, wParagraphStyle.ListLevel);
		}
		else if (wParagraphStyle.ListFormat.CurrentListStyle != null || wParagraphStyle.ListFormat.IsEmptyList)
		{
			int listId = 0;
			int listLevel = -1;
			if (!wParagraphStyle.ListFormat.IsEmptyList)
			{
				listId = GetListId(wParagraphStyle.ListFormat);
				_ = wParagraphStyle.ParagraphFormat.OutlineLevel;
				if (wParagraphStyle.ListFormat.PropertiesHash.ContainsKey(0))
				{
					listLevel = wParagraphStyle.ListFormat.ListLevelNumber;
				}
			}
			SerializeNumPr(listId, listLevel);
		}
		else if (wParagraphStyle.ListFormat.ListLevelNumber > 0)
		{
			SerializeNumPr(-1, wParagraphStyle.ListFormat.ListLevelNumber);
		}
	}

	private void SerializeListFormat(WListFormat lf)
	{
		string text = null;
		if (lf.CurrentListStyle.IsBuiltInStyle && lf.OwnerParagraph != null)
		{
			text = lf.OwnerParagraph.StyleName;
		}
		int listId = GetListId(lf);
		if (text != null && string.IsNullOrEmpty(lf.LFOStyleName))
		{
			WParagraphStyle wParagraphStyle = lf.OwnerParagraph.Document.Styles.FindByName(text, StyleType.ParagraphStyle) as WParagraphStyle;
			if (wParagraphStyle.ListIndex == -1)
			{
				ListStyle listStyle = lf.OwnerParagraph.Document.ListStyles.FindByName(lf.CustomStyleName);
				wParagraphStyle.ListIndex = listId;
				if (listStyle.Levels.Count > 1)
				{
					wParagraphStyle.ListLevel = lf.ListLevelNumber;
				}
				listStyle.Levels[lf.ListLevelNumber].ParaStyleName = text;
			}
		}
		else
		{
			SerializeNumPr(listId, lf.ListLevelNumber);
		}
	}

	private void SerializeFrame(WParagraphFormat paragraphFormat)
	{
		m_writer.WriteStartElement("framePr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (paragraphFormat.HasValue(76))
		{
			m_writer.WriteAttributeString("w", "w", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString((short)Math.Round(paragraphFormat.FrameWidth * 20f)));
		}
		bool flag = true;
		if (paragraphFormat.HasValue(77) && paragraphFormat.FrameHeight != 0f)
		{
			ushort num = (ushort)Math.Round(paragraphFormat.FrameHeight * 20f);
			flag = (num & 0x8000) != 0;
			float num2 = num & 0x7FFF;
			m_writer.WriteAttributeString("w", "h", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString(num2));
		}
		if (paragraphFormat.HasValue(83))
		{
			m_writer.WriteAttributeString("w", "hSpace", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString((short)Math.Round(paragraphFormat.FrameHorizontalDistanceFromText * 20f)));
		}
		if (paragraphFormat.HasValue(84))
		{
			m_writer.WriteAttributeString("w", "vSpace", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString((short)Math.Round(paragraphFormat.FrameVerticalDistanceFromText * 20f)));
		}
		SerializeFrameWrapMode(paragraphFormat.WrapFrameAround);
		if (paragraphFormat.HasValue(71))
		{
			FrameHorzAnchor frameHorizontalPos = (FrameHorzAnchor)paragraphFormat.FrameHorizontalPos;
			m_writer.WriteAttributeString("w", "hAnchor", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", frameHorizontalPos.ToString().ToLower());
		}
		if (paragraphFormat.HasValue(72))
		{
			FrameVertAnchor frameVerticalPos = (FrameVertAnchor)paragraphFormat.FrameVerticalPos;
			m_writer.WriteAttributeString("w", "vAnchor", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", frameVerticalPos.ToString().ToLower());
		}
		if (paragraphFormat.HasValue(73))
		{
			float frameX = paragraphFormat.FrameX;
			if (paragraphFormat.IsFrameXAlign(frameX))
			{
				PageNumberAlignment pageNumberAlignment = (PageNumberAlignment)frameX;
				m_writer.WriteAttributeString("w", "xAlign", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", pageNumberAlignment.ToString().ToLower());
			}
			else
			{
				m_writer.WriteAttributeString("w", "x", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString((float)Math.Round(frameX * 20f)));
			}
		}
		if (paragraphFormat.HasValue(74))
		{
			float frameY = paragraphFormat.FrameY;
			if (paragraphFormat.IsFrameYAlign(frameY))
			{
				FrameVerticalPosition frameVerticalPosition = (FrameVerticalPosition)frameY;
				m_writer.WriteAttributeString("w", "yAlign", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", frameVerticalPosition.ToString().ToLower());
			}
			else
			{
				m_writer.WriteAttributeString("w", "y", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", ToString((float)Math.Round(frameY * 20f)));
			}
		}
		if (!flag)
		{
			m_writer.WriteAttributeString("w", "hRule", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "exact");
		}
		else if (paragraphFormat.HasValue(77) && paragraphFormat.FrameHeight == 0f)
		{
			m_writer.WriteAttributeString("w", "hRule", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
		}
		if (paragraphFormat.HasValue(39))
		{
			if (paragraphFormat.LockFrameAnchor)
			{
				m_writer.WriteAttributeString("w", "anchorLock", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "1");
			}
			else
			{
				m_writer.WriteAttributeString("w", "anchorLock", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
			}
		}
		if (paragraphFormat.HasValue(43))
		{
			string value = ((paragraphFormat.DropCap == DropCapType.Margin) ? "margin" : ((paragraphFormat.DropCap == DropCapType.DropCap) ? "drop" : null));
			if (!string.IsNullOrEmpty(value))
			{
				m_writer.WriteAttributeString("w", "dropCap", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value);
			}
		}
		if (paragraphFormat.HasValue(44))
		{
			m_writer.WriteAttributeString("w", "lines", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", paragraphFormat.DropCapLines.ToString());
		}
		m_writer.WriteEndElement();
	}

	private void SerializeFrameWrapMode(FrameWrapMode wrapFrameAround)
	{
		string text = null;
		switch (wrapFrameAround)
		{
		case FrameWrapMode.NotBeside:
			text = "notBeside";
			break;
		case FrameWrapMode.Around:
			text = "around";
			break;
		case FrameWrapMode.None:
			text = "none";
			break;
		case FrameWrapMode.Tight:
			text = "tight";
			break;
		case FrameWrapMode.Through:
			text = "through";
			break;
		case FrameWrapMode.Auto:
			text = "auto";
			break;
		}
		if (text != null)
		{
			m_writer.WriteAttributeString("w", "wrap", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", text);
		}
	}

	private void SerializeBorder(Border border, string tagName, int multiplier)
	{
		BorderStyle borderType = border.BorderType;
		float num = (float)Math.Round(border.LineWidth * (float)multiplier);
		float space = border.Space;
		if ((borderType == BorderStyle.None && !border.HasNoneStyle) || (borderType == BorderStyle.Cleared && border.HasNoneStyle))
		{
			return;
		}
		if (borderType == BorderStyle.Cleared)
		{
			m_writer.WriteStartElement(tagName, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "nil");
			m_writer.WriteEndElement();
			return;
		}
		m_writer.WriteStartElement(tagName, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetBorderStyle(borderType));
		if (border.Color.IsEmpty || border.Color == Color.Black)
		{
			m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "auto");
		}
		else
		{
			m_writer.WriteAttributeString("color", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", GetRGBCode(border.Color));
		}
		m_writer.WriteAttributeString("sz", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", num.ToString());
		m_writer.WriteAttributeString("space", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", space.ToString(CultureInfo.InvariantCulture));
		if (border.Shadow)
		{
			m_writer.WriteAttributeString("shadow", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "on");
		}
		m_writer.WriteEndElement();
	}

	private void SerializeLanguage(WCharacterFormat characterFormat, bool isThemeLang)
	{
		bool flag = characterFormat.HasValue(73);
		bool flag2 = characterFormat.HasValue(74);
		bool flag3 = characterFormat.HasValue(75);
		if (!(flag || flag2 || flag3))
		{
			return;
		}
		if (isThemeLang)
		{
			m_writer.WriteStartElement("themeFontLang", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		}
		else
		{
			m_writer.WriteStartElement("lang", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		}
		if (flag)
		{
			if (Enum.IsDefined(typeof(LocaleIDs), (int)characterFormat.LocaleIdASCII))
			{
				string value = ((LocaleIDs)characterFormat.LocaleIdASCII).ToString().Replace('_', '-');
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value);
			}
			else
			{
				string value = GetLanguage(characterFormat.LocaleIdASCII);
				if (value != "en-US")
				{
					m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value);
				}
			}
		}
		if (flag2)
		{
			if (Enum.IsDefined(typeof(LocaleIDs), (int)characterFormat.LocaleIdFarEast))
			{
				string value2 = ((LocaleIDs)characterFormat.LocaleIdFarEast).ToString().Replace('_', '-');
				m_writer.WriteAttributeString("w", "eastAsia", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value2);
			}
			else
			{
				string value2 = GetLanguage(characterFormat.LocaleIdFarEast);
				if (value2 != "en-US")
				{
					m_writer.WriteAttributeString("w", "eastAsia", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value2);
				}
			}
		}
		if (flag3)
		{
			if (Enum.IsDefined(typeof(LocaleIDs), (int)characterFormat.LocaleIdBidi))
			{
				string value3 = ((LocaleIDs)characterFormat.LocaleIdBidi).ToString().Replace('_', '-');
				m_writer.WriteAttributeString("w", "bidi", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value3);
			}
			else
			{
				string value3 = GetLanguage(characterFormat.LocaleIdBidi);
				if (value3 != "en-US")
				{
					m_writer.WriteAttributeString("w", "bidi", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value3);
				}
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializeLanguage(WCharacterFormat characterFormat, Dictionary<int, object> oldPropertiesHash)
	{
		bool flag = oldPropertiesHash.ContainsKey(73);
		bool flag2 = oldPropertiesHash.ContainsKey(74);
		bool flag3 = oldPropertiesHash.ContainsKey(75);
		if (!(flag || flag2 || flag3))
		{
			return;
		}
		m_writer.WriteStartElement("lang", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (flag)
		{
			short num = (short)oldPropertiesHash[73];
			if (Enum.IsDefined(typeof(LocaleIDs), (int)num))
			{
				LocaleIDs localeIDs = (LocaleIDs)num;
				string value = localeIDs.ToString().Replace('_', '-');
				m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value);
			}
			else
			{
				string value = GetLanguage(num);
				if (value != "en-US")
				{
					m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value);
				}
			}
		}
		if (flag2)
		{
			short num2 = (short)oldPropertiesHash[74];
			if (Enum.IsDefined(typeof(LocaleIDs), (int)num2))
			{
				LocaleIDs localeIDs = (LocaleIDs)num2;
				string value2 = localeIDs.ToString().Replace('_', '-');
				m_writer.WriteAttributeString("w", "eastAsia", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value2);
			}
			else
			{
				string value2 = GetLanguage(num2);
				if (value2 != "en-US")
				{
					m_writer.WriteAttributeString("w", "eastAsia", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value2);
				}
			}
		}
		if (flag3)
		{
			short num3 = (short)oldPropertiesHash[75];
			if (Enum.IsDefined(typeof(LocaleIDs), (int)num3))
			{
				LocaleIDs localeIDs = (LocaleIDs)num3;
				string value3 = localeIDs.ToString().Replace('_', '-');
				m_writer.WriteAttributeString("w", "bidi", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value3);
			}
			else
			{
				string value3 = GetLanguage(num3);
				if (value3 != "en-US")
				{
					m_writer.WriteAttributeString("w", "bidi", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", value3);
				}
			}
		}
		m_writer.WriteEndElement();
	}

	private void SerializeBoolProperty(string tag, bool value)
	{
		m_writer.WriteStartElement(tag, IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (!value)
		{
			m_writer.WriteAttributeString("val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", "0");
		}
		m_writer.WriteEndElement();
	}

	private WParagraphFormat GetBaseFormat(WParagraphFormat format)
	{
		if (format != null && format.IsContainFrameKey())
		{
			return format;
		}
		if (format.BaseFormat != null)
		{
			format = format.BaseFormat as WParagraphFormat;
			format = GetBaseFormat(format);
		}
		return format;
	}

	private void SerializeContentTypes(string type)
	{
		MemoryStream memoryStream = new MemoryStream();
		m_writer = CreateWriter(memoryStream);
		m_writer.WriteStartElement("Types", "http://schemas.openxmlformats.org/package/2006/content-types");
		SerializeDefaultContentType(memoryStream, "rels", "application/vnd.openxmlformats-package.relationships+xml");
		bool flag = false;
		if (AltChunkContentTypes.Count > 0)
		{
			_ = string.Empty;
			foreach (string key in AltChunkContentTypes.Keys)
			{
				if (AltChunkContentTypes[key] == "application/xml")
				{
					flag = true;
				}
			}
		}
		if (!flag)
		{
			SerializeDefaultContentType(memoryStream, "xml", "application/xml");
		}
		if (m_hasEmbedFonts && !string.IsNullOrEmpty(type))
		{
			SerializeDefaultContentType(memoryStream, type, "application/vnd.openxmlformats-officedocument.obfuscatedFont");
		}
		if (m_hasImages || PictureBullets.Count > 0 || m_hasOleObject || m_hasMetafiles)
		{
			SerializeDefaultContentType(memoryStream, "png", "image/png");
			SerializeDefaultContentType(memoryStream, "bmp", "image/bmp");
			SerializeDefaultContentType(memoryStream, "emf", "image/x-emf");
			SerializeDefaultContentType(memoryStream, "wmf", "image/x-wmf");
			SerializeDefaultContentType(memoryStream, "gif", "image/gif");
			SerializeDefaultContentType(memoryStream, "ico", "image/x-icon");
			SerializeDefaultContentType(memoryStream, "tif", "image/tiff");
			SerializeDefaultContentType(memoryStream, "tiff", "image/tiff");
			SerializeDefaultContentType(memoryStream, "jpeg", "image/jpeg");
			SerializeDefaultContentType(memoryStream, "jpg", "image/jpeg");
			SerializeDefaultContentType(memoryStream, "svg", "image/svg+xml");
		}
		if (m_document.HasMacros && IsMacroEnabled && !m_isSkipBinExtension)
		{
			SerializeDefaultContentType(memoryStream, "bin", "application/vnd.ms-office.vbaProject");
			m_isSkipBinExtension = true;
		}
		if (m_hasOleObject)
		{
			SerializeOleContentType(memoryStream);
		}
		if (m_hasChart)
		{
			SerializeDefaultContentType(memoryStream, "xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
		}
		if (AltChunkContentTypes.Count > 0)
		{
			string empty = string.Empty;
			foreach (string key2 in AltChunkContentTypes.Keys)
			{
				empty = AltChunkContentTypes[key2];
				SerializeDefaultContentType(memoryStream, key2, empty);
			}
		}
		if (IsMacroEnabled)
		{
			if (m_document.SaveFormatType.ToString().EndsWith("Dotm"))
			{
				SerializeOverrideContentType(memoryStream, "word\\document.xml", "application/vnd.ms-word.template.macroEnabledTemplate.main+xml");
			}
			else
			{
				SerializeOverrideContentType(memoryStream, "word\\document.xml", "application/vnd.ms-word.document.macroEnabled.main+xml");
			}
			if (m_document.HasMacros)
			{
				SerializeOverrideContentType(memoryStream, "word\\vbaData.xml", "application/vnd.ms-word.vbaData+xml");
				if (m_document.VbaProjectSignature != null)
				{
					SerializeOverrideContentType(memoryStream, "word\\vbaProjectSignature.bin", "application/vnd.ms-office.vbaProjectSignature");
				}
				if (m_document.VbaProjectSignatureAgile != null)
				{
					SerializeOverrideContentType(memoryStream, "word\\vbaProjectSignatureAgile.bin", "application/vnd.ms-office.vbaProjectSignatureAgile");
				}
			}
		}
		else if (m_document.SaveFormatType.ToString().EndsWith("Dotx"))
		{
			SerializeOverrideContentType(memoryStream, "word\\document.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml");
		}
		else
		{
			SerializeOverrideContentType(memoryStream, "word\\document.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml");
		}
		if (m_document.CustomXMLContainer != null)
		{
			foreach (Part value in m_document.CustomXMLContainer.XmlParts.Values)
			{
				if (value.Name.StartsWith("itemProps"))
				{
					string partName = "customXml\\" + value.Name;
					string contentType = GetContentType(value.Name);
					SerializeOverrideContentType(memoryStream, partName, contentType);
				}
			}
		}
		if (m_document.CustomXmlPartContainer != null)
		{
			foreach (Part value2 in m_document.CustomXmlPartContainer.XmlParts.Values)
			{
				if (value2.Name.StartsWith("itemProps"))
				{
					string partName2 = "customXml\\" + value2.Name;
					string contentType2 = GetContentType(value2.Name);
					SerializeOverrideContentType(memoryStream, partName2, contentType2);
				}
			}
		}
		if (HasNumbering)
		{
			SerializeOverrideContentType(memoryStream, "word\\numbering.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml");
		}
		if (m_hasComment)
		{
			SerializeOverrideContentType(memoryStream, "word\\comments.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml");
		}
		if (m_hasComment && m_document.CommentsEx.Count > 0)
		{
			SerializeOverrideContentType(memoryStream, "word\\commentsExtended.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.commentsExtended+xml");
		}
		if (HasEndnote)
		{
			SerializeOverrideContentType(memoryStream, "word\\endnotes.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml");
		}
		if (HasFootnote)
		{
			SerializeOverrideContentType(memoryStream, "word\\footnotes.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml");
		}
		if (HasFontTable)
		{
			SerializeOverrideContentType(memoryStream, "word\\fontTable.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml");
		}
		if (m_hasDiagrams)
		{
			SerializeDiagramType(m_document.DocxPackage, memoryStream);
		}
		if (AltChunkTargets.Count > 0)
		{
			AddAlternateChunkItem(AltChunkTargets);
		}
		if (FootnoteAlternateChunks.Count > 0)
		{
			AddAlternateChunkItem(FootnoteAlternateChunks);
		}
		if (EndnoteAlternateChunks.Count > 0)
		{
			AddAlternateChunkItem(EndnoteAlternateChunks);
		}
		if (CommentAlternateChunks.Count > 0)
		{
			AddAlternateChunkItem(CommentAlternateChunks);
		}
		if (HeaderFooterAlternateChunks.Count > 0)
		{
			foreach (Dictionary<string, string> value3 in m_headerFooterAlternateChunks.Values)
			{
				AddAlternateChunkItem(value3);
			}
		}
		SerializeOverrideContentType(memoryStream, "word\\styles.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml");
		SerializeOverrideContentType(memoryStream, "word\\settings.xml", "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml");
		SerializeOverrideContentType(memoryStream, "word\\theme\\theme1.xml", "application/vnd.openxmlformats-officedocument.theme+xml");
		SerializeOverrideContentType(memoryStream, "docProps\\core.xml", "application/vnd.openxmlformats-package.core-properties+xml");
		if (m_document.DocxPackage != null && m_document.DocxPackage.FindPartContainer("word/").XmlPartContainers.ContainsKey("glossary/"))
		{
			SerializeContentTypeForGlossary(memoryStream);
		}
		SerializeOverrideContentType(memoryStream, "docProps\\app.xml", "application/vnd.openxmlformats-officedocument.extended-properties+xml");
		if (m_document.CustomDocumentProperties != null && m_document.CustomDocumentProperties.Count > 0)
		{
			SerializeOverrideContentType(memoryStream, "docProps\\custom.xml", "application/vnd.openxmlformats-officedocument.custom-properties+xml");
		}
		if (m_hasChart)
		{
			SerializeChartContentType(memoryStream);
		}
		SerializeHFContentTypes(memoryStream);
		WriteXmlItemsContentTypes(memoryStream);
		m_writer.WriteEndElement();
		m_writer.Flush();
		m_archive.AddItem("[Content_Types].xml", memoryStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
	}

	private void SerializeContentTypeForGlossary(MemoryStream contentStream)
	{
		if (!m_document.DocxPackage.XmlParts.ContainsKey("[Content_Types].xml"))
		{
			return;
		}
		m_document.DocxPackage.XmlParts["[Content_Types].xml"].DataStream.Position = 0L;
		XmlReader xmlReader = XmlReader.Create(m_document.DocxPackage.XmlParts["[Content_Types].xml"].DataStream);
		while (xmlReader.NodeType != XmlNodeType.Element)
		{
			xmlReader.Read();
		}
		if (xmlReader.LocalName != "Types")
		{
			return;
		}
		xmlReader.Read();
		while (xmlReader.LocalName != "Types")
		{
			if (xmlReader.LocalName == "Override" && xmlReader.HasAttributes)
			{
				string attribute = xmlReader.GetAttribute("PartName");
				if (attribute.Contains("/word/glossary/"))
				{
					SerializeOverrideContentType(contentStream, attribute.Remove(0, 1), xmlReader.GetAttribute("ContentType"));
				}
			}
			xmlReader.Read();
		}
		m_document.DocxPackage.XmlParts["[Content_Types].xml"].DataStream.Position = 0L;
		xmlReader.Dispose();
	}

	private void AddAlternateChunkItem(Dictionary<string, string> altchunkItems)
	{
		foreach (string key in altchunkItems.Keys)
		{
			Part part = m_document.DocxPackage.FindPart("word/" + altchunkItems[key]);
			if (part == null)
			{
				part = m_document.DocxPackage.FindPart(altchunkItems[key]);
			}
			if (m_archive.Find(altchunkItems[key].Replace("\\", "/")) == -1)
			{
				m_archive.AddItem(altchunkItems[key], part.DataStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
			}
		}
	}

	private void SerializeDiagramType(Package wordPackage, MemoryStream stream)
	{
		if (!m_hasDiagrams)
		{
			return;
		}
		PartContainer partContainer = wordPackage.FindPartContainer("word/diagrams/");
		if (partContainer == null)
		{
			return;
		}
		foreach (Part value in partContainer.XmlParts.Values)
		{
			string partName = "word/diagrams/" + value.Name;
			string contentType = GetContentType(value.Name);
			SerializeOverrideContentType(stream, partName, contentType);
		}
	}

	private string GetContentType(string partName)
	{
		if (StartsWithExt(partName, "data"))
		{
			return "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml";
		}
		if (StartsWithExt(partName, "colors"))
		{
			return "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml";
		}
		if (StartsWithExt(partName, "quickStyle"))
		{
			return "application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml";
		}
		if (StartsWithExt(partName, "item"))
		{
			return "application/vnd.openxmlformats-officedocument.customXmlProperties+xml";
		}
		return "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml";
	}

	private void SerializeOleContentType(MemoryStream contentStream)
	{
		foreach (string oleContentType in OleContentTypes)
		{
			switch (oleContentType)
			{
			case "application/vnd.ms-excel":
				SerializeDefaultContentType(contentStream, "xls", oleContentType);
				continue;
			case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
				if (!m_hasChart)
				{
					SerializeDefaultContentType(contentStream, "xlsx", oleContentType);
				}
				continue;
			case "application/vnd.ms-powerpoint":
				SerializeDefaultContentType(contentStream, "ppt", oleContentType);
				continue;
			case "application/vnd.openxmlformats-officedocument.presentationml.presentation":
				SerializeDefaultContentType(contentStream, "pptx", oleContentType);
				continue;
			case "application/msword":
				SerializeDefaultContentType(contentStream, "doc", oleContentType);
				continue;
			case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
				SerializeDefaultContentType(contentStream, "docx", oleContentType);
				continue;
			case "application/vnd.ms-word.document.macroEnabled.12":
				SerializeDefaultContentType(contentStream, "docm", oleContentType);
				continue;
			case "application/vnd.ms-excel.sheet.binary.macroEnabled.12":
				SerializeDefaultContentType(contentStream, "xlsb", oleContentType);
				continue;
			case "application/vnd.ms-excel.sheet.macroEnabled.12":
				SerializeDefaultContentType(contentStream, "xlsm", oleContentType);
				continue;
			case "application/vnd.ms-powerpoint.presentation.macroEnabled.12":
				SerializeDefaultContentType(contentStream, "pptm", oleContentType);
				continue;
			case "application/vnd.ms-powerpoint.slide.macroEnabled.12":
				SerializeDefaultContentType(contentStream, "sldm", oleContentType);
				continue;
			case "application/vnd.openxmlformats-officedocument.presentationml.slide":
				SerializeDefaultContentType(contentStream, "sldx", oleContentType);
				continue;
			case "application/vnd.visio":
				SerializeDefaultContentType(contentStream, "vsd", oleContentType);
				continue;
			case "application/vnd.ms-visio.drawing":
				SerializeDefaultContentType(contentStream, "vsdx", oleContentType);
				continue;
			}
			if (!m_isSkipBinExtension)
			{
				SerializeDefaultContentType(contentStream, "bin", oleContentType);
				m_isSkipBinExtension = true;
			}
		}
	}

	private void SerializeHFContentTypes(MemoryStream stream)
	{
		SerializeHeaderFootersContentType(HeaderFooterType.EvenFooter, stream);
		SerializeHeaderFootersContentType(HeaderFooterType.EvenHeader, stream);
		SerializeHeaderFootersContentType(HeaderFooterType.FirstPageFooter, stream);
		SerializeHeaderFootersContentType(HeaderFooterType.FirstPageHeader, stream);
		SerializeHeaderFootersContentType(HeaderFooterType.OddFooter, stream);
		SerializeHeaderFootersContentType(HeaderFooterType.OddHeader, stream);
	}

	private void SerializeHeaderFootersContentType(HeaderFooterType hfType, MemoryStream stream)
	{
		if (!HeadersFooters.ContainsKey(hfType))
		{
			return;
		}
		foreach (string key in HeadersFooters[hfType].Keys)
		{
			string partName;
			string contentType;
			if (hfType == HeaderFooterType.EvenHeader || hfType == HeaderFooterType.FirstPageHeader || hfType == HeaderFooterType.OddHeader)
			{
				partName = "word\\header" + key.Replace("rId", "") + ".xml";
				contentType = "application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml";
			}
			else
			{
				partName = "word\\footer" + key.Replace("rId", "") + ".xml";
				contentType = "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml";
			}
			SerializeOverrideContentType(stream, partName, contentType);
		}
	}

	private void SerializeChartContentType(MemoryStream memoryStream)
	{
		string empty = string.Empty;
		m_chartColorStyleID = 0;
		m_chartStyleID = 0;
		m_chartDrawingID = 0;
		foreach (string key in ChartRelationId.Keys)
		{
			WChart wChart = ChartRelationId[key];
			string contentType;
			if (wChart.Is2016Chart)
			{
				empty = "word/charts/chartEx" + key.Replace("rId", "") + ".xml";
				contentType = "application/vnd.ms-office.chartex+xml";
			}
			else
			{
				empty = "word/charts/chart" + key.Replace("rId", "") + ".xml";
				contentType = "application/vnd.openxmlformats-officedocument.drawingml.chart+xml";
			}
			SerializeOverrideContentType(memoryStream, empty, contentType);
			if (wChart.Is2016Chart && wChart.DocxProps.Count == 0)
			{
				int num = ++m_chartStyleID;
				empty = "word/charts/style" + num + ".xml";
				contentType = "application/vnd.ms-office.chartstyle+xml";
				SerializeOverrideContentType(memoryStream, empty, contentType);
				num = ++m_chartColorStyleID;
				empty = "word/charts/colors" + num + ".xml";
				contentType = "application/vnd.ms-office.chartcolorstyle+xml";
				SerializeOverrideContentType(memoryStream, empty, contentType);
			}
			foreach (string key2 in wChart.DocxProps.Keys)
			{
				if (key2.Contains("/chartStyle"))
				{
					int num = ++m_chartStyleID;
					empty = "word/charts/style" + num + ".xml";
					contentType = "application/vnd.ms-office.chartstyle+xml";
					SerializeOverrideContentType(memoryStream, empty, contentType);
				}
				if (key2.Contains("/chartColorStyle"))
				{
					int num = ++m_chartColorStyleID;
					empty = "word/charts/colors" + num + ".xml";
					contentType = "application/vnd.ms-office.chartcolorstyle+xml";
					SerializeOverrideContentType(memoryStream, empty, contentType);
				}
				if (key2.Contains("/chartUserShapes"))
				{
					int num = ++m_chartDrawingID;
					empty = "word\\drawings\\drawing" + num + ".xml";
					contentType = "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml";
					SerializeOverrideContentType(memoryStream, empty, contentType);
				}
			}
		}
	}

	private void WriteXmlItemsContentTypes(MemoryStream stream)
	{
		if (ControlsPathNames.Count <= 0)
		{
			return;
		}
		if (!m_isSkipBinExtension)
		{
			SerializeDefaultContentType(stream, "bin", "application/vnd.ms-office.activeX");
			m_isSkipBinExtension = true;
		}
		int i = 0;
		for (int count = ControlsPathNames.Count; i < count; i++)
		{
			if (ControlsPathNames[i].EndsWith("bin"))
			{
				SerializeOverrideContentType(stream, ControlsPathNames[i], "application/vnd.ms-office.activeX");
			}
			else
			{
				SerializeOverrideContentType(stream, ControlsPathNames[i], "application/vnd.ms-office.activeX+xml");
			}
		}
	}

	private void SerializeDefaultContentType(MemoryStream stream, string extension, string contentType)
	{
		m_writer.WriteStartElement("Default");
		m_writer.WriteAttributeString("Extension", extension);
		m_writer.WriteAttributeString("ContentType", contentType);
		m_writer.WriteEndElement();
	}

	private void SerializeOverrideContentType(MemoryStream stream, string partName, string contentType)
	{
		m_writer.WriteStartElement("Override");
		m_writer.WriteAttributeString("PartName", "/" + partName.Replace("\\", "/"));
		m_writer.WriteAttributeString("ContentType", contentType);
		m_writer.WriteEndElement();
	}

	private void SerializeGeneralRelations()
	{
		MemoryStream memoryStream = new MemoryStream();
		if (!IsWord2003ML)
		{
			m_writer = CreateWriter(memoryStream);
		}
		ResetRelationShipID();
		m_writer.WriteStartElement("Relationships", "http://schemas.openxmlformats.org/package/2006/relationships");
		SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument", "word\\document.xml");
		SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties", "docProps\\app.xml");
		SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties", "docProps\\core.xml");
		if (m_document.CustomDocumentProperties != null && m_document.CustomDocumentProperties.Count > 0)
		{
			SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties", "docProps\\custom.xml");
		}
		if (m_document.CustomUIPartContainer != null)
		{
			string name = m_document.CustomUIPartContainer.Name;
			foreach (KeyValuePair<string, Part> xmlPart in m_document.CustomUIPartContainer.XmlParts)
			{
				SerializeRelationShip(memoryStream, GetNextRelationShipID(), (xmlPart.Key == "customUI14.xml") ? "http://schemas.microsoft.com/office/2007/relationships/ui/extensibility" : "http://schemas.microsoft.com/office/2006/relationships/ui/extensibility", name + xmlPart.Key);
			}
		}
		if (m_document.UserCustomizationPartContainer != null)
		{
			SerializeRelationShip(memoryStream, GetNextRelationShipID(), "http://schemas.microsoft.com/office/2006/relationships/ui/userCustomization", "userCustomization/customUI.xml");
		}
		m_writer.WriteEndElement();
		if (!IsWord2003ML)
		{
			m_writer.Flush();
			m_archive.AddItem("_rels\\.rels", memoryStream, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
	}

	private void SerializeRelationShip(Stream stream, string relationshipID, string relationshipType, string targetPath)
	{
		m_writer.WriteStartElement("Relationship");
		m_writer.WriteAttributeString("Id", relationshipID);
		m_writer.WriteAttributeString("Type", relationshipType);
		if (relationshipType == "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink" || StartsWithExt(targetPath, "http://") || StartsWithExt(targetPath, "https://") || StartsWithExt(targetPath, "file:///"))
		{
			if (!StartsWithExt(targetPath, "file:///") && Uri.TryCreate(targetPath, UriKind.Absolute, out Uri result))
			{
				try
				{
					m_writer.WriteAttributeString("Target", result.AbsoluteUri);
				}
				catch
				{
					m_writer.WriteAttributeString("Target", targetPath.Replace("\\", "/").Replace(ControlChar.LineBreak, string.Empty));
				}
			}
			else
			{
				m_writer.WriteAttributeString("Target", targetPath.Replace("\\", "/").Replace(ControlChar.LineBreak, string.Empty));
			}
			m_writer.WriteAttributeString("TargetMode", "External");
		}
		else
		{
			m_writer.WriteAttributeString("Target", targetPath.Replace("\\", "/").Replace(ControlChar.LineBreak, string.Empty));
		}
		m_writer.WriteEndElement();
	}

	private void SerializeRelationShip(string relationshipID, string relationshipType, string targetPath)
	{
		m_writer.WriteStartElement("Relationship");
		m_writer.WriteAttributeString("Id", relationshipID);
		m_writer.WriteAttributeString("Type", relationshipType);
		if (!StartsWithExt(targetPath, "file:///") && Uri.TryCreate(targetPath, UriKind.Absolute, out Uri result))
		{
			try
			{
				m_writer.WriteAttributeString("Target", result.AbsoluteUri);
			}
			catch
			{
				m_writer.WriteAttributeString("Target", targetPath.Replace("\\", "/").Replace(ControlChar.LineBreak, string.Empty));
			}
		}
		else
		{
			m_writer.WriteAttributeString("Target", targetPath.Replace("\\", "/").Replace(ControlChar.LineBreak, string.Empty));
		}
		m_writer.WriteAttributeString("TargetMode", "External");
		m_writer.WriteEndElement();
	}

	private void SerializeCoreProperties()
	{
		MemoryStream data = new MemoryStream();
		if (!IsWord2003ML)
		{
			m_writer = CreateWriter(data);
		}
		BuiltinDocumentProperties builtinDocumentProperties = m_document.BuiltinDocumentProperties;
		m_writer.WriteStartElement("cp", "coreProperties", "http://schemas.openxmlformats.org/package/2006/metadata/core-properties");
		m_writer.WriteAttributeString("xmlns", "cp", null, "http://schemas.openxmlformats.org/package/2006/metadata/core-properties");
		m_writer.WriteAttributeString("xmlns", "dc", null, "http://purl.org/dc/elements/1.1/");
		m_writer.WriteAttributeString("xmlns", "dcterms", null, "http://purl.org/dc/terms/");
		m_writer.WriteAttributeString("xmlns", "dcmitype", null, "http://purl.org/dc/dcmitype/");
		m_writer.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema-instance");
		if (builtinDocumentProperties != null)
		{
			if (builtinDocumentProperties.Title != null)
			{
				m_writer.WriteStartElement("dc", "title", "http://purl.org/dc/elements/1.1/");
				m_writer.WriteString(builtinDocumentProperties.Title);
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.Subject != null)
			{
				m_writer.WriteStartElement("dc", "subject", "http://purl.org/dc/elements/1.1/");
				m_writer.WriteString(builtinDocumentProperties.Subject);
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.Author != null)
			{
				m_writer.WriteStartElement("dc", "creator", "http://purl.org/dc/elements/1.1/");
				m_writer.WriteString(builtinDocumentProperties.Author);
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.Keywords != null)
			{
				m_writer.WriteStartElement("keywords", "http://schemas.openxmlformats.org/package/2006/metadata/core-properties");
				m_writer.WriteString(builtinDocumentProperties.Keywords);
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.Comments != null)
			{
				m_writer.WriteStartElement("dc", "description", "http://purl.org/dc/elements/1.1/");
				m_writer.WriteString(builtinDocumentProperties.Comments);
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.LastAuthor != null)
			{
				m_writer.WriteStartElement("lastModifiedBy", "http://schemas.openxmlformats.org/package/2006/metadata/core-properties");
				m_writer.WriteString(builtinDocumentProperties.LastAuthor);
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.LastPrinted != DateTime.MinValue)
			{
				m_writer.WriteStartElement("lastPrinted", "http://schemas.openxmlformats.org/package/2006/metadata/core-properties");
				string text = builtinDocumentProperties.LastPrinted.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ", CultureInfo.InvariantCulture);
				m_writer.WriteString(text);
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.RevisionNumber != null)
			{
				m_writer.WriteStartElement("revision", "http://schemas.openxmlformats.org/package/2006/metadata/core-properties");
				int num = 1;
				if (builtinDocumentProperties.RevisionNumber != "NaN")
				{
					try
					{
						num = int.Parse(builtinDocumentProperties.RevisionNumber);
					}
					catch (ArgumentNullException)
					{
					}
					catch (ArgumentException)
					{
					}
					catch (FormatException)
					{
					}
					catch (OverflowException)
					{
					}
				}
				m_writer.WriteString(num.ToString());
				m_writer.WriteEndElement();
			}
			string text2 = null;
			if (builtinDocumentProperties.CreateDate != DateTime.Now)
			{
				m_writer.WriteStartElement("dcterms", "created", "http://purl.org/dc/terms/");
				m_writer.WriteAttributeString("xsi", "type", "http://www.w3.org/2001/XMLSchema-instance", "dcterms:W3CDTF");
				text2 = builtinDocumentProperties.CreateDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ", CultureInfo.InvariantCulture);
				m_writer.WriteString(text2);
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.LastSaveDate != DateTime.Now)
			{
				m_writer.WriteStartElement("dcterms", "modified", "http://purl.org/dc/terms/");
				m_writer.WriteAttributeString("xsi", "type", "http://www.w3.org/2001/XMLSchema-instance", "dcterms:W3CDTF");
				text2 = builtinDocumentProperties.LastSaveDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ", CultureInfo.InvariantCulture);
				m_writer.WriteString(text2);
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.Category != null)
			{
				m_writer.WriteStartElement("category", "http://schemas.openxmlformats.org/package/2006/metadata/core-properties");
				m_writer.WriteString(builtinDocumentProperties.Category);
				m_writer.WriteEndElement();
			}
			if (!string.IsNullOrEmpty(builtinDocumentProperties.ContentStatus))
			{
				m_writer.WriteStartElement("contentStatus", "http://schemas.openxmlformats.org/package/2006/metadata/core-properties");
				m_writer.WriteString(builtinDocumentProperties.ContentStatus);
				m_writer.WriteEndElement();
			}
		}
		m_writer.WriteEndElement();
		if (!IsWord2003ML)
		{
			m_writer.Flush();
			m_archive.AddItem("docProps\\core.xml", data, bControlStream: false, DocGen.Compression.FileAttributes.Archive);
		}
	}

	private void SerializeCustomProperties()
	{
		MemoryStream data = new MemoryStream();
		if (!IsWord2003ML)
		{
			m_writer = CreateWriter(data);
		}
		CustomDocumentProperties customDocumentProperties = m_document.CustomDocumentProperties;
		m_writer.WriteStartElement("Properties", "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties");
		m_writer.WriteAttributeString("xmlns", "vt", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes" : "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes");
		int num = 1;
		string empty = string.Empty;
		if (customDocumentProperties != null)
		{
			foreach (string key in customDocumentProperties.CustomHash.Keys)
			{
				empty = key;
				DocumentProperty documentProperty = customDocumentProperties.CustomHash[key];
				if (!(empty == "_PID_LINKBASE") && !(empty == "_PID_HLINKS") && isValidType(documentProperty.PropertyType))
				{
					m_writer.WriteStartElement("property");
					m_writer.WriteAttributeString("fmtid", "{D5CDD505-2E9C-101B-9397-08002B2CF9AE}");
					string empty2 = string.Empty;
					empty2 = key;
					m_writer.WriteAttributeString("name", empty2);
					XmlWriter writer = m_writer;
					int num2 = ++num;
					writer.WriteAttributeString("pid", num2.ToString());
					switch (documentProperty.PropertyType)
					{
					case DocGen.CompoundFile.DocIO.PropertyType.String:
						m_writer.WriteStartElement("lpwstr", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes" : "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes");
						m_writer.WriteString(ConvertToValidXmlString(documentProperty.Text));
						m_writer.WriteEndElement();
						break;
					case DocGen.CompoundFile.DocIO.PropertyType.AsciiString:
						m_writer.WriteStartElement("lpstr", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes" : "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes");
						m_writer.WriteString(ConvertToValidXmlString(documentProperty.Text));
						m_writer.WriteEndElement();
						break;
					case DocGen.CompoundFile.DocIO.PropertyType.Int:
						m_writer.WriteStartElement("i4", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes" : "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes");
						m_writer.WriteString(documentProperty.Integer.ToString(CultureInfo.InvariantCulture));
						m_writer.WriteEndElement();
						break;
					case DocGen.CompoundFile.DocIO.PropertyType.Int32:
						m_writer.WriteStartElement("i4", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes" : "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes");
						m_writer.WriteString(documentProperty.Int32.ToString(CultureInfo.InvariantCulture));
						m_writer.WriteEndElement();
						break;
					case DocGen.CompoundFile.DocIO.PropertyType.Double:
						m_writer.WriteStartElement("r8", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes" : "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes");
						m_writer.WriteString(documentProperty.Double.ToString(CultureInfo.InvariantCulture));
						m_writer.WriteEndElement();
						break;
					case DocGen.CompoundFile.DocIO.PropertyType.DateTime:
					{
						m_writer.WriteStartElement("filetime", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes" : "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes");
						string text = documentProperty.ToDateTime().ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ", CultureInfo.InvariantCulture);
						m_writer.WriteString(text);
						m_writer.WriteEndElement();
						break;
					}
					case DocGen.CompoundFile.DocIO.PropertyType.Bool:
						m_writer.WriteStartElement("bool", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes" : "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes");
						m_writer.WriteString(XmlConvert.ToString(documentProperty.Boolean));
						m_writer.WriteEndElement();
						break;
					}
					m_writer.WriteEndElement();
				}
			}
		}
		m_writer.WriteEndElement();
		if (!IsWord2003ML)
		{
			m_writer.Flush();
			m_archive.AddItem("docProps\\custom.xml", data, bControlStream: true, DocGen.Compression.FileAttributes.Archive);
		}
	}

	private bool isValidType(DocGen.CompoundFile.DocIO.PropertyType type)
	{
		if (type == DocGen.CompoundFile.DocIO.PropertyType.String || type == DocGen.CompoundFile.DocIO.PropertyType.AsciiString || type == DocGen.CompoundFile.DocIO.PropertyType.Int || type == DocGen.CompoundFile.DocIO.PropertyType.Int32 || type == DocGen.CompoundFile.DocIO.PropertyType.Double || type == DocGen.CompoundFile.DocIO.PropertyType.DateTime || type == DocGen.CompoundFile.DocIO.PropertyType.Bool)
		{
			return true;
		}
		return false;
	}

	private string ConvertToValidXmlString(string text)
	{
		string text2 = string.Empty;
		for (int i = 0; i < text.Length; i++)
		{
			char character = text[i];
			text2 = ((!IsValidXmlChar(character)) ? (text2 + XmlConvert.EncodeName(character.ToString())) : (text2 + character));
		}
		return text2;
	}

	private bool IsValidXmlChar(ushort character)
	{
		if (character != 9 && character != 10 && character != 13 && (character < 32 || character > 55295))
		{
			if (character >= 57344)
			{
				return character <= 65533;
			}
			return false;
		}
		return true;
	}

	private void SerializeAppProperties()
	{
		MemoryStream data = new MemoryStream();
		if (!IsWord2003ML)
		{
			m_writer = CreateWriter(data);
		}
		BuiltinDocumentProperties builtinDocumentProperties = m_document.BuiltinDocumentProperties;
		m_writer.WriteStartElement("Properties", "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties");
		m_writer.WriteAttributeString("xmlns", "vt", null, IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/docPropsVTypes" : "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes");
		if (builtinDocumentProperties != null)
		{
			if (builtinDocumentProperties.Template != null)
			{
				m_writer.WriteStartElement("Template");
				m_writer.WriteString(builtinDocumentProperties.Template);
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.TotalEditingTime != TimeSpan.MinValue)
			{
				m_writer.WriteStartElement("TotalTime");
				m_writer.WriteString(Math.Round(builtinDocumentProperties.TotalEditingTime.TotalMinutes).ToString());
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.PageCount != int.MinValue)
			{
				m_writer.WriteStartElement("Pages");
				m_writer.WriteString(builtinDocumentProperties.PageCount.ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.WordCount != int.MinValue)
			{
				m_writer.WriteStartElement("Words");
				m_writer.WriteString(builtinDocumentProperties.WordCount.ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.CharCount != int.MinValue)
			{
				m_writer.WriteStartElement("Characters");
				m_writer.WriteString(builtinDocumentProperties.CharCount.ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.ApplicationName != null)
			{
				m_writer.WriteStartElement("Application");
				m_writer.WriteString(builtinDocumentProperties.ApplicationName);
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.DocSecurity != int.MinValue)
			{
				m_writer.WriteStartElement("DocSecurity");
				m_writer.WriteString(builtinDocumentProperties.DocSecurity.ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.LinesCount != int.MinValue)
			{
				m_writer.WriteStartElement("Lines");
				m_writer.WriteString(builtinDocumentProperties.LinesCount.ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.ParagraphCount != int.MinValue)
			{
				m_writer.WriteStartElement("Paragraphs");
				m_writer.WriteString(builtinDocumentProperties.ParagraphCount.ToString(CultureInfo.InvariantCulture));
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.Manager != null)
			{
				m_writer.WriteStartElement("Manager");
				m_writer.WriteString(builtinDocumentProperties.Manager);
				m_writer.WriteEndElement();
			}
			if (builtinDocumentProperties.Company != null)
			{
				m_writer.WriteStartElement("Company");
				m_writer.WriteString(builtinDocumentProperties.Company);
				m_writer.WriteEndElement();
			}
			m_writer.WriteStartElement("AppVersion");
			if (IsWord2007)
			{
				m_writer.WriteString("12.0000");
			}
			else if (IsWord2010)
			{
				m_writer.WriteString("14.0000");
			}
			else if (IsWord2013)
			{
				m_writer.WriteString("15.0000");
			}
			else
			{
				m_writer.WriteString("16.0000");
			}
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
		if (!IsWord2003ML)
		{
			m_writer.Flush();
			m_archive.AddItem("docProps\\app.xml", data, bControlStream: true, DocGen.Compression.FileAttributes.Archive);
		}
	}

	internal static string ReplaceInvalidSurrogateCharacters(string text)
	{
		for (int i = 0; i < text.Length; i++)
		{
			int num = text[i];
			if (num >= 55296 && num <= 56319)
			{
				if (i + 1 != text.Length)
				{
					int num2 = text[i + 1];
					if (num2 < 56320 || num2 > 57343)
					{
						text = text.Replace(text[i].ToString(), "");
						i--;
					}
				}
				else
				{
					text = text.Replace(text[i].ToString(), "");
				}
			}
			else
			{
				if (num < 56320 || num > 57343)
				{
					continue;
				}
				if (i > 0)
				{
					int num3 = text[i - 1];
					if (num3 < 55296 || num3 > 56319)
					{
						text = text.Replace(text[i].ToString(), "");
					}
					else
					{
						i++;
					}
				}
				else
				{
					text = text.Replace(text[i].ToString(), "");
				}
				i--;
			}
		}
		return text;
	}

	private bool IsDefaultStyle(Style style)
	{
		string name = style.Name;
		if ((name == "Normal" && style.StyleType == StyleType.ParagraphStyle) || (name == "Default Paragraph Font" && style.StyleType == StyleType.CharacterStyle) || ((name == "Table Normal" || name == "Normal Table") && style.StyleType == StyleType.TableStyle) || (name == "No List" && style.TypeCode == WordStyleType.ListStyle))
		{
			return true;
		}
		if (style.StyleId == 0)
		{
			return true;
		}
		return false;
	}

	private string GetTabLeader(TabLeader tabLeader)
	{
		return tabLeader switch
		{
			TabLeader.Dotted => "dot", 
			TabLeader.Hyphenated => "hyphen", 
			TabLeader.Single => "underscore", 
			TabLeader.Heavy => "heavy", 
			_ => "none", 
		};
	}

	private string GetTabJustification(TabJustification tabJustification)
	{
		switch (tabJustification)
		{
		case TabJustification.Left:
			if (!IsStrict)
			{
				return "left";
			}
			return "start";
		case TabJustification.Centered:
			return "center";
		case TabJustification.Right:
			if (!IsStrict)
			{
				return "right";
			}
			return "end";
		case TabJustification.Decimal:
			return "decimal";
		case TabJustification.Bar:
			return "bar";
		case TabJustification.List:
			return "num";
		default:
			return "clear";
		}
	}

	private int GetListId(WListFormat lf)
	{
		int num = 0;
		if (lf.LFOStyleName == string.Empty || lf.CurrentListStyle.Name != string.Empty)
		{
			{
				IEnumerator enumerator = lf.Document.ListStyles.GetEnumerator();
				try
				{
					while (enumerator.MoveNext() && !(((ListStyle)enumerator.Current).Name == lf.CustomStyleName))
					{
						num++;
					}
				}
				finally
				{
					IDisposable disposable = enumerator as IDisposable;
					if (disposable != null)
					{
						disposable.Dispose();
					}
				}
			}
		}
		if (lf.LFOStyleName != null)
		{
			if (m_lstOverId == 0)
			{
				m_lstOverId = lf.Document.ListStyles.Count + 1;
			}
			if (!ListStyleReferences.ContainsKey(num))
			{
				num = AddListOverride(num, lf.LFOStyleName);
			}
			else
			{
				Dictionary<int, string> dictionary = ListStyleReferences[num];
				bool flag = false;
				foreach (int key in dictionary.Keys)
				{
					if (dictionary[key] == lf.LFOStyleName)
					{
						num = key;
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					num = AddListOverride(num, lf.LFOStyleName);
				}
			}
		}
		else
		{
			num++;
		}
		return num;
	}

	private int AddListOverride(int listId, string lfoStyleName)
	{
		if (!ListStyleReferences.ContainsKey(listId))
		{
			ListStyleReferences.Add(listId, new Dictionary<int, string>());
		}
		ListStyleReferences[listId].Add(m_lstOverId, lfoStyleName);
		int lstOverId = m_lstOverId;
		m_lstOverId++;
		return lstOverId;
	}

	private void SerializeNumPr(int listId, int listLevel)
	{
		m_writer.WriteStartElement("numPr", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
		if (listLevel != -1)
		{
			m_writer.WriteStartElement("ilvl", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", listLevel.ToString());
			m_writer.WriteEndElement();
		}
		if (listId != -1)
		{
			m_writer.WriteStartElement("numId", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main");
			m_writer.WriteAttributeString("w", "val", IsStrict ? "http://purl.oclc.org/ooxml/wordprocessingml/main" : "http://schemas.openxmlformats.org/wordprocessingml/2006/main", listId.ToString());
			m_writer.WriteEndElement();
		}
		m_writer.WriteEndElement();
	}

	private bool HasFont(Dictionary<int, object> oldPropertiesHash)
	{
		if (oldPropertiesHash.ContainsKey(2) || oldPropertiesHash.ContainsKey(68) || oldPropertiesHash.ContainsKey(69) || oldPropertiesHash.ContainsKey(70) || oldPropertiesHash.ContainsKey(61) || oldPropertiesHash.ContainsKey(72))
		{
			return true;
		}
		return false;
	}

	private bool HasFont(WCharacterFormat characterFormat)
	{
		if (characterFormat.HasValue(2) || characterFormat.HasValue(68) || characterFormat.HasValue(69) || characterFormat.HasValue(70) || characterFormat.HasValue(61) || characterFormat.HasValue(72))
		{
			return true;
		}
		if (characterFormat.Document != null && characterFormat.Document.GrammarSpellingData == null && characterFormat.HasKey(0))
		{
			return true;
		}
		return false;
	}

	private XmlWriter CreateWriter(Stream data)
	{
		XmlWriterSettings settings = new XmlWriterSettings();
		XmlWriter xmlWriter = XmlWriter.Create(data, settings);
		xmlWriter.WriteProcessingInstruction("xml", "version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"");
		return xmlWriter;
	}

	private XmlReader CreateReader(Stream stream)
	{
		stream.Position = 0L;
		XmlReader xmlReader = XmlReader.Create(stream);
		xmlReader.Read();
		while (xmlReader.NodeType == XmlNodeType.XmlDeclaration)
		{
			xmlReader.Read();
		}
		return xmlReader;
	}

	private void ResetRelationShipID()
	{
		m_relationShipID = 0;
	}

	private string GetNextRelationShipID()
	{
		return $"rId{++m_relationShipID}";
	}

	private int GetNextID()
	{
		return ++m_id;
	}

	private string GetTextureStyle(TextureStyle texttureStyle)
	{
		switch (texttureStyle)
		{
		case TextureStyle.Texture5Percent:
		case TextureStyle.Texture2Pt5Percent:
		case TextureStyle.Texture7Pt5Percent:
			return "pct5";
		case TextureStyle.Texture10Percent:
			return "pct10";
		case TextureStyle.Texture12Pt5Percent:
			return "pct12";
		case TextureStyle.Texture15Percent:
		case TextureStyle.Texture17Pt5Percent:
			return "pct15";
		case TextureStyle.Texture20Percent:
		case TextureStyle.Texture22Pt5Percent:
			return "pct20";
		case TextureStyle.Texture25Percent:
		case TextureStyle.Texture27Pt5Percent:
			return "pct25";
		case TextureStyle.Texture30Percent:
		case TextureStyle.Texture32Pt5Percent:
			return "pct30";
		case TextureStyle.Texture35Percent:
			return "pct35";
		case TextureStyle.Texture37Pt5Percent:
			return "pct37";
		case TextureStyle.Texture40Percent:
		case TextureStyle.Texture42Pt5Percent:
			return "pct40";
		case TextureStyle.Texture45Percent:
		case TextureStyle.Texture47Pt5Percent:
			return "pct45";
		case TextureStyle.Texture50Percent:
		case TextureStyle.Texture52Pt5Percent:
			return "pct50";
		case TextureStyle.Texture55Percent:
		case TextureStyle.Texture57Pt5Percent:
			return "pct55";
		case TextureStyle.Texture60Percent:
			return "pct60";
		case TextureStyle.Texture62Pt5Percent:
			return "pct62";
		case TextureStyle.Texture65Percent:
		case TextureStyle.Texture67Pt5Percent:
			return "pct65";
		case TextureStyle.Texture70Percent:
		case TextureStyle.Texture72Pt5Percent:
			return "pct70";
		case TextureStyle.Texture75Percent:
		case TextureStyle.Texture77Pt5Percent:
			return "pct75";
		case TextureStyle.Texture80Percent:
		case TextureStyle.Texture82Pt5Percent:
			return "pct80";
		case TextureStyle.Texture85Percent:
			return "pct85";
		case TextureStyle.Texture87Pt5Percent:
			return "pct87";
		case TextureStyle.Texture90Percent:
		case TextureStyle.Texture92Pt5Percent:
			return "pct90";
		case TextureStyle.Texture95Percent:
		case TextureStyle.Texture97Pt5Percent:
			return "pct95";
		case TextureStyle.TextureCross:
			return "thinHorzCross";
		case TextureStyle.TextureDarkCross:
			return "horzCross";
		case TextureStyle.TextureDarkDiagonalCross:
			return "diagCross";
		case TextureStyle.TextureDarkDiagonalDown:
			return "reverseDiagStripe";
		case TextureStyle.TextureDarkDiagonalUp:
			return "diagStripe";
		case TextureStyle.TextureDarkHorizontal:
			return "horzStripe";
		case TextureStyle.TextureDarkVertical:
			return "vertStripe";
		case TextureStyle.TextureDiagonalCross:
			return "thinDiagCross";
		case TextureStyle.TextureDiagonalDown:
			return "thinReverseDiagStripe";
		case TextureStyle.TextureDiagonalUp:
			return "thinDiagStripe";
		case TextureStyle.TextureHorizontal:
			return "thinHorzStripe";
		case TextureStyle.TextureSolid:
			return "solid";
		case TextureStyle.TextureVertical:
			return "thinVertStripe";
		case TextureStyle.TextureNil:
			return "nil";
		default:
			return "clear";
		}
	}

	private string GetBorderStyle(BorderStyle borderStyle)
	{
		switch (borderStyle)
		{
		case BorderStyle.TwistedLines1:
			return "twistedLines1";
		case BorderStyle.Triple:
			return "triple";
		case BorderStyle.DashSmallGap:
			return "dashSmallGap";
		case BorderStyle.Single:
		case BorderStyle.Hairline:
			return "single";
		case BorderStyle.Dot:
			return "dotted";
		case BorderStyle.DotDash:
			return "dotDash";
		case BorderStyle.DashLargeGap:
			return "dashed";
		case BorderStyle.DotDotDash:
			return "dotDotDash";
		case BorderStyle.Double:
			return "double";
		case BorderStyle.ThinThinSmallGap:
			return "thickThinSmallGap";
		case BorderStyle.ThinThickSmallGap:
			return "thinThickSmallGap";
		case BorderStyle.ThinThickThinSmallGap:
			return "thinThickThinSmallGap";
		case BorderStyle.ThickThinMediumGap:
			return "thickThinMediumGap";
		case BorderStyle.ThinThickMediumGap:
			return "thinThickMediumGap";
		case BorderStyle.ThickThickThinMediumGap:
			return "thinThickThinMediumGap";
		case BorderStyle.ThickThinLargeGap:
			return "thickThinLargeGap";
		case BorderStyle.ThinThickLargeGap:
			return "thinThickLargeGap";
		case BorderStyle.ThinThickThinLargeGap:
			return "thinThickThinLargeGap";
		case BorderStyle.Thick:
			return "thick";
		case BorderStyle.Wave:
			return "wave";
		case BorderStyle.DoubleWave:
			return "doubleWave";
		case BorderStyle.DashDotStroker:
			return "dashDotStroked";
		case BorderStyle.Engrave3D:
			return "threeDEngrave";
		case BorderStyle.Emboss3D:
			return "threeDEmboss";
		case BorderStyle.Outset:
			return "outset";
		case BorderStyle.Inset:
			return "inset";
		case BorderStyle.Cleared:
			return "nil";
		case BorderStyle.None:
			return "none";
		case (BorderStyle)97:
			return "archedScallops";
		case (BorderStyle)70:
			return "babyPacifier";
		case (BorderStyle)71:
			return "babyRattle";
		case (BorderStyle)155:
			return "basicBlackDashes";
		case (BorderStyle)156:
			return "basicBlackDots";
		case (BorderStyle)154:
			return "basicBlackSquares";
		case (BorderStyle)151:
			return "basicThinLines";
		case (BorderStyle)152:
			return "basicWhiteDashes";
		case (BorderStyle)147:
			return "basicWhiteDots";
		case (BorderStyle)153:
			return "basicWhiteSquares";
		case (BorderStyle)150:
			return "basicWideInline";
		case (BorderStyle)148:
			return "basicWideMidline";
		case (BorderStyle)149:
			return "basicWideOutline";
		case (BorderStyle)37:
			return "bats";
		case (BorderStyle)102:
			return "birds";
		case (BorderStyle)35:
			return "birdsFlight";
		case (BorderStyle)72:
			return "cabins";
		case (BorderStyle)4:
			return "candyCorn";
		case (BorderStyle)99:
			return "celticKnotwork";
		case (BorderStyle)158:
			return "certificateBanner";
		case (BorderStyle)128:
			return "chainLink";
		case (BorderStyle)145:
			return "checkedBarBlack";
		case (BorderStyle)61:
			return "checkedBarColor";
		case (BorderStyle)144:
			return "checkered";
		case (BorderStyle)91:
			return "circlesLines";
		case (BorderStyle)140:
			return "circlesRectangles";
		case (BorderStyle)56:
			return "classicalWave";
		case (BorderStyle)54:
			return "compass";
		case (BorderStyle)31:
			return "confetti";
		case (BorderStyle)115:
			return "confettiGrays";
		case (BorderStyle)116:
			return "confettiOutline";
		case (BorderStyle)117:
			return "confettiWhite";
		case (BorderStyle)141:
			return "cornerTriangles";
		case (BorderStyle)163:
			return "couponCutoutDashes";
		case (BorderStyle)164:
			return "couponCutoutDots";
		case (BorderStyle)100:
			return "crazyMaze";
		case (BorderStyle)32:
			return "creaturesButterfly";
		case (BorderStyle)34:
			return "creaturesFish";
		case (BorderStyle)142:
			return "creaturesInsects";
		case (BorderStyle)33:
			return "creaturesLadyBug";
		case (BorderStyle)138:
			return "crossStitch";
		case (BorderStyle)67:
			return "cup";
		case (BorderStyle)89:
			return "decoArch";
		case (BorderStyle)50:
			return "decoArchColor";
		case (BorderStyle)90:
			return "decoBlocks";
		case (BorderStyle)88:
			return "diamondsGray";
		case (BorderStyle)55:
			return "doubleD";
		case (BorderStyle)127:
			return "doubleDiamonds";
		case (BorderStyle)101:
			return "eclipsingSquares1";
		case (BorderStyle)86:
			return "eclipsingSquares2";
		case (BorderStyle)66:
			return "eggsBlack";
		case (BorderStyle)51:
			return "fans";
		case (BorderStyle)52:
			return "film";
		case (BorderStyle)28:
			return "firecrackers";
		case (BorderStyle)49:
			return "flowersBlockPrint";
		case (BorderStyle)48:
			return "flowersDaisies";
		case (BorderStyle)45:
			return "flowersModern1";
		case (BorderStyle)44:
			return "flowersModern2";
		case (BorderStyle)43:
			return "flowersPansy";
		case (BorderStyle)39:
			return "flowersRedRose";
		case (BorderStyle)38:
			return "flowersRoses";
		case (BorderStyle)103:
			return "flowersTeacup";
		case (BorderStyle)42:
			return "flowersTiny";
		case (BorderStyle)139:
			return "gems";
		case (BorderStyle)69:
			return "gingerbreadMan";
		case (BorderStyle)122:
			return "gradient";
		case (BorderStyle)159:
			return "handmade1";
		case (BorderStyle)160:
			return "handmade2";
		case (BorderStyle)68:
			return "heartGray";
		case (BorderStyle)120:
			return "heebieJeebies";
		case (BorderStyle)41:
			return "holly";
		case (BorderStyle)73:
			return "houseFunky";
		case (BorderStyle)87:
			return "hypnotic";
		case (BorderStyle)121:
			return "lightBulb";
		case (BorderStyle)53:
			return "lightning1";
		case (BorderStyle)119:
			return "lightning2";
		case (BorderStyle)81:
			return "mapleLeaf";
		case (BorderStyle)30:
			return "mapPins";
		case (BorderStyle)146:
			return "marquee";
		case (BorderStyle)131:
			return "marqueeToothed";
		case (BorderStyle)125:
			return "moons";
		case (BorderStyle)118:
			return "mosaic";
		case (BorderStyle)79:
			return "musicNotes";
		case (BorderStyle)104:
			return "northwest";
		case (BorderStyle)126:
			return "ovals";
		case (BorderStyle)80:
			return "palmsBlack";
		case (BorderStyle)82:
			return "paperClips";
		case (BorderStyle)92:
			return "papyrus";
		case (BorderStyle)84:
			return "people";
		case (BorderStyle)85:
			return "peopleWaving";
		case (BorderStyle)40:
			return "poinsettias";
		case (BorderStyle)135:
			return "postageStamp";
		case (BorderStyle)65:
			return "pumpkin1";
		case (BorderStyle)63:
			return "pushPinNote1";
		case (BorderStyle)64:
			return "pushPinNote2";
		case (BorderStyle)113:
			return "pyramids";
		case (BorderStyle)114:
			return "pyramidsAbove";
		case (BorderStyle)60:
			return "quadrants";
		case (BorderStyle)29:
			return "rings";
		case (BorderStyle)98:
			return "safari";
		case (BorderStyle)133:
			return "sawtooth";
		case (BorderStyle)134:
			return "sawtoothGray";
		case (BorderStyle)36:
			return "scaredCat";
		case (BorderStyle)78:
			return "seattle";
		case (BorderStyle)57:
			return "shadowedSquares";
		case (BorderStyle)132:
			return "sharksTeeth";
		case (BorderStyle)83:
			return "shorebirdTracks";
		case (BorderStyle)77:
			return "skyrocket";
		case (BorderStyle)76:
			return "snowflakeFancy";
		case (BorderStyle)75:
			return "snowflakes";
		case (BorderStyle)105:
			return "southwest";
		case (BorderStyle)74:
			return "starsBlack";
		case (BorderStyle)157:
			return "starsTop";
		case (BorderStyle)62:
			return "swirligig";
		case (BorderStyle)161:
			return "tornPaper";
		case (BorderStyle)162:
			return "tornPaperBlack";
		case (BorderStyle)123:
			return "triangleParty";
		case (BorderStyle)129:
			return "triangles";
		case (BorderStyle)130:
			return "tribal1";
		case (BorderStyle)109:
			return "tribal2";
		case (BorderStyle)108:
			return "tribal3";
		case (BorderStyle)107:
			return "tribal4";
		case (BorderStyle)110:
			return "tribal5";
		case (BorderStyle)106:
			return "tribal6";
		case (BorderStyle)58:
			return "twistedLines1";
		case (BorderStyle)124:
			return "twistedLines2";
		case (BorderStyle)47:
			return "vine";
		case (BorderStyle)59:
			return "waveline";
		case (BorderStyle)96:
			return "weavingAngles";
		case (BorderStyle)94:
			return "weavingBraid";
		case (BorderStyle)95:
			return "weavingRibbon";
		case (BorderStyle)136:
			return "weavingStrips";
		case (BorderStyle)46:
			return "whiteFlowers";
		case (BorderStyle)93:
			return "woodwork";
		case (BorderStyle)111:
			return "xIllusions";
		case (BorderStyle)112:
			return "zanyTriangles";
		case (BorderStyle)137:
			return "zigZag";
		case (BorderStyle)143:
			return "zigZagStitch";
		default:
			return "single";
		}
	}

	private string GetUnderlineStyle(DocGen.Drawing.UnderlineStyle underlineStyle)
	{
		return underlineStyle switch
		{
			DocGen.Drawing.UnderlineStyle.Dash => "dash", 
			DocGen.Drawing.UnderlineStyle.DotDotDashHeavy => "dashDotDotHeavy", 
			DocGen.Drawing.UnderlineStyle.DotDashHeavy => "dashDotHeavy", 
			DocGen.Drawing.UnderlineStyle.DashHeavy => "dashedHeavy", 
			DocGen.Drawing.UnderlineStyle.DashLong => "dashLong", 
			DocGen.Drawing.UnderlineStyle.DashLongHeavy => "dashLongHeavy", 
			DocGen.Drawing.UnderlineStyle.DotDash => "dotDash", 
			DocGen.Drawing.UnderlineStyle.DotDotDash => "dotDotDash", 
			DocGen.Drawing.UnderlineStyle.Dotted => "dotted", 
			DocGen.Drawing.UnderlineStyle.DottedHeavy => "dottedHeavy", 
			DocGen.Drawing.UnderlineStyle.Double => "double", 
			DocGen.Drawing.UnderlineStyle.Single => "single", 
			DocGen.Drawing.UnderlineStyle.Thick => "thick", 
			DocGen.Drawing.UnderlineStyle.Wavy => "wave", 
			DocGen.Drawing.UnderlineStyle.WavyDouble => "wavyDouble", 
			DocGen.Drawing.UnderlineStyle.WavyHeavy => "wavyHeavy", 
			DocGen.Drawing.UnderlineStyle.Words => "words", 
			_ => "none", 
		};
	}

	private string GetTextEffect(TextEffect textEffect)
	{
		return textEffect switch
		{
			TextEffect.BlinkingBackground => "blinkBackground", 
			TextEffect.LasVegasLights => "lights", 
			TextEffect.MarchingBlackAnts => "antsBlack", 
			TextEffect.MarchingRedAnts => "antsRed", 
			TextEffect.SparkleText => "sparkle", 
			TextEffect.Shimmer => "shimmer", 
			_ => "none", 
		};
	}

	private string GetEmphasisType(EmphasisType emphasisType)
	{
		return emphasisType switch
		{
			EmphasisType.Circle => "circle", 
			EmphasisType.Comma => "comma", 
			EmphasisType.Dot => "dot", 
			EmphasisType.UnderDot => "underDot", 
			_ => "none", 
		};
	}

	private string GetHighlightColor(Color color)
	{
		if (color.ToArgb() == Color.Black.ToArgb())
		{
			return "black";
		}
		if (color.ToArgb() == Color.Blue.ToArgb())
		{
			return "blue";
		}
		if (color.ToArgb() == Color.Cyan.ToArgb())
		{
			return "cyan";
		}
		if (color.ToArgb() == Color.DarkBlue.ToArgb())
		{
			return "darkBlue";
		}
		if (color.ToArgb() == Color.DarkCyan.ToArgb())
		{
			return "darkCyan";
		}
		if (color.ToArgb() == Color.DarkGray.ToArgb() || color == Color.FromArgb(0, 128, 128, 128))
		{
			return "darkGray";
		}
		if (color.ToArgb() == Color.DarkGreen.ToArgb())
		{
			return "darkGreen";
		}
		if (color.ToArgb() == Color.DarkMagenta.ToArgb())
		{
			return "darkMagenta";
		}
		if (color.ToArgb() == Color.DarkRed.ToArgb())
		{
			return "darkRed";
		}
		if (color.ToArgb() == Color.Green.ToArgb())
		{
			return "green";
		}
		if (color.ToArgb() == Color.Gold.ToArgb())
		{
			return "darkYellow";
		}
		if (color.ToArgb() == Color.LightGray.ToArgb())
		{
			return "lightGray";
		}
		if (color.ToArgb() == Color.Magenta.ToArgb())
		{
			return "magenta";
		}
		if (color.ToArgb() == Color.Red.ToArgb())
		{
			return "red";
		}
		if (color.ToArgb() == Color.White.ToArgb())
		{
			return "white";
		}
		if (color.ToArgb() == Color.Yellow.ToArgb())
		{
			return "yellow";
		}
		return "none";
	}

	public string ToString(float value)
	{
		return ((int)Math.Round(value)).ToString(CultureInfo.InvariantCulture);
	}

	private string GetRGBCode(Color color)
	{
		return color.R.ToString("X2") + color.G.ToString("X2") + color.B.ToString("X2");
	}

	private float GetDefFontSize(WordDocument doc, short key)
	{
		Style style = doc.Styles.FindByName("Default Paragraph Font") as Style;
		doc.Styles.FindByName("Normal");
		float result = 0f;
		if (style != null && style.CharacterFormat.HasValue(key))
		{
			result = style.CharacterFormat.FontSize;
		}
		return result;
	}

	private string GetPatternType(WListLevel listLevel)
	{
		string empty = string.Empty;
		return listLevel.PatternType switch
		{
			ListPatternType.Arabic => "decimal", 
			ListPatternType.UpRoman => "upperRoman", 
			ListPatternType.LowRoman => "lowerRoman", 
			ListPatternType.UpLetter => "upperLetter", 
			ListPatternType.LowLetter => "lowerLetter", 
			ListPatternType.Ordinal => "ordinal", 
			ListPatternType.OrdinalText => "ordinalText", 
			ListPatternType.LeadingZero => "decimalZero", 
			ListPatternType.Bullet => "bullet", 
			ListPatternType.Number => "cardinalText", 
			ListPatternType.FarEast => "aiueoFullWidth", 
			ListPatternType.Special => "russianLower", 
			ListPatternType.ChineseCountingThousand => "chineseCountingThousand", 
			ListPatternType.KanjiDigit => "japaneseCounting", 
			_ => "none", 
		};
	}

	private char GetListSymbol(int level)
	{
		return level switch
		{
			1 => '\0', 
			2 => '\u0001', 
			3 => '\u0002', 
			4 => '\u0003', 
			5 => '\u0004', 
			6 => '\u0005', 
			7 => '\u0006', 
			8 => '\a', 
			_ => '\b', 
		};
	}

	internal static string UpdateNumberPrefOrSuf(string prefix)
	{
		return prefix.Replace("\0", "%1").Replace("\u0001", "%2").Replace("\u0002", "%3")
			.Replace("\u0003", "%4")
			.Replace("\u0004", "%5")
			.Replace("\u0005", "%6")
			.Replace("\u0006", "%7")
			.Replace("\a", "%8")
			.Replace("\b", "%9");
	}

	private string GetPageNumType(PageNumberStyle pageNumberStyle)
	{
		return pageNumberStyle switch
		{
			PageNumberStyle.RomanLower => "lowerRoman", 
			PageNumberStyle.RomanUpper => "upperRoman", 
			PageNumberStyle.LetterLower => "lowerLetter", 
			PageNumberStyle.LetterUpper => "upperLetter", 
			_ => "decimal", 
		};
	}

	private int GetNextBookmarkID()
	{
		int num = ++m_bookmarkId;
		if (num == m_trackChangeId - 1)
		{
			num = ++m_bookmarkId;
		}
		return num;
	}

	private long GetNextDocPrID()
	{
		return ++m_document.maxShapeId;
	}

	private int GetNextShapeID()
	{
		return ++m_shapeID;
	}

	private string ModifyText(string text)
	{
		text = text.Replace(ControlChar.CrLf, '\r'.ToString());
		text = text.Replace('\n', '\r');
		text = text.Replace('\a'.ToString(), string.Empty);
		text = text.Replace('\b'.ToString(), string.Empty);
		return text;
	}

	private Entity GetBaseEntity(Entity entity)
	{
		Entity entity2 = entity;
		do
		{
			if (entity2.Owner == null)
			{
				return entity2;
			}
			entity2 = entity2.Owner;
		}
		while (!(entity2 is WSection) && !(entity2 is HeaderFooter));
		return entity2;
	}

	private Entity GetChartBaseEntity(Entity entity)
	{
		Entity entity2 = entity;
		do
		{
			if (entity2.Owner == null)
			{
				return entity2;
			}
			entity2 = entity2.Owner;
		}
		while (!(entity2 is WFootnote) && !(entity2 is WComment) && !(entity2 is HeaderFooter));
		return entity2;
	}

	private bool IsPageBreakNeedToBeSkipped(Entity entity)
	{
		Entity entity2 = entity;
		do
		{
			if (entity2.Owner == null)
			{
				return false;
			}
			entity2 = entity2.Owner;
		}
		while (!(entity2 is WTextBox) && !(entity2 is WFootnote) && !(entity2 is HeaderFooter));
		return true;
	}

	private void UpdateItemRelation(ParagraphItem item, string newID, DictionaryEntry itemRel)
	{
		if (item.GetBaseEntity(item) is HeaderFooter)
		{
			HeaderFooter hf = item.GetBaseEntity(item) as HeaderFooter;
			UpdateHFXmlRels(newID, hf, itemRel);
		}
		else
		{
			XmlItemsRelations.Add(newID, itemRel);
		}
	}

	private List<string> FindRelationshipIds(Stream XmlParaItemStream)
	{
		XmlParaItemStream.Position = 0L;
		XmlReader xmlReader = DocGen.DocIO.DLS.Convertors.UtilityMethods.CreateReader(XmlParaItemStream);
		List<string> list = new List<string>();
		bool flag = false;
		do
		{
			flag = false;
			string text = string.Empty;
			string text2 = string.Empty;
			switch (xmlReader.LocalName.ToLower())
			{
			case "fill":
			case "hyperlink":
			case "imagedata":
			case "oleobject":
			case "stroke":
			case "chart":
			case "control":
				text = xmlReader.GetAttribute("id", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
				text2 = xmlReader.GetAttribute("href", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
				break;
			case "blip":
				text = xmlReader.GetAttribute("embed", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
				break;
			case "relids":
				text = xmlReader.GetAttribute("dm", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
				if (!string.IsNullOrEmpty(text))
				{
					list.Add(text);
				}
				text = xmlReader.GetAttribute("lo", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
				if (!string.IsNullOrEmpty(text))
				{
					list.Add(text);
				}
				text = xmlReader.GetAttribute("qs", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
				if (!string.IsNullOrEmpty(text))
				{
					list.Add(text);
				}
				text = xmlReader.GetAttribute("cs", IsStrict ? "http://purl.oclc.org/ooxml/officeDocument/relationships" : "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
				if (!string.IsNullOrEmpty(text))
				{
					list.Add(text);
				}
				flag = true;
				break;
			}
			if (text != null && text != string.Empty && !flag)
			{
				list.Add(text);
			}
			if (text2 != null && text2 != string.Empty)
			{
				list.Add(text2);
			}
			xmlReader.Read();
		}
		while (!xmlReader.EOF);
		return list;
	}

	private bool IsDocumentContainsDefaultTableStyle()
	{
		if (!(m_document.Styles.FindByName("Normal Table") is Style { StyleType: StyleType.TableStyle }) && !(m_document.Styles.FindByName("NormalTable") is Style { StyleType: StyleType.TableStyle }) && !(m_document.Styles.FindByName("Table Normal") is Style { StyleType: StyleType.TableStyle }) && !(m_document.Styles.FindByName("TableNormal") is Style { StyleType: StyleType.TableStyle }))
		{
			return false;
		}
		return true;
	}

	internal void Close()
	{
		if (m_archive != null)
		{
			m_archive.Dispose();
			m_archive = null;
		}
		m_document = null;
		if (m_writer != null)
		{
			m_writer = null;
		}
		if (m_lstStyleReferences != null)
		{
			foreach (Dictionary<int, string> value in m_lstStyleReferences.Values)
			{
				value.Clear();
			}
			m_lstStyleReferences.Clear();
			m_lstStyleReferences = null;
		}
		if (m_pictureBullets != null)
		{
			m_pictureBullets.Clear();
			m_pictureBullets = null;
		}
		if (m_relations != null)
		{
			m_relations.Clear();
			m_relations = null;
		}
		if (m_hfChartCollection != null)
		{
			m_hfChartCollection.Clear();
			m_hfChartCollection = null;
		}
		if (m_endnoteChartCollection != null)
		{
			m_endnoteChartCollection.Clear();
			m_endnoteChartCollection = null;
		}
		if (m_footnoteChartCollection != null)
		{
			m_footnoteChartCollection.Clear();
			m_footnoteChartCollection = null;
		}
		if (m_commentsChartCollection != null)
		{
			m_commentsChartCollection.Clear();
			m_commentsChartCollection = null;
		}
		if (m_chartRelationId != null)
		{
			m_chartRelationId.Clear();
			m_chartRelationId = null;
		}
		if (m_defaultChartStyleElements != null)
		{
			m_defaultChartStyleElements.Clear();
			m_defaultChartStyleElements = null;
		}
		if (m_defaultColorVariations != null)
		{
			m_defaultColorVariations = null;
		}
		if (m_documentImages != null)
		{
			m_documentImages.Clear();
			m_documentImages = null;
		}
		if (m_externalLinkImages != null)
		{
			m_externalLinkImages.Clear();
			m_externalLinkImages = null;
		}
		if (m_footnoteImages != null)
		{
			m_footnoteImages.Clear();
			m_footnoteImages = null;
		}
		if (m_endnoteImages != null)
		{
			m_endnoteImages.Clear();
			m_endnoteImages = null;
		}
		if (m_commentImages != null)
		{
			m_commentImages.Clear();
			m_commentImages = null;
		}
		if (m_headerFooterImages != null)
		{
			foreach (Dictionary<string, ImageRecord> value2 in m_headerFooterImages.Values)
			{
				value2.Clear();
			}
			m_headerFooterImages.Clear();
			m_headerFooterImages = null;
		}
		if (m_headerFooterSvgImages != null)
		{
			foreach (Dictionary<string, Stream> value3 in m_headerFooterSvgImages.Values)
			{
				value3.Clear();
			}
			m_headerFooterSvgImages.Clear();
			m_headerFooterSvgImages = null;
		}
		if (m_bookmarks != null)
		{
			m_bookmarks.Clear();
			m_bookmarks = null;
		}
		if (m_FallBackbookmarks != null)
		{
			m_FallBackbookmarks.Clear();
			m_FallBackbookmarks = null;
		}
		if (m_editableRanges != null)
		{
			m_editableRanges.Clear();
			m_editableRanges = null;
		}
		if (m_headerFooterColl != null)
		{
			foreach (Dictionary<string, HeaderFooter> value4 in m_headerFooterColl.Values)
			{
				value4.Clear();
			}
			m_headerFooterColl.Clear();
			m_headerFooterColl = null;
		}
		if (m_symbolFontNames != null)
		{
			m_symbolFontNames.Clear();
			m_symbolFontNames = null;
		}
		if (m_bookMarkCollection != null)
		{
			m_bookMarkCollection.Clear();
			m_bookMarkCollection = null;
		}
		if (m_editableRangeCollection != null)
		{
			m_editableRangeCollection.Clear();
			m_editableRangeCollection = null;
		}
		if (m_oleIds != null)
		{
			m_oleIds.Clear();
			m_oleIds = null;
		}
		if (m_oleContainers != null)
		{
			m_oleContainers.Clear();
			m_oleContainers = null;
		}
		if (m_svgDataHash != null)
		{
			m_svgDataHash.Clear();
			m_svgDataHash = null;
		}
		if (m_svgDataCollections != null)
		{
			m_svgDataCollections.Clear();
			m_svgDataCollections = null;
		}
		if (m_hfOleContainers != null)
		{
			foreach (Dictionary<string, Stream> value5 in m_hfOleContainers.Values)
			{
				value5.Clear();
			}
			m_hfOleContainers.Clear();
			m_hfOleContainers = null;
		}
		if (m_oleTypes != null)
		{
			m_oleTypes.Clear();
			m_oleTypes = null;
		}
		if (m_xmlItemsRef != null)
		{
			m_xmlItemsRef.Clear();
			m_xmlItemsRef = null;
		}
		if (m_commentsId != null)
		{
			m_commentsId.Clear();
			m_commentsId = null;
		}
		if (m_commentsCollection != null)
		{
			m_commentsCollection.Clear();
			m_commentsCollection = null;
		}
		if (m_footnoteColl != null)
		{
			m_footnoteColl.Clear();
			m_footnoteColl = null;
		}
		if (m_endnoteColl != null)
		{
			m_endnoteColl.Clear();
			m_endnoteColl = null;
		}
		if (m_hyperlinkTargets != null)
		{
			m_hyperlinkTargets.Clear();
			m_hyperlinkTargets = null;
		}
		if (m_altChunkTargets != null)
		{
			m_altChunkTargets.Clear();
			m_altChunkTargets = null;
		}
		if (m_altChunkContentTypes != null)
		{
			m_altChunkContentTypes.Clear();
			m_altChunkContentTypes = null;
		}
		if (m_footnoteHyperlinks != null)
		{
			m_footnoteHyperlinks.Clear();
			m_footnoteHyperlinks = null;
		}
		if (m_footnoteAlternateChunks != null)
		{
			m_footnoteAlternateChunks.Clear();
			m_footnoteAlternateChunks = null;
		}
		if (m_endnoteHyperlinks != null)
		{
			m_endnoteHyperlinks.Clear();
			m_endnoteHyperlinks = null;
		}
		if (m_endnoteAlternateChunks != null)
		{
			m_endnoteAlternateChunks.Clear();
			m_endnoteAlternateChunks = null;
		}
		if (m_commentHyperlinks != null)
		{
			m_commentHyperlinks.Clear();
			m_commentHyperlinks = null;
		}
		if (m_commentAlternateChunks != null)
		{
			m_commentAlternateChunks.Clear();
			m_commentAlternateChunks = null;
		}
		if (m_hfIncludePicFieldUrl != null)
		{
			m_hfIncludePicFieldUrl.Clear();
			m_hfIncludePicFieldUrl = null;
		}
		if (m_inclPicFieldUrl != null)
		{
			m_inclPicFieldUrl.Clear();
			m_inclPicFieldUrl = null;
		}
		if (m_headerFooterHyperlinks != null)
		{
			foreach (Dictionary<string, string> value6 in m_headerFooterHyperlinks.Values)
			{
				value6.Clear();
			}
			m_headerFooterHyperlinks.Clear();
			m_headerFooterHyperlinks = null;
		}
		if (m_headerFooterAlternateChunks != null)
		{
			foreach (Dictionary<string, string> value7 in m_headerFooterAlternateChunks.Values)
			{
				value7.Clear();
			}
			m_headerFooterAlternateChunks.Clear();
			m_headerFooterAlternateChunks = null;
		}
		if (m_headerFooterInclPicUrls != null)
		{
			foreach (Dictionary<string, string> value8 in m_headerFooterInclPicUrls.Values)
			{
				value8.Clear();
			}
			m_headerFooterInclPicUrls.Clear();
			m_headerFooterInclPicUrls = null;
		}
		if (m_hfRelations != null)
		{
			foreach (Dictionary<string, DictionaryEntry> value9 in m_hfRelations.Values)
			{
				value9.Clear();
			}
			m_hfRelations.Clear();
			m_hfRelations = null;
		}
		if (m_chartsPathNames != null)
		{
			m_chartsPathNames.Clear();
			m_chartsPathNames = null;
		}
		if (m_cntlPathNames != null)
		{
			m_cntlPathNames.Clear();
			m_cntlPathNames = null;
		}
		if (m_splittedTextNode != null)
		{
			m_splittedTextNode = null;
		}
		m_splittedItem = null;
		if (m_fieldStack != null)
		{
			m_fieldStack.Clear();
			m_fieldStack = null;
		}
		if (m_fieldMarkStack != null)
		{
			m_fieldMarkStack.Clear();
			m_fieldMarkStack = null;
		}
		if (m_settingsRelations != null)
		{
			m_settingsRelations.Clear();
			m_settingsRelations = null;
		}
		if (m_autoShapeHelper != null)
		{
			m_autoShapeHelper.Close();
			m_autoShapeHelper = null;
		}
		if (m_imagesPath != null)
		{
			m_imagesPath.Clear();
			m_imagesPath = null;
		}
		if (m_movingRevisionCollection != null)
		{
			m_movingRevisionCollection.Clear();
			m_movingRevisionCollection = null;
		}
		if (m_movingRevisionDetails != null)
		{
			m_movingRevisionDetails.Clear();
			m_movingRevisionDetails = null;
		}
		if (m_commentMarkCollection != null)
		{
			m_commentMarkCollection.Clear();
			m_commentMarkCollection = null;
		}
	}

	internal bool StartsWithExt(string text, string value)
	{
		return text.StartsWith(value);
	}
}
